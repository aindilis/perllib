# ELKFED system properties file

# Specify the paths to the train and test data here

# This is just a test corpus consisting of one document.
# For a real run, make sure to add the path to your data here.
# NOTE: You must have write priveleges in the directory where 
#       your data is if you are running the pipeline.
trainDataId =Andy
trainData = ./sample/Andy
testData = ./sample/Andy
trainDataId.muc6=MUC6
trainDataId.muc7=MUC7
trainData.bnews = /space/versley/Elkfed/ACE02_Bnews/ace2_train/bnews
trainData.npaper = /space/versley/Elkfed/ACE02_Npaper/ace2_train/npaper
trainData.nwire = /space/versley/Elkfed/ACE02_Nwire/ace2_train/nwire
trainData.muc6 = /space/versley/Elkfed/MUC-MMAX/muc6/train
trainData.muc6crf = /space/versley/Elkfed/MUC-CRFChunk/muc6/train
trainData.muc7 = /space/versley/Elkfed/MUC-MMAX/muc7/train
trainData.np4e = /home/yannick.versley/np4e/np4e-train
trainData.ontoSP = /home/corpora/Ontonotes2_mmax_StandardPipeline/train
trainData.ontoGP = /home/corpora/OntoNotes2_mmax/train
testData.bnews = /space/versley/Elkfed/ACE02_Bnews/ace2_devtest/bnews
testData.npaper = /space/versley/Elkfed/ACE02_Npaper/ace2_devtest/npaper
testData.nwire = /space/versley/Elkfed/ACE02_Nwire/ace2_devtest/nwire
testData.muc6 = /space/versley/Elkfed/MUC-MMAX/muc6/test
testData.muc6crf = /space/versley/Elkfed/MUC-CRFChunk/muc6/test
testData.muc7 = /space/versley/Elkfed/MUC-MMAX/muc7/test
testData.np4e = /home/yannick.versley/np4e/np4e-test
testData.sample = ./sample/Andy
testData.ontoSP = /home/corpora/Ontonotes2_mmax_StandardPipeline/dev
testData.ontoGP = /home/corpora/OntoNotes2_mmax/dev
testDataId=Andy
testDataId.muc6=MUC6
testDataId.muc6crf=MUC6
testDataId.muc7=MUC7

mentionFactory=elkfed.coref.mentions.DefaultMentionFactory
mentionFactory.muc6=elkfed.coref.mentions.FullDocMentionFactory
mentionFactory.muc6crf=elkfed.coref.mentions.FullDocMentionFactory
mentionFactory.muc7=elkfed.coref.mentions.FullDocMentionFactory
filterPrenomChains.muc7=true
# Pipeline facilities
# Set this property to true to run the preprocessing pipeline
# which will annotate the training and testing data (i.e. create
# the markable files).
#runPipeline = true
runPipeline=false
# Use this one to run the chunker
#pipeline = elkfed.mmax.pipeline.DefaultPipeline
# Use this one to run the parser instead of the chunker
pipeline = elkfed.mmax.pipeline.ParserPipeline
#pipeline = elkfed.mmax.pipeline.GoldParsePipeline
# Specify the parser you want to use here (BerkeleyParser or CharniakParser)
parser = elkfed.mmax.pipeline.BerkeleyParser

svmlearn =  /export/ws07elerfed/software/extra-i686/bin/svmltk_learn
svmclassify = /export/ws07elerfed/software/extra-i686/bin/svmltk_classify
charniakDir = /export/ws07elerfed/software/charniak
yamchaExe = /usr/local/bin/yamcha
morphg=/export/ws07elerfed/software/morph/morphg.ix86_linux

maleNamesDB = ./names/person_male.lst
femaleNamesDB = ./names/person_female.lst
bergsmaGenderDB = ./names/gender.txt
stopwordDB = ./names/englishST.txt

modelDir = ./models/coref
trainDataSink = idc0.arff
modelName = idc0.obj

wikiDB_driver=com.mysql.jdbc.Driver
wikiDB_user=root
wikiDB_password=root
wikiDB_dburl=jdbc:mysql://llama:3306/wikidb?useOldUTF8Behavior=true&useUnicode=true&characterEncoding=UTF-8


default_system=idc0_mixrank
# remove the svmlight_tk_so entry to use the precompiled Linux library
# in the scripts/ directory
svmlight_tk_so=/export/ws07elerfed/software/extra-i686/lib/svmlight_tk.so

msn_app_id=0707C52B3E298FE4A868E32A5F0882AFA6B5C20F
