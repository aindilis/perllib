vagrant@nlp:/var/lib/myfrdcsa/codebases/minor/workhorse/scripts$ ./process-to-analyze.sh
</var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf>
<FILE: /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess>
mkdir -p /tmp/workhorse/
cd /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze && sentence-split -s 250 /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess
mv /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess /tmp/workhorse/
cd /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze && mkdir -p /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess
cd /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze && mv x* /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess
Execute these commands?: y
</var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess>
/var/lib/myfrdcsa/codebases/minor/free-knext/scripts/knext.pl -d -f /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess/x2.workhorse
warning: Prolog import export not fully functional
$VAR1 = {
          'Batch' => [
                       'S.P. = Rs 120 OBJECTIVE-TYPE QUESTIONS P = 120 – 80 = 40 P% = 40 × 100 = 50 80 5.',
                       '(c) Let weight of bucket (empty) = x kg (say) Weight of water when the bucket is full = y kg 1 494 + + 999 × 99 = 1 + (1000 – 1)99 5 5 = 1 + 99000 – 99 = 98902 3 100 CP 6 = = 100 × = =6:7 SP 100 + 50 350 7 3 y 3 = 70 ....',
                       '(i) x + y = 80 ....'
                     ],
          'ResultHash' => {}
        };
rm: cannot remove `/tmp/stanfordparser.txt': No such file or directory
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 24]: [S.P., =, Rs, 120, OBJECTIVE-TYPE, QUESTIONS, P, =, 120, --, 80, =, 40, P, %, =, 40, ×, 100, =, 50, 80, 5, .]
Parsing [sent. 2 len. 85]: [-LRB-, c, -RRB-, Let, weight, of, bucket, -LRB-, empty, -RRB-, =, x, kg, -LRB-, say, -RRB-, Weight, of, water, when, the, bucket, is, full, =, y, kg, 1, 494, +, +, 999, ×, 99, =, 1, +, -LRB-, 1000, --, 1, -RRB-, 99, 5, 5, =, 1, +, 99000, --, 99, =, 98902, 3, 100, CP, 6, =, =, 100, ×, =, =, 6:7, SP, 100, +, 50, 350, 7, 3, y, 3, =, 70, ..., -LRB-, i, -RRB-, x, +, y, =, 80, ...]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [2 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 109 words in 2 sentences (26.30 wds/sec; 0.48 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => '((S
    (S
      (NP (NNP S\\.P\\.) (NNP =) (NNP Rs) (CD 120) (NN OBJECTIVE-TYPE))
      (VP (VBZ QUESTIONS)
        (S
          (NP (NNP P))
          (VP (SYM =)
            (NP (CD 120))))))
    (\\: --)
    (S
      (NP
        (NP (CD 80))
        (VP (VBG =)
          (NP
            (QP (CD 40) (CD P))
            (NN %))
          (S
            (VP (SYM =)
              (NP (CD 40) (JJ ×) (CD 100))))))
      (VP (VBZ =)
        (NP
          (QP (CD 50) (CD 80))
          (CD 5))))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Initializing 
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP (NNP S\\.P\\.) (NNP =) (NNP Rs) (CD 120) (NN OBJECTIVE-TYPE))
      (VP (VBZ QUESTIONS)
        (S
          (NP (NNP P))
          (VP (SYM =)
            (NP (CD 120))))))
    (\\: --)
    (S
      (NP
        (NP (CD 80))
        (VP (VBG =)
          (NP
            (QP (CD 40) (CD P))
            (NN %))
          (S
            (VP (SYM =)
              (NP (CD 40) (JJ ×) (CD 100))))))
      (VP (VBZ =)
        (NP
          (QP (CD 50) (CD 80))
          (CD 5))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP (NNP S\\.P\\.) (NNP =) (NNP Rs) (CD 120) (NN OBJECTIVE-TYPE))
      (VP (VBZ QUESTIONS)
        (S
          (NP (NNP P))
          (VP (SYM =)
            (NP (CD 120))))))
    (\\: --)
    (S
      (NP
        (NP (CD 80))
        (VP (VBG =)
          (NP
            (QP (CD 40) (CD P))
            (NN %))
          (S
            (VP (SYM =)
              (NP (CD 40) (JJ ×) (CD 100))))))
      (VP (VBZ =)
        (NP
          (QP (CD 50) (CD 80))
          (CD 5)))))))
'
        };
Submitting expect

*** - STRING: argument 120 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - STRING: argument 120 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(ii) ATS x + 2 4 12.',
                       '(a) Solving (i) and (ii) we get x = 50, y = 40 13.',
                       '(d) L.C.M. of 12, 16, 24 = 48, 480 is divisible by 48.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 10]: [-LRB-, ii, -RRB-, ATS, x, +, 2, 4, 12, .]
Parsing [sent. 2 len. 22]: [-LRB-, a, -RRB-, Solving, -LRB-, i, -RRB-, and, -LRB-, ii, -RRB-, we, get, x, =, 50, ,, y, =, 40, 13, .]
Parsing [sent. 3 len. 19]: [-LRB-, d, -RRB-, L.C.M., of, 12, ,, 16, ,, 24, =, 48, ,, 480, is, divisible, by, 48, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 51 words in 3 sentences (14.58 wds/sec; 0.86 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (-LRB- -LRB-) (NNP ii) (-RRB- -RRB-))
    (VP (VBP ATS)
      (SBAR
        (S
          (NP (SYM x))
          (VP (VBZ +)
            (NP
              (QP (CD 2) (CD 4))
              (CD 12))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(ATS-4, ii-2)',
                                                       'nsubj(+-6, x-5)',
                                                       'ccomp(ATS-4, +-6)',
                                                       'number(4-8, 2-7)',
                                                       'num(12-9, 4-8)',
                                                       'dobj(+-6, 12-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP
      (VP (VB Solving)
        (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
        (CC and)
        (NP
          (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP get)
                (S
                  (NP (SYM x))
                  (VP (SYM =)
                    (NP (CD 50)))))))))
      (, ,)
      (VP (VB y)
        (S
          (VP (SYM =)
            (NP (CD 40) (CD 13))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dep(Solving-4, i-6)',
                                                       'conj_and(Solving-4, ii-10)',
                                                       'dobj(Solving-4, ii-10)',
                                                       'dobj(get-13, ii-10)',
                                                       'nsubj(get-13, we-12)',
                                                       'rcmod(ii-10, get-13)',
                                                       'nsubj(50-16, x-14)',
                                                       'dep(50-16, =-15)',
                                                       'ccomp(get-13, 50-16)',
                                                       'dep(Solving-4, y-18)',
                                                       'dep(13-21, =-19)',
                                                       'num(13-21, 40-20)',
                                                       'ccomp(y-18, 13-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP
        (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
        (NP (NNP L.C.M.))
        (PP (IN of)
          (NP (CD 12))))
      (, ,)
      (NP
        (NP (CD 16))
        (, ,)
        (NP
          (NP (CD 24))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 48)))))))
      (, ,))
    (ADVP (RB 480))
    (VP (VBZ is)
      (ADJP (JJ divisible)
        (PP (IN by)
          (NP (CD 48)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(L.C.M.-4, d-2)',
                                                       'nsubj(divisible-16, L.C.M.-4)',
                                                       'prep_of(L.C.M.-4, 12-6)',
                                                       'appos(L.C.M.-4, 16-8)',
                                                       'appos(16-8, 24-10)',
                                                       'dep(48-12, =-11)',
                                                       'rcmod(24-10, 48-12)',
                                                       'advmod(divisible-16, 480-14)',
                                                       'cop(divisible-16, is-15)',
                                                       'prep_by(divisible-16, 48-18)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (-LRB- -LRB-) (NNP ii) (-RRB- -RRB-))
    (VP (VBP ATS)
      (SBAR
        (S
          (NP (SYM x))
          (VP (VBZ +)
            (NP
              (QP (CD 2) (CD 4))
              (CD 12))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP
      (VP (VB Solving)
        (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
        (CC and)
        (NP
          (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP get)
                (S
                  (NP (SYM x))
                  (VP (SYM =)
                    (NP (CD 50)))))))))
      (\\, \\,)
      (VP (VB y)
        (S
          (VP (SYM =)
            (NP (CD 40) (CD 13))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
        (NP (NNP L\\.C\\.M\\.))
        (PP (IN of)
          (NP (CD 12))))
      (\\, \\,)
      (NP
        (NP (CD 16))
        (\\, \\,)
        (NP
          (NP (CD 24))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 48)))))))
      (\\, \\,))
    (ADVP (RB 480))
    (VP (VBZ is)
      (ADJP (JJ divisible)
        (PP (IN by)
          (NP (CD 48)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (-LRB- -LRB-) (NNP ii) (-RRB- -RRB-))
    (VP (VBP ATS)
      (SBAR
        (S
          (NP (SYM x))
          (VP (VBZ +)
            (NP
              (QP (CD 2) (CD 4))
              (CD 12))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (-LRB- -LRB-) (NNP ii) (-RRB- -RRB-))
    (VP (VBP ATS)
      (SBAR
        (S
          (NP (SYM x))
          (VP (VBZ +)
            (NP
              (QP (CD 2) (CD 4))
              (CD 12)))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP
      (VP (VB Solving)
        (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
        (CC and)
        (NP
          (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP get)
                (S
                  (NP (SYM x))
                  (VP (SYM =)
                    (NP (CD 50)))))))))
      (\\, \\,)
      (VP (VB y)
        (S
          (VP (SYM =)
            (NP (CD 40) (CD 13))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP
      (VP (VB Solving)
        (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
        (CC and)
        (NP
          (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (SBAR
            (S
              (NP (PRP we))
              (VP (VBP get)
                (S
                  (NP (SYM x))
                  (VP (SYM =)
                    (NP (CD 50)))))))))
      (\\, \\,)
      (VP (VB y)
        (S
          (VP (SYM =)
            (NP (CD 40) (CD 13)))))))))
'
        };
Submitting expect

(-LRB- A -RRB- SOLVING -LRB- I -RRB- AND -LRB- II -RRB- WE GET X = 50 , Y = 40 13)


NIL
______________________________________________________________________
[3]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
        (NP (NNP L\\.C\\.M\\.))
        (PP (IN of)
          (NP (CD 12))))
      (\\, \\,)
      (NP
        (NP (CD 16))
        (\\, \\,)
        (NP
          (NP (CD 24))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 48)))))))
      (\\, \\,))
    (ADVP (RB 480))
    (VP (VBZ is)
      (ADJP (JJ divisible)
        (PP (IN by)
          (NP (CD 48)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
        (NP (NNP L\\.C\\.M\\.))
        (PP (IN of)
          (NP (CD 12))))
      (\\, \\,)
      (NP
        (NP (CD 16))
        (\\, \\,)
        (NP
          (NP (CD 24))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 48)))))))
      (\\, \\,))
    (ADVP (RB 480))
    (VP (VBZ is)
      (ADJP (JJ divisible)
        (PP (IN by)
          (NP (CD 48))))))))
'
        };
Submitting expect

(-LRB- D -RRB- L.C.M. OF 12 , 16 , 24 = 48 , 480 IS DIVISIBLE BY 48)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       '14.',
                       '(a) 7x – 5x = 60 ⇒ x = 30 Nos are 150, 210 2 2 Reqd.',
                       'weight = x + y = 50 + × 40 = 66 kg 5 5 6.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 2]: [14, .]
Parsing [sent. 2 len. 21]: [-LRB-, a, -RRB-, 7x, --, 5x, =, 60, ⇒, x, =, 30, Nos, are, 150, ,, 210, 2, 2, Reqd, .]
Parsing [sent. 3 len. 17]: [weight, =, x, +, y, =, 50, +, ×, 40, =, 66, kg, 5, 5, 6, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 40 words in 3 sentences (13.91 wds/sec; 1.04 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(FRAG
    (NP (CD 14))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       '',
                                                       '(ROOT',
                                                       '  (S',
                                                       '    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))',
                                                       '    (NP',
                                                       '      (NP',
                                                       '        (NP (CD 7x) (: --) (CD 5x))',
                                                       '        (SBAR',
                                                       '          (S',
                                                       '            (VP (SYM =)',
                                                       '              (NP (CD 60))))))',
                                                       '      (VP (VBN ⇒)',
                                                       '        (S',
                                                       '          (NP (SYM x))',
                                                       '          (VP (SYM =)',
                                                       '            (NP (CD 30) (NNS Nos))))))',
                                                       '    (VP (VBP are)',
                                                       '      (NP',
                                                       '        (NP (CD 150))',
                                                       '        (, ,)',
                                                       '        (NP',
                                                       '          (NP',
                                                       '            (QP (CD 210) (CD 2)))',
                                                       '          (NP (CD 2) (NN Reqd)))))',
                                                       '    (. .)))'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => 'num(5x-6, 7x-4)
nsubj(150-15, 5x-6)
dep(60-8, =-7)
rcmod(5x-6, 60-8)
partmod(5x-6, ⇒-9)
nsubj(Nos-13, x-10)
dep(Nos-13, =-11)
num(Nos-13, 30-12)
ccomp(⇒-9, Nos-13)
cop(150-15, are-14)
number(2-18, 210-17)
appos(150-15, 2-18)
num(Reqd-20, 2-19)
dep(2-18, Reqd-20)',
                                            'Sent' => 'dep(-RRB--3, a-2)',
                                            'Rel' => [
                                                       '(ROOT',
                                                       '  (SINV',
                                                       '    (S',
                                                       '      (NP (NN weight) (NNS =))',
                                                       '      (VP (VBZ x)',
                                                       '        (S',
                                                       '          (NP (NNP +) (NNP y))',
                                                       '          (VP (SYM =)',
                                                       '            (NP (CD 50))))))',
                                                       '    (VP (VBD +)',
                                                       '      (S',
                                                       '        (NP',
                                                       '          (QP (CD ×) (CD 40)))',
                                                       '        (VP (SYM =)',
                                                       '          (NP (CD 66) (NN kg)))))',
                                                       '    (NP',
                                                       '      (NP (CD 5))',
                                                       '      (ADJP (CD 5) (CD 6)))',
                                                       '    (. .)))'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => 'nsubj(x-3, =-2)
dep(+-8, x-3)
nn(y-5, +-4)
nsubj(50-7, y-5)
dep(50-7, =-6)
ccomp(x-3, 50-7)
number(40-10, ×-9)
nsubj(kg-13, 40-10)
dep(kg-13, =-11)
num(kg-13, 66-12)
ccomp(+-8, kg-13)
nsubj(+-8, 5-14)
number(6-16, 5-15)
amod(5-14, 6-16)',
                                            'Sent' => 'nn(=-2, weight-1)',
                                            'Rel' => []
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((FRAG
    (NP (CD 14))))'
        };
$VAR1 = {
          'Tree' => '(num(5x-6\\, 7x-4)
nsubj(150-15\\, 5x-6)
dep(60-8\\, =-7)
rcmod(5x-6\\, 60-8)
partmod(5x-6\\, ⇒-9)
nsubj(Nos-13\\, x-10)
dep(Nos-13\\, =-11)
num(Nos-13\\, 30-12)
ccomp(⇒-9\\, Nos-13)
cop(150-15\\, are-14)
number(2-18\\, 210-17)
appos(150-15\\, 2-18)
num(Reqd-20\\, 2-19)
dep(2-18\\, Reqd-20)))'
        };
$VAR1 = {
          'Tree' => '(nsubj(x-3\\, =-2)
dep(+-8\\, x-3)
nn(y-5\\, +-4)
nsubj(50-7\\, y-5)
dep(50-7\\, =-6)
ccomp(x-3\\, 50-7)
number(40-10\\, ×-9)
nsubj(kg-13\\, 40-10)
dep(kg-13\\, =-11)
num(kg-13\\, 66-12)
ccomp(+-8\\, kg-13)
nsubj(+-8\\, 5-14)
number(6-16\\, 5-15)
amod(5-14\\, 6-16)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (CD 14))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (CD 14)))))
'
        };
Submitting expect

(14)


NIL
______________________________________________________________________
[5]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '(num(5x-6\\, 7x-4)
nsubj(150-15\\, 5x-6)
dep(60-8\\, =-7)
rcmod(5x-6\\, 60-8)
partmod(5x-6\\, ⇒-9)
nsubj(Nos-13\\, x-10)
dep(Nos-13\\, =-11)
num(Nos-13\\, 30-12)
ccomp(⇒-9\\, Nos-13)
cop(150-15\\, are-14)
number(2-18\\, 210-17)
appos(150-15\\, 2-18)
num(Reqd-20\\, 2-19)
dep(2-18\\, Reqd-20)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'(num(5x-6\\, 7x-4)
nsubj(150-15\\, 5x-6)
dep(60-8\\, =-7)
rcmod(5x-6\\, 60-8)
partmod(5x-6\\, ⇒-9)
nsubj(Nos-13\\, x-10)
dep(Nos-13\\, =-11)
num(Nos-13\\, 30-12)
ccomp(⇒-9\\, Nos-13)
cop(150-15\\, are-14)
number(2-18\\, 210-17)
appos(150-15\\, 2-18)
num(Reqd-20\\, 2-19)
dep(2-18\\, Reqd-20))))
'
        };
Submitting expect

(7X-4 NSUBJ 5X-6 DEP =-7 RCMOD 60-8 PARTMOD ⇒-9 NSUBJ X-10 DEP =-11 NUM 30-12 CCOMP NOS-13 COP ARE-14 NUMBER 210-17 APPOS 2-18 NUM 2-19 DEP
 REQD-20)


NIL
______________________________________________________________________
[6]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '(nsubj(x-3\\, =-2)
dep(+-8\\, x-3)
nn(y-5\\, +-4)
nsubj(50-7\\, y-5)
dep(50-7\\, =-6)
ccomp(x-3\\, 50-7)
number(40-10\\, ×-9)
nsubj(kg-13\\, 40-10)
dep(kg-13\\, =-11)
num(kg-13\\, 66-12)
ccomp(+-8\\, kg-13)
nsubj(+-8\\, 5-14)
number(6-16\\, 5-15)
amod(5-14\\, 6-16)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'(nsubj(x-3\\, =-2)
dep(+-8\\, x-3)
nn(y-5\\, +-4)
nsubj(50-7\\, y-5)
dep(50-7\\, =-6)
ccomp(x-3\\, 50-7)
number(40-10\\, ×-9)
nsubj(kg-13\\, 40-10)
dep(kg-13\\, =-11)
num(kg-13\\, 66-12)
ccomp(+-8\\, kg-13)
nsubj(+-8\\, 5-14)
number(6-16\\, 5-15)
amod(5-14\\, 6-16))))
'
        };
Submitting expect

(=-2 DEP X-3 NN +-4 NSUBJ Y-5 DEP =-6 CCOMP 50-7 NUMBER ×-9 NSUBJ 40-10 DEP =-11 NUM 66-12 CCOMP KG-13 NSUBJ 5-14 NUMBER 5-15 AMOD 6-16)


NIL
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'Batch' => [
                       '(a) A + B + C = 5625 ...',
                       '(i) 15.',
                       '(b) H.C.F. of B + C or B + C = 2A ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.5 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 16]: [-LRB-, a, -RRB-, A, +, B, +, C, =, 5625, ..., -LRB-, i, -RRB-, 15, .]
Parsing [sent. 2 len. 15]: [-LRB-, b, -RRB-, H.C.F., of, B, +, C, or, B, +, C, =, 2A, ...]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 31 words in 2 sentences (11.97 wds/sec; 0.77 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP +) (NNP B))
    (VP (VBZ +)
      (NP
        (NP
          (QP ($ C) (CD =) (CD 5625)))
        (\\: \\.\\.\\.)
        (NP
          (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
          (NP (CD 15)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
        (NP (NNP H\\.C\\.F\\.))
        (PP (IN of)
          (NP (NNP B) (NNP +) (NNP C))))
      (CC or)
      (NP (NNP B) (NNP +) (NNP C)))
    (VP (SYM =)
      (NP (CD 2A)))
    (\\. \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP +) (NNP B))
    (VP (VBZ +)
      (NP
        (NP
          (QP ($ C) (CD =) (CD 5625)))
        (\\: \\.\\.\\.)
        (NP
          (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
          (NP (CD 15)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP +) (NNP B))
    (VP (VBZ +)
      (NP
        (NP
          (QP ($ C) (CD =) (CD 5625)))
        (\\: \\.\\.\\.)
        (NP
          (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
          (NP (CD 15))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
        (NP (NNP H\\.C\\.F\\.))
        (PP (IN of)
          (NP (NNP B) (NNP +) (NNP C))))
      (CC or)
      (NP (NNP B) (NNP +) (NNP C)))
    (VP (SYM =)
      (NP (CD 2A)))
    (\\. \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
        (NP (NNP H\\.C\\.F\\.))
        (PP (IN of)
          (NP (NNP B) (NNP +) (NNP C))))
      (CC or)
      (NP (NNP B) (NNP +) (NNP C)))
    (VP (SYM =)
      (NP (CD 2A)))
    (\\. \\.\\.\\.))))))
'
        };
Submitting expect

(-LRB- B -RRB- H.C.F. OF B + C OR B + C = 2A ...)


NIL
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       '(ii) A= 2 A + 2A = 5625 ⇒ A = 1875 B= 1 (A + C) 4 L.C.M. = 4B = A + C ...',
                       '(iii) Solving these equations we get B = 125, A – B = 1875 – 1125 = Rs 750 7.',
                       '(b) Let the present ages of father and son be x and y respectively A.T.S. x – 10 = x + 10 = 13 (y – 10) ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 56]: [-LRB-, ii, -RRB-, A, =, 2, A, +, 2A, =, 5625, ⇒, A, =, 1875, B, =, 1, -LRB-, A, +, C, -RRB-, 4, L.C.M., =, 4B, =, A, +, C, ..., -LRB-, iii, -RRB-, Solving, these, equations, we, get, B, =, 125, ,, A, --, B, =, 1875, --, 1125, =, Rs, 750, 7, .]
Parsing [sent. 2 len. 32]: [-LRB-, b, -RRB-, Let, the, present, ages, of, father, and, son, be, x, and, y, respectively, A.T.S., x, --, 10, =, x, +, 10, =, 13, -LRB-, y, --, 10, -RRB-, ...]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 88 words in 2 sentences (6.63 wds/sec; 0.15 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
      (SBAR
        (S
          (NP (DT A) (NNP =) (CD 2) (NN A))
          (VP
            (VP (VB +)
              (NP
                (NP (CD 2A))
                (SBAR
                  (S
                    (VP (SYM =)
                      (NP (CD 5625))))))
              (S
                (VP (VBG ⇒)
                  (S
                    (NP (DT A) (NNP =) (NNP 1875) (NNP B))
                    (VP (SYM =)
                      (NP (CD 1))))))
              (PRN (-LRB- -LRB-)
                (NP (DT A) (NNP +) (NNP C))
                (-RRB- -RRB-))
              (NP
                (NP (CD 4) (NNP L\\.C\\.M\\.) (NNP =) (CD 4B))
                (S
                  (VP (SYM =)
                    (NP (DT A) (NNP +) (NNP C)))))
              (\\: \\.\\.\\.)
              (PRN (-LRB- -LRB-)
                (NP (NN iii))
                (-RRB- -RRB-))
              (S
                (VP (VBG Solving)
                  (NP
                    (NP (DT these) (NNS equations))
                    (SBAR
                      (S
                        (NP (PRP we))
                        (VP (VBP get)
                          (S
                            (NP (NNP B))
                            (VP (SYM =)
                              (NP (CD 125)))))))))))
            (\\, \\,)
            (NP (DT A)
              (PRN (\\: --)
                (NP (NNP B)
                  (QP (CD =) (CD 1875)))
                (\\: --))
              (NN 1125))))))
    (VP (SYM =)
      (NP (NNP Rs) (NNP 750) (CD 7)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB Let)
      (S
        (NP
          (NP (DT the) (JJ present) (NNS ages))
          (PP (IN of)
            (NP (NN father)
              (CC and)
              (NN son))))
        (VP
          (VP (VB be)
            (ADJP (JJ x)))
          (CC and)
          (VP (VB y)
            (ADVP (RB respectively))
            (NP
              (NP (NNP A\\.T\\.S\\.)
                (NX
                  (NP (SYM x))
                  (\\: --)
                  (NP
                    (NP (CD 10) (NNS =))
                    (NP (SYM x)))))
              (VP (VBG +)
                (S
                  (NP (CD 10))
                  (VP (SYM =)
                    (NP (CD 13)))))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN y))
                  (\\: --)
                  (NP (CD 10)))
                (-RRB- -RRB-)))))))
    (\\. \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
      (SBAR
        (S
          (NP (DT A) (NNP =) (CD 2) (NN A))
          (VP
            (VP (VB +)
              (NP
                (NP (CD 2A))
                (SBAR
                  (S
                    (VP (SYM =)
                      (NP (CD 5625))))))
              (S
                (VP (VBG ⇒)
                  (S
                    (NP (DT A) (NNP =) (NNP 1875) (NNP B))
                    (VP (SYM =)
                      (NP (CD 1))))))
              (PRN (-LRB- -LRB-)
                (NP (DT A) (NNP +) (NNP C))
                (-RRB- -RRB-))
              (NP
                (NP (CD 4) (NNP L\\.C\\.M\\.) (NNP =) (CD 4B))
                (S
                  (VP (SYM =)
                    (NP (DT A) (NNP +) (NNP C)))))
              (\\: \\.\\.\\.)
              (PRN (-LRB- -LRB-)
                (NP (NN iii))
                (-RRB- -RRB-))
              (S
                (VP (VBG Solving)
                  (NP
                    (NP (DT these) (NNS equations))
                    (SBAR
                      (S
                        (NP (PRP we))
                        (VP (VBP get)
                          (S
                            (NP (NNP B))
                            (VP (SYM =)
                              (NP (CD 125)))))))))))
            (\\, \\,)
            (NP (DT A)
              (PRN (\\: --)
                (NP (NNP B)
                  (QP (CD =) (CD 1875)))
                (\\: --))
              (NN 1125))))))
    (VP (SYM =)
      (NP (NNP Rs) (NNP 750) (CD 7)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
      (SBAR
        (S
          (NP (DT A) (NNP =) (CD 2) (NN A))
          (VP
            (VP (VB +)
              (NP
                (NP (CD 2A))
                (SBAR
                  (S
                    (VP (SYM =)
                      (NP (CD 5625))))))
              (S
                (VP (VBG ⇒)
                  (S
                    (NP (DT A) (NNP =) (NNP 1875) (NNP B))
                    (VP (SYM =)
                      (NP (CD 1))))))
              (PRN (-LRB- -LRB-)
                (NP (DT A) (NNP +) (NNP C))
                (-RRB- -RRB-))
              (NP
                (NP (CD 4) (NNP L\\.C\\.M\\.) (NNP =) (CD 4B))
                (S
                  (VP (SYM =)
                    (NP (DT A) (NNP +) (NNP C)))))
              (\\: \\.\\.\\.)
              (PRN (-LRB- -LRB-)
                (NP (NN iii))
                (-RRB- -RRB-))
              (S
                (VP (VBG Solving)
                  (NP
                    (NP (DT these) (NNS equations))
                    (SBAR
                      (S
                        (NP (PRP we))
                        (VP (VBP get)
                          (S
                            (NP (NNP B))
                            (VP (SYM =)
                              (NP (CD 125)))))))))))
            (\\, \\,)
            (NP (DT A)
              (PRN (\\: --)
                (NP (NNP B)
                  (QP (CD =) (CD 1875)))
                (\\: --))
              (NN 1125))))))
    (VP (SYM =)
      (NP (NNP Rs) (NNP 750) (CD 7))))))
'
        };
Submitting expect

*** - GET: 1125 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 1125 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB Let)
      (S
        (NP
          (NP (DT the) (JJ present) (NNS ages))
          (PP (IN of)
            (NP (NN father)
              (CC and)
              (NN son))))
        (VP
          (VP (VB be)
            (ADJP (JJ x)))
          (CC and)
          (VP (VB y)
            (ADVP (RB respectively))
            (NP
              (NP (NNP A\\.T\\.S\\.)
                (NX
                  (NP (SYM x))
                  (\\: --)
                  (NP
                    (NP (CD 10) (NNS =))
                    (NP (SYM x)))))
              (VP (VBG +)
                (S
                  (NP (CD 10))
                  (VP (SYM =)
                    (NP (CD 13)))))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN y))
                  (\\: --)
                  (NP (CD 10)))
                (-RRB- -RRB-)))))))
    (\\. \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB Let)
      (S
        (NP
          (NP (DT the) (JJ present) (NNS ages))
          (PP (IN of)
            (NP (NN father)
              (CC and)
              (NN son))))
        (VP
          (VP (VB be)
            (ADJP (JJ x)))
          (CC and)
          (VP (VB y)
            (ADVP (RB respectively))
            (NP
              (NP (NNP A\\.T\\.S\\.)
                (NX
                  (NP (SYM x))
                  (\\: --)
                  (NP
                    (NP (CD 10) (NNS =))
                    (NP (SYM x)))))
              (VP (VBG +)
                (S
                  (NP (CD 10))
                  (VP (SYM =)
                    (NP (CD 13)))))
              (PRN (-LRB- -LRB-)
                (NP
                  (NP (NN y))
                  (\\: --)
                  (NP (CD 10)))
                (-RRB- -RRB-)))))))
    (\\. \\.\\.\\.))))))
'
        };
Submitting expect

(-LRB- B -RRB- LET THE PRESENT AGES OF FATHER AND SON BE X AND Y RESPECTIVELY A.T.S. X -- 10 = X + 10 = 13 -LRB- Y -- 10 -RRB- ...)

 AGES OF FATHER CAN BE X.

((:I (:A (:Q THE (:F PLUR AGE.N)) (:P OF.P (:F K FATHER.N))) X.A) NIL)
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- B -RRB- LET THE PRESENT AGES OF FATHER AND SON BE X AND Y RESPECTIVELY A.T.S. X -- 10 = X + 10 = 13 -LRB- Y -- 10 -RRB- ...)

 AGES OF FATHER CAN BE X.

((:I (:A (:Q THE (:F PLUR AGE.N)) (:P OF.P (:F K FATHER.N))) X.A) NIL)
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(i) 3 69 = 20 + 69 = 20.',
                       '69 99 600 × 100 I × 100 = = 5 years T= 2400 × 5 P × R 1 1 1 − = 5 10 10 ∴ The two pipes together can fill the tank in 10 minutes 1 1 of tank can be filled in = 10 × = 2 min 30 sec 4 4 3 1 1 − = of tank is to be filled 4 2 4 x + 270 D = 30 (T = ) 15 S ⇒ x = 180 m, length of the train = 180 m 1 2 18.',
                       '(b) (A + B)’s 2 days\' work = × 2 = 3 3 Remaining work = 1 – 2 1 = which is done by A in 3 3 B’s one day’s work = 3 = 6 days 1 1 1 1 − = 3 6 6 ∴ B alone can do the work in 6 days 83 − 8 15 ÷ 75 15 90 2 ÷ .8 3 ÷ 7.5 99 2 19.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 12]: [-LRB-, i, -RRB-, 3, 69, =, 20, +, 69, =, 20, .]
Parsing [sent. 2 len. 101]: [69, 99, 600, ×, 100, I, ×, 100, =, =, 5, years, T, =, 2400, ×, 5, P, ×, R, 1, 1, 1, −, =, 5, 10, 10, ∴, The, two, pipes, together, can, fill, the, tank, in, 10, minutes, 1, 1, of, tank, can, be, filled, in, =, 10, ×, =, 2, min, 30, sec, 4, 4, 3, 1, 1, −, =, of, tank, is, to, be, filled, 4, 2, 4, x, +, 270, D, =, 30, -LRB-, T, =, -RRB-, 15, S, ⇒, x, =, 180, m, ,, length, of, the, train, =, 180, m, 1, 2, 18, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 3 len. 83]: [-LRB-, b, -RRB-, -LRB-, A, +, B, -RRB-, 's, 2, days, ', work, =, ×, 2, =, 3, 3, Remaining, work, =, 1, --, 2, 1, =, which, is, done, by, A, in, 3, 3, B, 's, one, day, 's, work, =, 3, =, 6, days, 1, 1, 1, 1, −, =, 3, 6, 6, ∴, B, alone, can, do, the, work, in, 6, days, 83, −, 8, 15, ÷, 75, 15, 90, 2, ÷, .8, 3, ÷, 7.5, 99, 2, 19, .]
Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 196 words in 3 sentences (39.87 wds/sec; 0.61 sents/sec).
  2 sentences were not parsed:
    2 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
      (NP
        (NP (CD 3) (CD 69))
        (SBAR
          (S
            (VP (SYM =)
              (NP (CD 20) (JJ +) (CD 69)))))))
    (VP (SYM =)
      (NP (CD 20)))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
Sentence skipped: no PCFG fallback.
SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
      (NP
        (NP (CD 3) (CD 69))
        (SBAR
          (S
            (VP (SYM =)
              (NP (CD 20) (JJ +) (CD 69)))))))
    (VP (SYM =)
      (NP (CD 20)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
      (NP
        (NP (CD 3) (CD 69))
        (SBAR
          (S
            (VP (SYM =)
              (NP (CD 20) (JJ +) (CD 69)))))))
    (VP (SYM =)
      (NP (CD 20))))))
'
        };
Submitting expect

(-LRB- I -RRB- 3 69 = 20 + 69 = 20)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       '(c) = 90 220 . . .',
                       '= 321 − 3 98 − 0 2+ − 2.3 21−.0 98 2 + 990 990 990 . 1 1 9 = 20 = = 0.05 20 9 494 2 4 15 ÷ of + ( 999 + ) × 99 495 3 9 2 5 = 15 m/sec 18 ∴ A can do the whole work in 2 × 10.',
                       '(a) Work done by both pipes in 1 minute 11.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 28]: [-LRB-, c, -RRB-, =, 90, 220, ..., =, 321, −, 3, 98, −, 0, 2, +, −, 2.3, 21, −, .0, 98, 2, +, 990, 990, 990, .]
Parsing [sent. 2 len. 44]: [1, 1, 9, =, 20, =, =, 0.05, 20, 9, 494, 2, 4, 15, ÷, of, +, -LRB-, 999, +, -RRB-, ×, 99, 495, 3, 9, 2, 5, =, 15, m\/sec, 18, ∴, A, can, do, the, whole, work, in, 2, ×, 10, .]
Parsing [sent. 3 len. 13]: [-LRB-, a, -RRB-, Work, done, by, both, pipes, in, 1, minute, 11, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 85 words in 3 sentences (12.27 wds/sec; 0.43 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB =)
      (NP
        (NP
          (QP (CD 90) (CD 220)))
        (: ...)
        (NP
          (NP (NNP =) (CD 321) (CD −) (CD 3) (CD 98) (CD −) (CD 0) (CD 2) (CD +) (CD −) (CD 2.3) (CD 21) (CD −) (CD .0) (CD 98) (CD 2) (NNP +) (NNP 990))
          (NP
            (QP (CD 990) (CD 990))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, c-2)',
                                                       'number(220-6, 90-5)',
                                                       'dobj(=-4, 220-6)',
                                                       'nn(990-25, =-8)',
                                                       'num(990-25, 321-9)',
                                                       'num(990-25, −-10)',
                                                       'num(990-25, 3-11)',
                                                       'num(990-25, 98-12)',
                                                       'num(990-25, −-13)',
                                                       'num(990-25, 0-14)',
                                                       'num(990-25, 2-15)',
                                                       'num(990-25, +-16)',
                                                       'num(990-25, −-17)',
                                                       'num(990-25, 2.3-18)',
                                                       'num(990-25, 21-19)',
                                                       'num(990-25, −-20)',
                                                       'num(990-25, .0-21)',
                                                       'num(990-25, 98-22)',
                                                       'num(990-25, 2-23)',
                                                       'nn(990-25, +-24)',
                                                       'dep(220-6, 990-25)',
                                                       'number(990-27, 990-26)',
                                                       'dep(990-25, 990-27)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (CD 1)
        (ADJP
          (QP (CD 1) (CD 9)))
        (JJ =) (CD 20) (NNS =))
      (VP (VBG =)
        (NP
          (NP
            (NP (CD 0.05)
              (ADJP
                (QP (CD 20) (CD 9)))
              (JJ 494) (CD 2)
              (ADJP
                (QP (CD 4) (CD 15)))
              (NNS ÷))
            (PP (IN of)
              (NP (JJ +)
                (PRN (-LRB- -LRB-)
                  (NP (CD 999) (NNS +))
                  (-RRB- -RRB-))
                (JJ ×) (CD 99) (NNS 495)
                (QP (CD 3) (CD 9)))))
          (ADJP (CD 2) (CD 5)))
        (S
          (VP (SYM =)
            (NP (CD 15) (JJ m\\/sec) (CD 18))))))
    (VP (VBD ∴)
      (SBAR
        (S
          (NP (NNP A))
          (VP (MD can)
            (VP (VB do)
              (NP
                (NP (DT the) (JJ whole) (NN work))
                (PP (IN in)
                  (NP
                    (QP (CD 2) (CD ×))
                    (CD 10)))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(=-6, 1-1)',
                                                       'number(9-3, 1-2)',
                                                       'num(=-6, 9-3)',
                                                       'amod(=-6, =-4)',
                                                       'num(=-6, 20-5)',
                                                       'nsubj(∴-33, =-6)',
                                                       'partmod(=-6, =-7)',
                                                       'num(÷-15, 0.05-8)',
                                                       'number(9-10, 20-9)',
                                                       'num(÷-15, 9-10)',
                                                       'amod(÷-15, 494-11)',
                                                       'num(÷-15, 2-12)',
                                                       'number(15-14, 4-13)',
                                                       'num(÷-15, 15-14)',
                                                       'dobj(=-7, ÷-15)',
                                                       'amod(495-24, +-17)',
                                                       'num(+-20, 999-19)',
                                                       'appos(495-24, +-20)',
                                                       'amod(495-24, ×-22)',
                                                       'num(495-24, 99-23)',
                                                       'prep_of(÷-15, 495-24)',
                                                       'number(9-26, 3-25)',
                                                       'num(495-24, 9-26)',
                                                       'number(5-28, 2-27)',
                                                       'amod(÷-15, 5-28)',
                                                       'dep(18-32, =-29)',
                                                       'num(18-32, 15-30)',
                                                       'amod(18-32, m\\/sec-31)',
                                                       'dep(=-7, 18-32)',
                                                       'nsubj(do-36, A-34)',
                                                       'aux(do-36, can-35)',
                                                       'ccomp(∴-33, do-36)',
                                                       'det(work-39, the-37)',
                                                       'amod(work-39, whole-38)',
                                                       'dobj(do-36, work-39)',
                                                       'number(×-42, 2-41)',
                                                       'num(10-43, ×-42)',
                                                       'prep_in(work-39, 10-43)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Work)
      (VP (VBN done)
        (PP (IN by)
          (NP
            (NP (DT both) (NNS pipes))
            (PP (IN in)
              (NP
                (NP (CD 1))
                (ADJP (NN minute) (CD 11))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dep(Work-4, done-5)',
                                                       'det(pipes-8, both-7)',
                                                       'prep_by(done-5, pipes-8)',
                                                       'prep_in(pipes-8, 1-10)',
                                                       'amod(1-10, minute-11)',
                                                       'number(minute-11, 11-12)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB =)
      (NP
        (NP
          (QP (CD 90) (CD 220)))
        (\\: \\.\\.\\.)
        (NP
          (NP (NNP =) (CD 321) (CD −) (CD 3) (CD 98) (CD −) (CD 0) (CD 2) (CD +) (CD −) (CD 2\\.3) (CD 21) (CD −) (CD \\.0) (CD 98) (CD 2) (NNP +) (NNP 990))
          (NP
            (QP (CD 990) (CD 990))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (CD 1)
        (ADJP
          (QP (CD 1) (CD 9)))
        (JJ =) (CD 20) (NNS =))
      (VP (VBG =)
        (NP
          (NP
            (NP (CD 0\\.05)
              (ADJP
                (QP (CD 20) (CD 9)))
              (JJ 494) (CD 2)
              (ADJP
                (QP (CD 4) (CD 15)))
              (NNS ÷))
            (PP (IN of)
              (NP (JJ +)
                (PRN (-LRB- -LRB-)
                  (NP (CD 999) (NNS +))
                  (-RRB- -RRB-))
                (JJ ×) (CD 99) (NNS 495)
                (QP (CD 3) (CD 9)))))
          (ADJP (CD 2) (CD 5)))
        (S
          (VP (SYM =)
            (NP (CD 15) (JJ m\\\\/sec) (CD 18))))))
    (VP (VBD ∴)
      (SBAR
        (S
          (NP (NNP A))
          (VP (MD can)
            (VP (VB do)
              (NP
                (NP (DT the) (JJ whole) (NN work))
                (PP (IN in)
                  (NP
                    (QP (CD 2) (CD ×))
                    (CD 10)))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Work)
      (VP (VBN done)
        (PP (IN by)
          (NP
            (NP (DT both) (NNS pipes))
            (PP (IN in)
              (NP
                (NP (CD 1))
                (ADJP (NN minute) (CD 11))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB =)
      (NP
        (NP
          (QP (CD 90) (CD 220)))
        (\\: \\.\\.\\.)
        (NP
          (NP (NNP =) (CD 321) (CD −) (CD 3) (CD 98) (CD −) (CD 0) (CD 2) (CD +) (CD −) (CD 2\\.3) (CD 21) (CD −) (CD \\.0) (CD 98) (CD 2) (NNP +) (NNP 990))
          (NP
            (QP (CD 990) (CD 990))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB =)
      (NP
        (NP
          (QP (CD 90) (CD 220)))
        (\\: \\.\\.\\.)
        (NP
          (NP (NNP =) (CD 321) (CD −) (CD 3) (CD 98) (CD −) (CD 0) (CD 2) (CD +) (CD −) (CD 2\\.3) (CD 21) (CD −) (CD \\.0) (CD 98) (CD 2) (NNP +) (NNP 990))
          (NP
            (QP (CD 990) (CD 990)))))))))
'
        };
Submitting expect

(-LRB- C -RRB- = 90 220 ... = 321 − 3 98 − 0 2 + − 2.3 21 − .0 98 2 + 990 990 990)


NIL
______________________________________________________________________
[5]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (CD 1)
        (ADJP
          (QP (CD 1) (CD 9)))
        (JJ =) (CD 20) (NNS =))
      (VP (VBG =)
        (NP
          (NP
            (NP (CD 0\\.05)
              (ADJP
                (QP (CD 20) (CD 9)))
              (JJ 494) (CD 2)
              (ADJP
                (QP (CD 4) (CD 15)))
              (NNS ÷))
            (PP (IN of)
              (NP (JJ +)
                (PRN (-LRB- -LRB-)
                  (NP (CD 999) (NNS +))
                  (-RRB- -RRB-))
                (JJ ×) (CD 99) (NNS 495)
                (QP (CD 3) (CD 9)))))
          (ADJP (CD 2) (CD 5)))
        (S
          (VP (SYM =)
            (NP (CD 15) (JJ m\\\\/sec) (CD 18))))))
    (VP (VBD ∴)
      (SBAR
        (S
          (NP (NNP A))
          (VP (MD can)
            (VP (VB do)
              (NP
                (NP (DT the) (JJ whole) (NN work))
                (PP (IN in)
                  (NP
                    (QP (CD 2) (CD ×))
                    (CD 10)))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (CD 1)
        (ADJP
          (QP (CD 1) (CD 9)))
        (JJ =) (CD 20) (NNS =))
      (VP (VBG =)
        (NP
          (NP
            (NP (CD 0\\.05)
              (ADJP
                (QP (CD 20) (CD 9)))
              (JJ 494) (CD 2)
              (ADJP
                (QP (CD 4) (CD 15)))
              (NNS ÷))
            (PP (IN of)
              (NP (JJ +)
                (PRN (-LRB- -LRB-)
                  (NP (CD 999) (NNS +))
                  (-RRB- -RRB-))
                (JJ ×) (CD 99) (NNS 495)
                (QP (CD 3) (CD 9)))))
          (ADJP (CD 2) (CD 5)))
        (S
          (VP (SYM =)
            (NP (CD 15) (JJ m\\\\/sec) (CD 18))))))
    (VP (VBD ∴)
      (SBAR
        (S
          (NP (NNP A))
          (VP (MD can)
            (VP (VB do)
              (NP
                (NP (DT the) (JJ whole) (NN work))
                (PP (IN in)
                  (NP
                    (QP (CD 2) (CD ×))
                    (CD 10))))))))))))
'
        };
Submitting expect

*** - GET: 495 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [6]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 495 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Work)
      (VP (VBN done)
        (PP (IN by)
          (NP
            (NP (DT both) (NNS pipes))
            (PP (IN in)
              (NP
                (NP (CD 1))
                (ADJP (NN minute) (CD 11))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Work)
      (VP (VBN done)
        (PP (IN by)
          (NP
            (NP (DT both) (NNS pipes))
            (PP (IN in)
              (NP
                (NP (CD 1))
                (ADJP (NN minute) (CD 11)))))))))))
'
        };
Submitting expect

(-LRB- A -RRB- WORK DONE BY BOTH PIPES IN 1 MINUTE 11)

 SOME_NUMBER_OF PIPES CAN BE IN SOME NUMBER_OR_PORTION.

((:I (:Q SOME-NUMBER-OF (:F PLUR PIPE.N)) IN.P (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- A -RRB- WORK DONE BY BOTH PIPES IN 1 MINUTE 11)

 SOME_NUMBER_OF PIPES CAN BE IN SOME NUMBER_OR_PORTION.

((:I (:Q SOME-NUMBER-OF (:F PLUR PIPE.N)) IN.P (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) 1 years 3 2 days 9.',
                       '(d) I = A – P = 3000 – 2400 = Rs 600 16.',
                       '(a) Sum of ages of A and B = (9 years 4 months) × 2 = 18 years 8 months ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 10]: [-LRB-, a, -RRB-, 1, years, 3, 2, days, 9, .]
Parsing [sent. 2 len. 17]: [-LRB-, d, -RRB-, I, =, A, --, P, =, 3000, --, 2400, =, Rs, 600, 16, .]
Parsing [sent. 3 len. 25]: [-LRB-, a, -RRB-, Sum, of, ages, of, A, and, B, =, -LRB-, 9, years, 4, months, -RRB-, ×, 2, =, 18, years, 8, months, ...]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 52 words in 3 sentences (19.30 wds/sec; 1.11 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 1) (NNS years))
        (NP
          (QP (CD 3) (CD 2))
          (NNS days)))
      (NP (CD 9)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(years-5, 1-4)',
                                                       'dep(a-2, years-5)',
                                                       'number(2-7, 3-6)',
                                                       'num(days-8, 2-7)',
                                                       'dep(years-5, days-8)',
                                                       'dep(years-5, 9-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (PRP I))
    (VP (VBD =)
      (NP (DT A)
        (PRN (: --)
          (NP
            (NP (NNP P) (NNP =) (NNP 3000))
            (: --)
            (NP (CD 2400) (NNS =))))
        (NN Rs))
      (NP
        (QP (CD 600) (CD 16))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(=-5, d-2)',
                                                       'nsubj(=-5, I-4)',
                                                       'det(Rs-14, A-6)',
                                                       'nn(3000-10, P-8)',
                                                       'nn(3000-10, =-9)',
                                                       'dep(Rs-14, 3000-10)',
                                                       'num(=-13, 2400-12)',
                                                       'dep(3000-10, =-13)',
                                                       'iobj(=-5, Rs-14)',
                                                       'number(16-16, 600-15)',
                                                       'dobj(=-5, 16-16)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP
        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
        (NP (NNP Sum))
        (PP (IN of)
          (NP
            (NP (NNS ages))
            (PP (IN of)
              (NP (NNP A)
                (CC and)
                (NNP B) (NNP =))))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 9) (NNS years))
          (NP (CD 4) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (S
        (NP (CD 2))
        (VP (SYM =)
          (NP (CD 18) (NNS years))))
      (NP (CD 8) (NNS months)))
    (: ...)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(×-18, Sum-4)',
                                                       'prep_of(Sum-4, ages-6)',
                                                       'nn(=-11, A-8)',
                                                       'conj_and(A-8, B-10)',
                                                       'nn(=-11, B-10)',
                                                       'prep_of(ages-6, =-11)',
                                                       'num(years-14, 9-13)',
                                                       'dep(Sum-4, years-14)',
                                                       'num(months-16, 4-15)',
                                                       'dep(years-14, months-16)',
                                                       'nsubj(years-22, 2-19)',
                                                       'dep(years-22, =-20)',
                                                       'num(years-22, 18-21)',
                                                       'ccomp(×-18, years-22)',
                                                       'num(months-24, 8-23)',
                                                       'tmod(×-18, months-24)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 1) (NNS years))
        (NP
          (QP (CD 3) (CD 2))
          (NNS days)))
      (NP (CD 9)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (PRP I))
    (VP (VBD =)
      (NP (DT A)
        (PRN (\\: --)
          (NP
            (NP (NNP P) (NNP =) (NNP 3000))
            (\\: --)
            (NP (CD 2400) (NNS =))))
        (NN Rs))
      (NP
        (QP (CD 600) (CD 16))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
        (NP (NNP Sum))
        (PP (IN of)
          (NP
            (NP (NNS ages))
            (PP (IN of)
              (NP (NNP A)
                (CC and)
                (NNP B) (NNP =))))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 9) (NNS years))
          (NP (CD 4) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (S
        (NP (CD 2))
        (VP (SYM =)
          (NP (CD 18) (NNS years))))
      (NP (CD 8) (NNS months)))
    (\\: \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 1) (NNS years))
        (NP
          (QP (CD 3) (CD 2))
          (NNS days)))
      (NP (CD 9)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 1) (NNS years))
        (NP
          (QP (CD 3) (CD 2))
          (NNS days)))
      (NP (CD 9))))))
'
        };
Submitting expect

(-LRB- A -RRB- 1 YEARS 3 2 DAYS 9)


NIL
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (PRP I))
    (VP (VBD =)
      (NP (DT A)
        (PRN (\\: --)
          (NP
            (NP (NNP P) (NNP =) (NNP 3000))
            (\\: --)
            (NP (CD 2400) (NNS =))))
        (NN Rs))
      (NP
        (QP (CD 600) (CD 16))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (PRP I))
    (VP (VBD =)
      (NP (DT A)
        (PRN (\\: --)
          (NP
            (NP (NNP P) (NNP =) (NNP 3000))
            (\\: --)
            (NP (CD 2400) (NNS =))))
        (NN Rs))
      (NP
        (QP (CD 600) (CD 16)))))))
'
        };
Submitting expect

(-LRB- D -RRB- I = A -- P = 3000 -- 2400 = RS 600 16)


NIL
______________________________________________________________________
[5]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
        (NP (NNP Sum))
        (PP (IN of)
          (NP
            (NP (NNS ages))
            (PP (IN of)
              (NP (NNP A)
                (CC and)
                (NNP B) (NNP =))))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 9) (NNS years))
          (NP (CD 4) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (S
        (NP (CD 2))
        (VP (SYM =)
          (NP (CD 18) (NNS years))))
      (NP (CD 8) (NNS months)))
    (\\: \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP
        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
        (NP (NNP Sum))
        (PP (IN of)
          (NP
            (NP (NNS ages))
            (PP (IN of)
              (NP (NNP A)
                (CC and)
                (NNP B) (NNP =))))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 9) (NNS years))
          (NP (CD 4) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (S
        (NP (CD 2))
        (VP (SYM =)
          (NP (CD 18) (NNS years))))
      (NP (CD 8) (NNS months)))
    (\\: \\.\\.\\.))))))
'
        };
Submitting expect

(-LRB- A -RRB- SUM OF AGES OF A AND B = -LRB- 9 YEARS 4 MONTHS -RRB- × 2 = 18 YEARS 8 MONTHS ...)


(NIL)
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'Batch' => [
                       '(i) Total age of B and C = (4 years 8 months) × 2 = 9 years 4 months ...',
                       '(ii) Subtracting (ii) for (i) Difference of ages of A and C = 9 years 4 months 17.',
                       '(c) 54 km/hr = 54 × Solving (i) and (ii) we get x = 75 years, y = 25 years Sum of ages = 75 + 25 = 100 years ..'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 49]: [-LRB-, i, -RRB-, Total, age, of, B, and, C, =, -LRB-, 4, years, 8, months, -RRB-, ×, 2, =, 9, years, 4, months, ..., -LRB-, ii, -RRB-, Subtracting, -LRB-, ii, -RRB-, for, -LRB-, i, -RRB-, Difference, of, ages, of, A, and, C, =, 9, years, 4, months, 17, .]
Parsing [sent. 2 len. 39]: [-LRB-, c, -RRB-, 54, km\/hr, =, 54, ×, Solving, -LRB-, i, -RRB-, and, -LRB-, ii, -RRB-, we, get, x, =, 75, years, ,, y, =, 25, years, Sum, of, ages, =, 75, +, 25, =, 100, years, ., .]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 88 words in 2 sentences (10.12 wds/sec; 0.23 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP
        (NP
          (PRN (-LRB- -LRB-)
            (NP (NNP i))
            (-RRB- -RRB-))
          (JJ Total) (NN age))
        (PP (IN of)
          (NP (NNP B)
            (CC and)
            (NNP C) (NNP =))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 4) (NNS years))
          (NP (CD 8) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (NP (CD 2) (NNP =) (CD 9) (NNS years))
      (NP (CD 4) (NNS months))
      (\\: \\.\\.\\.)
      (S (-LRB- -LRB-)
        (NP (NN ii))
        (-RRB- -RRB-)
        (NP
          (NP (NNP Subtracting) (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (PP (IN for)
            (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
            (NP
              (NP (NNP Difference))
              (PP (IN of)
                (NP
                  (NP
                    (NP (NNS ages))
                    (PP (IN of)
                      (NP (NNP A))))
                  (CC and)
                  (NP
                    (NP
                      (NP
                        (QP ($ C) (CD =) (CD 9))
                        (NNS years))
                      (NP (CD 4) (NNS months)))
                    (NP (CD 17))))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP (CD 54) (NN km\\\\/hr))
    (VP (VBD =)
      (SBAR
        (SINV
          (S
            (NP
              (NP (CD 54) (NNS ×))
              (VP (VBG Solving)
                (NP
                  (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                  (CC and)
                  (PRN (-LRB- -LRB-)
                    (NP (NN ii))
                    (-RRB- -RRB-))
                  (NP (PRP we)))))
            (VP (VBP get)
              (S
                (NP (SYM x))
                (VP (SYM =)
                  (NP (CD 75) (NNS years))))))
          (\\, \\,)
          (VP (VBD y)
            (S
              (VP (SYM =)
                (NP (CD 25) (NNS years)))))
          (NP
            (NP (NNP Sum))
            (PP (IN of)
              (NP
                (NP
                  (NP (NNS ages))
                  (SBAR
                    (S
                      (VP (SYM =)
                        (NP (CD 75) (NNP +) (CD 25) (NNS =))))))
                (NP (CD 100) (NNS years)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP
        (NP
          (PRN (-LRB- -LRB-)
            (NP (NNP i))
            (-RRB- -RRB-))
          (JJ Total) (NN age))
        (PP (IN of)
          (NP (NNP B)
            (CC and)
            (NNP C) (NNP =))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 4) (NNS years))
          (NP (CD 8) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (NP (CD 2) (NNP =) (CD 9) (NNS years))
      (NP (CD 4) (NNS months))
      (\\: \\.\\.\\.)
      (S (-LRB- -LRB-)
        (NP (NN ii))
        (-RRB- -RRB-)
        (NP
          (NP (NNP Subtracting) (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (PP (IN for)
            (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
            (NP
              (NP (NNP Difference))
              (PP (IN of)
                (NP
                  (NP
                    (NP (NNS ages))
                    (PP (IN of)
                      (NP (NNP A))))
                  (CC and)
                  (NP
                    (NP
                      (NP
                        (QP ($ C) (CD =) (CD 9))
                        (NNS years))
                      (NP (CD 4) (NNS months)))
                    (NP (CD 17))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP
        (NP
          (PRN (-LRB- -LRB-)
            (NP (NNP i))
            (-RRB- -RRB-))
          (JJ Total) (NN age))
        (PP (IN of)
          (NP (NNP B)
            (CC and)
            (NNP C) (NNP =))))
      (PRN (-LRB- -LRB-)
        (NP
          (NP (CD 4) (NNS years))
          (NP (CD 8) (NNS months)))
        (-RRB- -RRB-)))
    (VP (VBD ×)
      (NP (CD 2) (NNP =) (CD 9) (NNS years))
      (NP (CD 4) (NNS months))
      (\\: \\.\\.\\.)
      (S (-LRB- -LRB-)
        (NP (NN ii))
        (-RRB- -RRB-)
        (NP
          (NP (NNP Subtracting) (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))
          (PP (IN for)
            (PRN (-LRB- -LRB-) (VB i) (-RRB- -RRB-))
            (NP
              (NP (NNP Difference))
              (PP (IN of)
                (NP
                  (NP
                    (NP (NNS ages))
                    (PP (IN of)
                      (NP (NNP A))))
                  (CC and)
                  (NP
                    (NP
                      (NP
                        (QP ($ C) (CD =) (CD 9))
                        (NNS years))
                      (NP (CD 4) (NNS months)))
                    (NP (CD 17)))))))))))))
'
        };
Submitting expect

*** - STRING: argument 9 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [7]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 9 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [7]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP (CD 54) (NN km\\\\/hr))
    (VP (VBD =)
      (SBAR
        (SINV
          (S
            (NP
              (NP (CD 54) (NNS ×))
              (VP (VBG Solving)
                (NP
                  (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                  (CC and)
                  (PRN (-LRB- -LRB-)
                    (NP (NN ii))
                    (-RRB- -RRB-))
                  (NP (PRP we)))))
            (VP (VBP get)
              (S
                (NP (SYM x))
                (VP (SYM =)
                  (NP (CD 75) (NNS years))))))
          (\\, \\,)
          (VP (VBD y)
            (S
              (VP (SYM =)
                (NP (CD 25) (NNS years)))))
          (NP
            (NP (NNP Sum))
            (PP (IN of)
              (NP
                (NP
                  (NP (NNS ages))
                  (SBAR
                    (S
                      (VP (SYM =)
                        (NP (CD 75) (NNP +) (CD 25) (NNS =))))))
                (NP (CD 100) (NNS years)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP (CD 54) (NN km\\\\/hr))
    (VP (VBD =)
      (SBAR
        (SINV
          (S
            (NP
              (NP (CD 54) (NNS ×))
              (VP (VBG Solving)
                (NP
                  (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                  (CC and)
                  (PRN (-LRB- -LRB-)
                    (NP (NN ii))
                    (-RRB- -RRB-))
                  (NP (PRP we)))))
            (VP (VBP get)
              (S
                (NP (SYM x))
                (VP (SYM =)
                  (NP (CD 75) (NNS years))))))
          (\\, \\,)
          (VP (VBD y)
            (S
              (VP (SYM =)
                (NP (CD 25) (NNS years)))))
          (NP
            (NP (NNP Sum))
            (PP (IN of)
              (NP
                (NP
                  (NP (NNS ages))
                  (SBAR
                    (S
                      (VP (SYM =)
                        (NP (CD 75) (NNP +) (CD 25) (NNS =))))))
                (NP (CD 100) (NNS years))))))))
'
        };
Submitting expect
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '[2]> '
        };
$VAR1 = {
          'Batch' => [
                       '8.',
                       '(c) 5.333333 ...',
                       'or 5.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 2]: [8, .]
Parsing [sent. 2 len. 8]: [-LRB-, c, -RRB-, 5.333333, ..., or, 5, .]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 10 words in 2 sentences (9.23 wds/sec; 1.85 sents/sec).
$VAR1 = {
          'Tree' => '((FRAG
    (NP (CD 8))))'
        };
$VAR1 = {
          'Tree' => '(cc(5-7\\, or-6)
dep(5\\.333333-4\\, 5-7)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (CD 8))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (CD 8)))))
'
        };
Submitting expect

(8)


NIL
______________________________________________________________________
[3]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '(cc(5-7\\, or-6)
dep(5\\.333333-4\\, 5-7)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'(cc(5-7\\, or-6)
dep(5\\.333333-4\\, 5-7))))
'
        };
Submitting expect

(OR-6 DEP 5-7)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       '3 + 3.',
                       '25+ 12.',
                       '1 3.252525 ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 4]: [3, +, 3, .]
Parsing [sent. 2 len. 4]: [25, +, 12, .]
Parsing [sent. 3 len. 3]: [1, 3.252525, ...]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 11 words in 3 sentences (9.50 wds/sec; 2.59 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(+-2, 3-1)',
                                                       'dobj(+-2, 3-3)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (CD 25))
    (QP (CD +) (CD 12))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'number(12-3, +-2)',
                                                       'num(25-1, 12-3)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (CD 1) (CD 3.252525))
    (: ...)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(3.252525-2, 1-1)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3)))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 25))
    (QP (CD +) (CD 12))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 1) (CD 3\\.252525))
    (\\: \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3))))))
'
        };
Submitting expect

(3 + 3)


NIL
______________________________________________________________________
[5]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 25))
    (QP (CD +) (CD 12))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 25))
    (QP (CD +) (CD 12)))))
'
        };
Submitting expect

(25 + 12)


NIL
______________________________________________________________________
[6]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 1) (CD 3\\.252525))
    (\\: \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 1) (CD 3\\.252525))
    (\\: \\.\\.\\.))))))
'
        };
Submitting expect

(1 3.252525 ...)


NIL
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'Batch' => [
                       '12.111111 ...',
                       '3 25 1 = 5 + + 3 + + 12 + ..',
                       '9 99 9 20.696969 ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.1 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 16]: [12.111111, ..., 3, 25, 1, =, 5, +, +, 3, +, +, 12, +, ., .]
Parsing [sent. 2 len. 5]: [9, 99, 9, 20.696969, ...]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 21 words in 2 sentences (12.51 wds/sec; 1.19 sents/sec).
$VAR1 = {
          'Tree' => '((FRAG
    (NP (CD 12\\.111111))
    (\\: \\.\\.\\.)
    (FRAG
      (NP
        (NP (CD 3) (CD 25) (CD 1) (CD =) (CD 5) (CD +) (CD +) (CD 3) (NNP +) (NNP +))
        (ADJP (CD 12) (JJ +)))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP
      (QP (CD 9) (CD 99))
      (QP (CD 9) (CD 20\\.696969)))
    (\\: \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (CD 12\\.111111))
    (\\: \\.\\.\\.)
    (FRAG
      (NP
        (NP (CD 3) (CD 25) (CD 1) (CD =) (CD 5) (CD +) (CD +) (CD 3) (NNP +) (NNP +))
        (ADJP (CD 12) (JJ +)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (CD 12\\.111111))
    (\\: \\.\\.\\.)
    (FRAG
      (NP
        (NP (CD 3) (CD 25) (CD 1) (CD =) (CD 5) (CD +) (CD +) (CD 3) (NNP +) (NNP +))
        (ADJP (CD 12) (JJ +))))))
'
        };
Submitting expect
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (QP (CD 9) (CD 99))
      (QP (CD 9) (CD 20\\.696969)))
    (\\: \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (QP (CD 9) (CD 99))
      (QP (CD 9) (CD 20\\.696969)))
    (\\: \\.\\.\\.))))))
'
        };
Submitting expect

(9 99 9 20.696969 ...)


NIL
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       '= 20.',
                       '69 L.C.M. of 3, 3, 9 9 = H.C.F. of 2, 4, 16 2 A is older than C by 9 17 (y + 10) ...',
                       '(ii) 7 = 20 + HCF of 3, 3, 9 3 3 9 3 , , = LCM of 2, 4,16 = 2 4 16 16 2 10 494 1 494 ÷ + 999 × 99 + = + 999 × 99 + 3 3 5 5 5 20.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 3]: [=, 20, .]
Parsing [sent. 2 len. 87]: [69, L.C.M., of, 3, ,, 3, ,, 9, 9, =, H.C.F., of, 2, ,, 4, ,, 16, 2, A, is, older, than, C, by, 9, 17, -LRB-, y, +, 10, -RRB-, ..., -LRB-, ii, -RRB-, 7, =, 20, +, HCF, of, 3, ,, 3, ,, 9, 3, 3, 9, 3, ,, ,, =, LCM, of, 2, ,, 4,16, =, 2, 4, 16, 16, 2, 10, 494, 1, 494, ÷, +, 999, ×, 99, +, =, +, 999, ×, 99, +, 3, 3, 5, 5, 5, 20, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [2 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 90 words in 2 sentences (37.99 wds/sec; 0.84 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => '((NP (NNS =) (CD 20)))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP (NNS =) (CD 20)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP (NNS =) (CD 20))))
'
        };
Submitting expect

(= 20)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       '(a) Boys = 13 × 504 = 273 ∴ girls = 231 13 + 11 437 s DECEMBER 2001 s THE COMPETITION MASTER OBJECTIVE-TYPE QUESTIONS 273 273 91 = = 231 − 12 219 73 21.',
                       '(a) A : 2 : 8 B 3 4 : 12 A gets = C A’s share = 8 × 350 = Rs 80 35 : 5 : 15 B’s share = 12 × 350 = Rs 120 35 C’s share = Rs 150 22.',
                       '(a) %age of sugar in Ist glass = 2 × 100 = 22.2 9 %age of sugar in IInd glass = 3 × 100 = 21.4 14 1st mixture is sweeter 23.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 39]: [-LRB-, a, -RRB-, Boys, =, 13, ×, 504, =, 273, ∴, girls, =, 231, 13, +, 11, 437, s, DECEMBER, 2001, s, THE, COMPETITION, MASTER, OBJECTIVE-TYPE, QUESTIONS, 273, 273, 91, =, =, 231, −, 12, 219, 73, 21, .]
Parsing [sent. 2 len. 51]: [-LRB-, a, -RRB-, A, :, 2, :, 8, B, 3, 4, :, 12, A, gets, =, C, A, 's, share, =, 8, ×, 350, =, Rs, 80, 35, :, 5, :, 15, B, 's, share, =, 12, ×, 350, =, Rs, 120, 35, C, 's, share, =, Rs, 150, 22, .]
Parsing [sent. 3 len. 37]: [-LRB-, a, -RRB-, %, age, of, sugar, in, Ist, glass, =, 2, ×, 100, =, 22.2, 9, %, age, of, sugar, in, IInd, glass, =, 3, ×, 100, =, 21.4, 14, 1st, mixture, is, sweeter, 23, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 127 words in 3 sentences (7.59 wds/sec; 0.18 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNPS Boys))
      (VP (VBZ =)
        (S
          (NP (CD 13) (NNP ×) (CD 504) (JJ =) (NNP 273) (NNP ∴) (NNS girls))
          (VP (SYM =)
            (NP (CD 231) (CD 13) (NNS +))))))
    (NP (CD 11) (CD 437))
    (VP (VBZ s)
      (NP
        (NP (NNP DECEMBER) (CD 2001))
        (SBAR
          (S
            (VP (VBZ s)
              (NP
                (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
                (SBAR
                  (S
                    (VP (VBZ QUESTIONS)
                      (NP
                        (NP
                          (QP (CD 273) (CD 273))
                          (CD 91))
                        (VP (VBN =)
                          (S
                            (VP (SYM =)
                              (NP (CD 231))))
                          (ADJP (JJ −)
                            (NP
                              (QP (CD 12) (CD 219))
                              (QP (CD 73) (CD 21)))))))))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(=-5, Boys-4)',
                                                       'dep(DECEMBER-20, =-5)',
                                                       'num(girls-12, 13-6)',
                                                       'nn(girls-12, ×-7)',
                                                       'num(girls-12, 504-8)',
                                                       'amod(girls-12, =-9)',
                                                       'nn(girls-12, 273-10)',
                                                       'nn(girls-12, ∴-11)',
                                                       'nsubj(+-16, girls-12)',
                                                       'dep(+-16, =-13)',
                                                       'num(+-16, 231-14)',
                                                       'num(+-16, 13-15)',
                                                       'ccomp(=-5, +-16)',
                                                       'num(437-18, 11-17)',
                                                       'nsubj(DECEMBER-20, 437-18)',
                                                       'cop(DECEMBER-20, s-19)',
                                                       'num(DECEMBER-20, 2001-21)',
                                                       'cop(OBJECTIVE-TYPE-26, s-22)',
                                                       'det(OBJECTIVE-TYPE-26, THE-23)',
                                                       'nn(OBJECTIVE-TYPE-26, COMPETITION-24)',
                                                       'nn(OBJECTIVE-TYPE-26, MASTER-25)',
                                                       'rcmod(DECEMBER-20, OBJECTIVE-TYPE-26)',
                                                       'rcmod(OBJECTIVE-TYPE-26, QUESTIONS-27)',
                                                       'number(273-29, 273-28)',
                                                       'num(91-30, 273-29)',
                                                       'dobj(QUESTIONS-27, 91-30)',
                                                       'partmod(91-30, =-31)',
                                                       'dep(231-33, =-32)',
                                                       'ccomp(=-31, 231-33)',
                                                       'acomp(=-31, −-34)',
                                                       'number(219-36, 12-35)',
                                                       'num(21-38, 219-36)',
                                                       'number(21-38, 73-37)',
                                                       'dep(−-34, 21-38)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (NNP A))
          (: :)
          (NP (CD 2)))
        (: :)
        (NP
          (NP (CD 8) (NN B))
          (NP
            (QP (CD 3) (CD 4))))
        (: :)
        (NP
          (NP (CD 12))
          (NP
            (NP (DT A) (NNP gets) (NNP =) (NNP C) (NNP A) (POS \'s))
            (NN share) (JJ =) (CD 8) (NNS ×)
            (QP (CD 350) (CD =)))))
      (VP (VBN Rs)
        (NP
          (NP
            (QP (CD 80) (CD 35)))
          (: :)
          (NP
            (NP (CD 5) (: :) (CD 15))
            (NP
              (NP (NNP B) (POS \'s))
              (NN share))))
        (S
          (VP (SYM =)
            (NP (CD 12))))))
    (VP (VBZ ×)
      (S
        (NP (CD 350) (NNP =) (NNP Rs) (CD 120) (CD 35) (NNP C) (POS \'s) (NN share) (NN =))
        (VP (VB Rs)
          (NP
            (QP (CD 150) (CD 22))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(×-38, A-4)',
                                                       'dep(A-4, 2-6)',
                                                       'num(B-9, 8-8)',
                                                       'dep(A-4, B-9)',
                                                       'number(4-11, 3-10)',
                                                       'dep(B-9, 4-11)',
                                                       'dep(A-4, 12-13)',
                                                       'det(A-18, A-14)',
                                                       'nn(A-18, gets-15)',
                                                       'nn(A-18, =-16)',
                                                       'nn(A-18, C-17)',
                                                       'poss(×-23, A-18)',
                                                       'nn(×-23, share-20)',
                                                       'amod(×-23, =-21)',
                                                       'num(×-23, 8-22)',
                                                       'dep(12-13, ×-23)',
                                                       'number(=-25, 350-24)',
                                                       'num(×-23, =-25)',
                                                       'partmod(A-4, Rs-26)',
                                                       'number(35-28, 80-27)',
                                                       'dobj(Rs-26, 35-28)',
                                                       'num(15-32, 5-30)',
                                                       'dep(35-28, 15-32)',
                                                       'poss(share-35, B-33)',
                                                       'dep(15-32, share-35)',
                                                       'dep(12-37, =-36)',
                                                       'dep(Rs-26, 12-37)',
                                                       'num(=-47, 350-39)',
                                                       'nn(=-47, =-40)',
                                                       'nn(=-47, Rs-41)',
                                                       'num(=-47, 120-42)',
                                                       'num(=-47, 35-43)',
                                                       'nn(=-47, C-44)',
                                                       'poss(=-47, C-44)',
                                                       'possessive(=-47, \'s-45)',
                                                       'nn(=-47, share-46)',
                                                       'nsubj(Rs-48, =-47)',
                                                       'ccomp(×-38, Rs-48)',
                                                       'number(22-50, 150-49)',
                                                       'dobj(Rs-48, 22-50)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S (-LRB- -LRB-)
    (NP
      (NP (DT a)
        (ADJP (CD -RRB-) (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (NP (NNP Ist) (NN glass)))
    (NP
      (NP
        (QP (CD =) (CD 2))
        (NNP ×) (CD 100)
        (ADJP
          (QP ($ =) (CD 22.2) (CD 9))
          (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (S
        (VP (NNP IInd)
          (S
            (NP (NN glass))
            (VP (SYM =)
              (NP (CD 3)))))))
    (NP (`` ×)
      (ADJP
        (NP
          (QP (CD 100) (CD =))
          (QP (CD 21.4) (CD 14)))
        (JJ 1st))
      (NN mixture))
    (VP (VBZ is)
      (ADJP (JJ sweeter)
        (NP (CD 23))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(age-5, a-2)',
                                                       'amod(age-5, %-4)',
                                                       'nsubj(sweeter-35, age-5)',
                                                       'prep_of(age-5, sugar-7)',
                                                       'nn(glass-10, Ist-9)',
                                                       'prep_in(sweeter-35, glass-10)',
                                                       'number(2-12, =-11)',
                                                       'num(age-19, 2-12)',
                                                       'nn(age-19, ×-13)',
                                                       'num(age-19, 100-14)',
                                                       'dep(%-18, =-15)',
                                                       'number(=-15, 22.2-16)',
                                                       'number(=-15, 9-17)',
                                                       'dep(age-19, %-18)',
                                                       'nsubj(sweeter-35, age-19)',
                                                       'prep_of(age-19, sugar-21)',
                                                       'prepc_in(sweeter-35, IInd-23)',
                                                       'nsubj(3-26, glass-24)',
                                                       'dep(3-26, =-25)',
                                                       'ccomp(IInd-23, 3-26)',
                                                       'punct(mixture-33, ×-27)',
                                                       'number(=-29, 100-28)',
                                                       'num(14-31, =-29)',
                                                       'number(14-31, 21.4-30)',
                                                       'npadvmod(1st-32, 14-31)',
                                                       'amod(mixture-33, 1st-32)',
                                                       'nsubj(sweeter-35, mixture-33)',
                                                       'cop(sweeter-35, is-34)',
                                                       'dep(sweeter-35, 23-36)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNPS Boys))
      (VP (VBZ =)
        (S
          (NP (CD 13) (NNP ×) (CD 504) (JJ =) (NNP 273) (NNP ∴) (NNS girls))
          (VP (SYM =)
            (NP (CD 231) (CD 13) (NNS +))))))
    (NP (CD 11) (CD 437))
    (VP (VBZ s)
      (NP
        (NP (NNP DECEMBER) (CD 2001))
        (SBAR
          (S
            (VP (VBZ s)
              (NP
                (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
                (SBAR
                  (S
                    (VP (VBZ QUESTIONS)
                      (NP
                        (NP
                          (QP (CD 273) (CD 273))
                          (CD 91))
                        (VP (VBN =)
                          (S
                            (VP (SYM =)
                              (NP (CD 231))))
                          (ADJP (JJ −)
                            (NP
                              (QP (CD 12) (CD 219))
                              (QP (CD 73) (CD 21)))))))))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (NNP A))
          (\\: \\:)
          (NP (CD 2)))
        (\\: \\:)
        (NP
          (NP (CD 8) (NN B))
          (NP
            (QP (CD 3) (CD 4))))
        (\\: \\:)
        (NP
          (NP (CD 12))
          (NP
            (NP (DT A) (NNP gets) (NNP =) (NNP C) (NNP A) (POS \\\'s))
            (NN share) (JJ =) (CD 8) (NNS ×)
            (QP (CD 350) (CD =)))))
      (VP (VBN Rs)
        (NP
          (NP
            (QP (CD 80) (CD 35)))
          (\\: \\:)
          (NP
            (NP (CD 5) (\\: \\:) (CD 15))
            (NP
              (NP (NNP B) (POS \\\'s))
              (NN share))))
        (S
          (VP (SYM =)
            (NP (CD 12))))))
    (VP (VBZ ×)
      (S
        (NP (CD 350) (NNP =) (NNP Rs) (CD 120) (CD 35) (NNP C) (POS \\\'s) (NN share) (NN =))
        (VP (VB Rs)
          (NP
            (QP (CD 150) (CD 22))))))))'
        };
$VAR1 = {
          'Tree' => '((S (-LRB- -LRB-)
    (NP
      (NP (DT a)
        (ADJP (CD -RRB-) (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (NP (NNP Ist) (NN glass)))
    (NP
      (NP
        (QP (CD =) (CD 2))
        (NNP ×) (CD 100)
        (ADJP
          (QP ($ =) (CD 22\\.2) (CD 9))
          (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (S
        (VP (NNP IInd)
          (S
            (NP (NN glass))
            (VP (SYM =)
              (NP (CD 3)))))))
    (NP (\\`\\` ×)
      (ADJP
        (NP
          (QP (CD 100) (CD =))
          (QP (CD 21\\.4) (CD 14)))
        (JJ 1st))
      (NN mixture))
    (VP (VBZ is)
      (ADJP (JJ sweeter)
        (NP (CD 23))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNPS Boys))
      (VP (VBZ =)
        (S
          (NP (CD 13) (NNP ×) (CD 504) (JJ =) (NNP 273) (NNP ∴) (NNS girls))
          (VP (SYM =)
            (NP (CD 231) (CD 13) (NNS +))))))
    (NP (CD 11) (CD 437))
    (VP (VBZ s)
      (NP
        (NP (NNP DECEMBER) (CD 2001))
        (SBAR
          (S
            (VP (VBZ s)
              (NP
                (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
                (SBAR
                  (S
                    (VP (VBZ QUESTIONS)
                      (NP
                        (NP
                          (QP (CD 273) (CD 273))
                          (CD 91))
                        (VP (VBN =)
                          (S
                            (VP (SYM =)
                              (NP (CD 231))))
                          (ADJP (JJ −)
                            (NP
                              (QP (CD 12) (CD 219))
                              (QP (CD 73) (CD 21)))))))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNPS Boys))
      (VP (VBZ =)
        (S
          (NP (CD 13) (NNP ×) (CD 504) (JJ =) (NNP 273) (NNP ∴) (NNS girls))
          (VP (SYM =)
            (NP (CD 231) (CD 13) (NNS +))))))
    (NP (CD 11) (CD 437))
    (VP (VBZ s)
      (NP
        (NP (NNP DECEMBER) (CD 2001))
        (SBAR
          (S
            (VP (VBZ s)
              (NP
                (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
                (SBAR
                  (S
                    (VP (VBZ QUESTIONS)
                      (NP
                        (NP
                          (QP (CD 273) (CD 273))
                          (CD 91))
                        (VP (VBN =)
                          (S
                            (VP (SYM =)
                              (NP (CD 231))))
                          (ADJP (JJ −)
                            (NP
                              (QP (CD 12) (CD 219))
                              (QP (CD 73) (CD 21))))))))))))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (NNP A))
          (\\: \\:)
          (NP (CD 2)))
        (\\: \\:)
        (NP
          (NP (CD 8) (NN B))
          (NP
            (QP (CD 3) (CD 4))))
        (\\: \\:)
        (NP
          (NP (CD 12))
          (NP
            (NP (DT A) (NNP gets) (NNP =) (NNP C) (NNP A) (POS \\\'s))
            (NN share) (JJ =) (CD 8) (NNS ×)
            (QP (CD 350) (CD =)))))
      (VP (VBN Rs)
        (NP
          (NP
            (QP (CD 80) (CD 35)))
          (\\: \\:)
          (NP
            (NP (CD 5) (\\: \\:) (CD 15))
            (NP
              (NP (NNP B) (POS \\\'s))
              (NN share))))
        (S
          (VP (SYM =)
            (NP (CD 12))))))
    (VP (VBZ ×)
      (S
        (NP (CD 350) (NNP =) (NNP Rs) (CD 120) (CD 35) (NNP C) (POS \\\'s) (NN share) (NN =))
        (VP (VB Rs)
          (NP
            (QP (CD 150) (CD 22))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (NNP A))
          (\\: \\:)
          (NP (CD 2)))
        (\\: \\:)
        (NP
          (NP (CD 8) (NN B))
          (NP
            (QP (CD 3) (CD 4))))
        (\\: \\:)
        (NP
          (NP (CD 12))
          (NP
            (NP (DT A) (NNP gets) (NNP =) (NNP C) (NNP A) (POS \\\'s))
            (NN share) (JJ =) (CD 8) (NNS ×)
            (QP (CD 350) (CD =)))))
      (VP (VBN Rs)
        (NP
          (NP
            (QP (CD 80) (CD 35)))
          (\\: \\:)
          (NP
            (NP (CD 5) (\\: \\:) (CD 15))
            (NP
              (NP (NNP B) (POS \\\'s))
              (NN share))))
        (S
          (VP (SYM =)
            (NP (CD 12))))))
    (VP (VBZ ×)
      (S
        (NP (CD 350) (NNP =) (NNP Rs) (CD 120) (CD 35) (NNP C) (POS \\\'s) (NN share) (NN =))
        (VP (VB Rs)
          (NP
            (QP (CD 150) (CD 22)))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S (-LRB- -LRB-)
    (NP
      (NP (DT a)
        (ADJP (CD -RRB-) (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (NP (NNP Ist) (NN glass)))
    (NP
      (NP
        (QP (CD =) (CD 2))
        (NNP ×) (CD 100)
        (ADJP
          (QP ($ =) (CD 22\\.2) (CD 9))
          (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (S
        (VP (NNP IInd)
          (S
            (NP (NN glass))
            (VP (SYM =)
              (NP (CD 3)))))))
    (NP (\\`\\` ×)
      (ADJP
        (NP
          (QP (CD 100) (CD =))
          (QP (CD 21\\.4) (CD 14)))
        (JJ 1st))
      (NN mixture))
    (VP (VBZ is)
      (ADJP (JJ sweeter)
        (NP (CD 23))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S (-LRB- -LRB-)
    (NP
      (NP (DT a)
        (ADJP (CD -RRB-) (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (NP (NNP Ist) (NN glass)))
    (NP
      (NP
        (QP (CD =) (CD 2))
        (NNP ×) (CD 100)
        (ADJP
          (QP ($ =) (CD 22\\.2) (CD 9))
          (NN %))
        (NN age))
      (PP (IN of)
        (NP (NN sugar))))
    (PP (IN in)
      (S
        (VP (NNP IInd)
          (S
            (NP (NN glass))
            (VP (SYM =)
              (NP (CD 3)))))))
    (NP (\\`\\` ×)
      (ADJP
        (NP
          (QP (CD 100) (CD =))
          (QP (CD 21\\.4) (CD 14)))
        (JJ 1st))
      (NN mixture))
    (VP (VBZ is)
      (ADJP (JJ sweeter)
        (NP (CD 23)))))))
'
        };
Submitting expect

*** - STRING: argument 100 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - STRING: argument 100 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(c) 90% of x = 30 ⇒ x = 33 1 3 B gets 3200 + 2100 = Rs 5300 C gets = 3200 + 1200 = Rs 4400 29.',
                       '(a) 2 = 1.414, 3 = 1.732, 5 = 2.236, 6 = 2.449 30.',
                       '(c) 529 = 232 31.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.5 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 34]: [-LRB-, c, -RRB-, 90, %, of, x, =, 30, ⇒, x, =, 33, 1, 3, B, gets, 3200, +, 2100, =, Rs, 5300, C, gets, =, 3200, +, 1200, =, Rs, 4400, 29, .]
Parsing [sent. 2 len. 20]: [-LRB-, a, -RRB-, 2, =, 1.414, ,, 3, =, 1.732, ,, 5, =, 2.236, ,, 6, =, 2.449, 30, .]
Parsing [sent. 3 len. 8]: [-LRB-, c, -RRB-, 529, =, 232, 31, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 62 words in 3 sentences (11.91 wds/sec; 0.58 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP (CD 90) (NN %))
      (PP (IN of)
        (NP
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 30) (NNS ⇒))))))
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 33) (CD 1))))))))
      (SBAR
        (S
          (NP (NNP 3) (NNP B))
          (VP (VBZ gets)
            (S
              (NP (CD 3200) (JJ +) (NNS 2100))
              (VP (SYM =)
                (NP (NNP Rs) (NNP 5300) (NNP C))))))))
    (VP (VBZ gets)
      (S
        (NP
          (QP (NN =) (CD 3200) (CD +) (CD 1200)))
        (VP (SYM =)
          (NP (NNP Rs) (NNP 4400) (CD 29)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, c-2)',
                                                       'num(%-5, 90-4)',
                                                       'dobj(gets-17, %-5)',
                                                       'nsubj(gets-25, %-5)',
                                                       'prep_of(%-5, x-7)',
                                                       'dep(⇒-10, =-8)',
                                                       'num(⇒-10, 30-9)',
                                                       'rcmod(x-7, ⇒-10)',
                                                       'dep(x-7, x-11)',
                                                       'dep(1-14, =-12)',
                                                       'num(1-14, 33-13)',
                                                       'rcmod(x-11, 1-14)',
                                                       'nn(B-16, 3-15)',
                                                       'nsubj(gets-17, B-16)',
                                                       'rcmod(%-5, gets-17)',
                                                       'num(2100-20, 3200-18)',
                                                       'amod(2100-20, +-19)',
                                                       'nsubj(C-24, 2100-20)',
                                                       'dep(C-24, =-21)',
                                                       'nn(C-24, Rs-22)',
                                                       'nn(C-24, 5300-23)',
                                                       'ccomp(gets-17, C-24)',
                                                       'nsubj(4400-32, =-26)',
                                                       'number(=-26, 3200-27)',
                                                       'number(=-26, +-28)',
                                                       'number(=-26, 1200-29)',
                                                       'dep(4400-32, =-30)',
                                                       'nn(4400-32, Rs-31)',
                                                       'ccomp(gets-25, 4400-32)',
                                                       'num(4400-32, 29-33)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (VBZ =)
        (NP (CD 1.414))))
    (, ,)
    (NP
      (NP (NNP 3) (NNP =) (CD 1.732) (, ,) (CD 5))
      (NP (NNP =) (CD 2.236) (, ,) (CD 6)))
    (VP (SYM =)
      (NP (CD 2.449) (CD 30)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(=-5, 2-4)',
                                                       'ccomp(30-19, =-5)',
                                                       'dobj(=-5, 1.414-6)',
                                                       'nn(=-9, 3-8)',
                                                       'nsubj(30-19, =-9)',
                                                       'num(=-9, 1.732-10)',
                                                       'num(=-9, 5-12)',
                                                       'dep(=-9, =-13)',
                                                       'num(=-13, 2.236-14)',
                                                       'num(=-13, 6-16)',
                                                       'dep(30-19, =-17)',
                                                       'num(30-19, 2.449-18)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB 529)
      (S
        (VP (SYM =)
          (NP (CD 232) (CD 31)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, c-2)',
                                                       'dep(31-7, =-5)',
                                                       'num(31-7, 232-6)',
                                                       'ccomp(529-4, 31-7)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP (CD 90) (NN %))
      (PP (IN of)
        (NP
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 30) (NNS ⇒))))))
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 33) (CD 1))))))))
      (SBAR
        (S
          (NP (NNP 3) (NNP B))
          (VP (VBZ gets)
            (S
              (NP (CD 3200) (JJ +) (NNS 2100))
              (VP (SYM =)
                (NP (NNP Rs) (NNP 5300) (NNP C))))))))
    (VP (VBZ gets)
      (S
        (NP
          (QP (NN =) (CD 3200) (CD +) (CD 1200)))
        (VP (SYM =)
          (NP (NNP Rs) (NNP 4400) (CD 29)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (VBZ =)
        (NP (CD 1\\.414))))
    (\\, \\,)
    (NP
      (NP (NNP 3) (NNP =) (CD 1\\.732) (\\, \\,) (CD 5))
      (NP (NNP =) (CD 2\\.236) (\\, \\,) (CD 6)))
    (VP (SYM =)
      (NP (CD 2\\.449) (CD 30)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB 529)
      (S
        (VP (SYM =)
          (NP (CD 232) (CD 31)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP (CD 90) (NN %))
      (PP (IN of)
        (NP
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 30) (NNS ⇒))))))
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 33) (CD 1))))))))
      (SBAR
        (S
          (NP (NNP 3) (NNP B))
          (VP (VBZ gets)
            (S
              (NP (CD 3200) (JJ +) (NNS 2100))
              (VP (SYM =)
                (NP (NNP Rs) (NNP 5300) (NNP C))))))))
    (VP (VBZ gets)
      (S
        (NP
          (QP (NN =) (CD 3200) (CD +) (CD 1200)))
        (VP (SYM =)
          (NP (NNP Rs) (NNP 4400) (CD 29)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP (CD 90) (NN %))
      (PP (IN of)
        (NP
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 30) (NNS ⇒))))))
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 33) (CD 1))))))))
      (SBAR
        (S
          (NP (NNP 3) (NNP B))
          (VP (VBZ gets)
            (S
              (NP (CD 3200) (JJ +) (NNS 2100))
              (VP (SYM =)
                (NP (NNP Rs) (NNP 5300) (NNP C))))))))
    (VP (VBZ gets)
      (S
        (NP
          (QP (NN =) (CD 3200) (CD +) (CD 1200)))
        (VP (SYM =)
          (NP (NNP Rs) (NNP 4400) (CD 29))))))))
'
        };
Submitting expect

*** - GET: 3 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - GET: 3 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (VBZ =)
        (NP (CD 1\\.414))))
    (\\, \\,)
    (NP
      (NP (NNP 3) (NNP =) (CD 1\\.732) (\\, \\,) (CD 5))
      (NP (NNP =) (CD 2\\.236) (\\, \\,) (CD 6)))
    (VP (SYM =)
      (NP (CD 2\\.449) (CD 30)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (VBZ =)
        (NP (CD 1\\.414))))
    (\\, \\,)
    (NP
      (NP (NNP 3) (NNP =) (CD 1\\.732) (\\, \\,) (CD 5))
      (NP (NNP =) (CD 2\\.236) (\\, \\,) (CD 6)))
    (VP (SYM =)
      (NP (CD 2\\.449) (CD 30))))))
'
        };
Submitting expect

*** - GET: 3 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - GET: 3 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB 529)
      (S
        (VP (SYM =)
          (NP (CD 232) (CD 31)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB 529)
      (S
        (VP (SYM =)
          (NP (CD 232) (CD 31))))))))
'
        };
Submitting expect

(-LRB- C -RRB- 529 = 232 31)


NIL
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       '(a) 3x + 4x + 5x = 96 ⇒ x = 8 ∴ sides are 24, 32, 40 It is a Pythagorean Triplet, ∆ is a rt ∆ ∴ Area of a ∆ = 32.',
                       '(d) 77 35 ...',
                       '(i) x – y = ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 41]: [-LRB-, a, -RRB-, 3x, +, 4x, +, 5x, =, 96, ⇒, x, =, 8, ∴, sides, are, 24, ,, 32, ,, 40, It, is, a, Pythagorean, Triplet, ,, ∆, is, a, rt, ∆, ∴, Area, of, a, ∆, =, 32, .]
Parsing [sent. 2 len. 14]: [-LRB-, d, -RRB-, 77, 35, ..., -LRB-, i, -RRB-, x, --, y, =, ...]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 55 words in 2 sentences (11.00 wds/sec; 0.40 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (JJ 3x) (JJ +) (JJ 4x) (NNS +))
      (VP (VBN 5x)
        (S
          (VP (SYM =)
            (NP (CD 96))))
        (S
          (VP (VBG ⇒)
            (S
              (NP (SYM x))
              (VP (SYM =)
                (NP (CD 8) (JJ ∴) (NNS sides))))))))
    (VP (VBP are)
      (NP
        (NP
          (NP (CD 24))
          (\\, \\,)
          (NP (CD 32))
          (\\, \\,))
        (SBAR
          (S
            (NP
              (NP (CD 40))
              (SBAR
                (S
                  (NP (PRP It))
                  (VP (VBZ is)
                    (NP
                      (NP (DT a) (NNP Pythagorean) (NNP Triplet) (\\, \\,) (NNP ∆))
                      (SBAR
                        (S
                          (VP (VBZ is)
                            (NP
                              (NP (DT a) (NNP rt) (NNP ∆) (NNP ∴) (NNP Area))
                              (PP (IN of)
                                (NP (DT a) (NN ∆))))))))))))
            (VP (SYM =)
              (NP (CD 32)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP
      (NP (CD 77) (CD 35))
      (\\: \\.\\.\\.)
      (VP
        (PRN (-LRB- -LRB-)
          (NP (NNP i))
          (-RRB- -RRB-))
        (VBN x))
      (\\: --))
    (VP (VBP y)
      (NP (NNS =)))
    (\\. \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (JJ 3x) (JJ +) (JJ 4x) (NNS +))
      (VP (VBN 5x)
        (S
          (VP (SYM =)
            (NP (CD 96))))
        (S
          (VP (VBG ⇒)
            (S
              (NP (SYM x))
              (VP (SYM =)
                (NP (CD 8) (JJ ∴) (NNS sides))))))))
    (VP (VBP are)
      (NP
        (NP
          (NP (CD 24))
          (\\, \\,)
          (NP (CD 32))
          (\\, \\,))
        (SBAR
          (S
            (NP
              (NP (CD 40))
              (SBAR
                (S
                  (NP (PRP It))
                  (VP (VBZ is)
                    (NP
                      (NP (DT a) (NNP Pythagorean) (NNP Triplet) (\\, \\,) (NNP ∆))
                      (SBAR
                        (S
                          (VP (VBZ is)
                            (NP
                              (NP (DT a) (NNP rt) (NNP ∆) (NNP ∴) (NNP Area))
                              (PP (IN of)
                                (NP (DT a) (NN ∆))))))))))))
            (VP (SYM =)
              (NP (CD 32)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (JJ 3x) (JJ +) (JJ 4x) (NNS +))
      (VP (VBN 5x)
        (S
          (VP (SYM =)
            (NP (CD 96))))
        (S
          (VP (VBG ⇒)
            (S
              (NP (SYM x))
              (VP (SYM =)
                (NP (CD 8) (JJ ∴) (NNS sides))))))))
    (VP (VBP are)
      (NP
        (NP
          (NP (CD 24))
          (\\, \\,)
          (NP (CD 32))
          (\\, \\,))
        (SBAR
          (S
            (NP
              (NP (CD 40))
              (SBAR
                (S
                  (NP (PRP It))
                  (VP (VBZ is)
                    (NP
                      (NP (DT a) (NNP Pythagorean) (NNP Triplet) (\\, \\,) (NNP ∆))
                      (SBAR
                        (S
                          (VP (VBZ is)
                            (NP
                              (NP (DT a) (NNP rt) (NNP ∆) (NNP ∴) (NNP Area))
                              (PP (IN of)
                                (NP (DT a) (NN ∆))))))))))))
            (VP (SYM =)
              (NP (CD 32))))))))))
'
        };
Submitting expect

(-LRB- A -RRB- 3X + 4X + 5X = 96 ⇒ X = 8 ∴ SIDES ARE 24 , 32 , 40 IT IS A PYTHAGOREAN TRIPLET , ∆ IS A RT ∆ ∴ AREA OF A ∆ = 32)

 + CAN BE A NUMBER_OR_PORTION.
 + MAY BE 5X -ED.
 + CAN BE 3X.
 + CAN BE +.
 + CAN BE 4X.
 SIDES CAN BE ∴.
 A THING-REFERRED-TO CAN BE A |\|PYTHAGOREAN_TRIPLET_\\\|,\\\|_∆\||[PERSON??].

((:I (:F K (:F PLUR +.N)) NUMBER-OR-PORTION.N) (:I (:F K (:F PLUR +.N)) (:F BE.PASV |\|5X\|.V|)) (:I (:Q DET (:F PLUR +.N)) |\|3X\|.A|)
 (:I (:Q DET (:F PLUR +.N)) +.A) (:I (:Q DET (:F PLUR +.N)) |\|4X\|.A|) (:I (:Q DET (:F PLUR SIDE.N)) ∴.A)
 (:I (:Q DET THING-REFERRED-TO*.N) (:Q DET |\|PYTHAGOREAN_TRIPLET_\\\|,\\\|_∆\|.NAME|)) NIL)
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(-LRB- A -RRB- 3X + 4X + 5X = 96 ⇒ X = 8 ∴ SIDES ARE 24 , 32 , 40 IT IS A PYTHAGOREAN TRIPLET , ∆ IS A RT ∆ ∴ AREA OF A ∆ = 32)

 + CAN BE A NUMBER_OR_PORTION.
 + MAY BE 5X -ED.
 + CAN BE 3X.
 + CAN BE +.
 + CAN BE 4X.
 SIDES CAN BE ∴.
 A THING-REFERRED-TO CAN BE A |\\|PYTHAGOREAN_TRIPLET_\\\\\\|,\\\\\\|_∆\\||[PERSON??].

((:I (:F K (:F PLUR +.N)) NUMBER-OR-PORTION.N) (:I (:F K (:F PLUR +.N)) (:F BE.PASV |\\|5X\\|.V|)) (:I (:Q DET (:F PLUR +.N)) |\\|3X\\|.A|)
 (:I (:Q DET (:F PLUR +.N)) +.A) (:I (:Q DET (:F PLUR +.N)) |\\|4X\\|.A|) (:I (:Q DET (:F PLUR SIDE.N)) ∴.A)
 (:I (:Q DET THING-REFERRED-TO*.N) (:Q DET |\\|PYTHAGOREAN_TRIPLET_\\\\\\|,\\\\\\|_∆\\|.NAME|)) NIL)
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP
      (NP (CD 77) (CD 35))
      (\\: \\.\\.\\.)
      (VP
        (PRN (-LRB- -LRB-)
          (NP (NNP i))
          (-RRB- -RRB-))
        (VBN x))
      (\\: --))
    (VP (VBP y)
      (NP (NNS =)))
    (\\. \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP
      (NP (CD 77) (CD 35))
      (\\: \\.\\.\\.)
      (VP
        (PRN (-LRB- -LRB-)
          (NP (NNP i))
          (-RRB- -RRB-))
        (VBN x))
      (\\: --))
    (VP (VBP y)
      (NP (NNS =)))
    (\\. \\.\\.\\.))))))
'
        };
Submitting expect

(-LRB- D -RRB- 77 35 ... -LRB- I -RRB- X -- Y = ...)

 SOME NUMBER_OR_PORTION MAY Y =.

((:I (:Q SOME NUMBER-OR-PORTION.N) Y.V (:F K (:F PLUR =.N))))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(-LRB- D -RRB- 77 35 ... -LRB- I -RRB- X -- Y = ...)

 SOME NUMBER_OR_PORTION MAY Y =.

((:I (:Q SOME NUMBER-OR-PORTION.N) Y.V (:F K (:F PLUR =.N))))
______________________________________________________________________
[5]>'
        };
$VAR1 = {
          'Batch' => [
                       '(ii) 8 8 77 21 –7= 8 8 Product = 7 × =( xy = 11 11 180 22 × % of Rs 180 = = Rs = 22 paise 90 100 90 100 P% = or 4 xy = (x + y)2 – (x – y)2 = ( 21 3 = 18 8 8 77 2 35 ) – ( )2 8 8 35.',
                       '(a) Let the volume of water be 100 cc ∴ Vol of ice = 110 cc When ice melts its volume becomes 100 cc If vol is 110 cc then decrease in vol = 10 cc If vol is 100 cc then decrease in vol = 6 × 50 × 12 × 2 = 15 60 × 8 × 1 10 1 × 100 = 9 11 110 36.',
                       '(b) 37.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 79]: [-LRB-, ii, -RRB-, 8, 8, 77, 21, --, 7, =, 8, 8, Product, =, 7, ×, =, -LRB-, xy, =, 11, 11, 180, 22, ×, %, of, Rs, 180, =, =, Rs, =, 22, paise, 90, 100, 90, 100, P, %, =, or, 4, xy, =, -LRB-, x, +, y, -RRB-, 2, --, -LRB-, x, --, y, -RRB-, 2, =, -LRB-, 21, 3, =, 18, 8, 8, 77, 2, 35, -RRB-, --, -LRB-, -RRB-, 2, 8, 8, 35, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 2 len. 72]: [-LRB-, a, -RRB-, Let, the, volume, of, water, be, 100, cc, ∴, Vol, of, ice, =, 110, cc, When, ice, melts, its, volume, becomes, 100, cc, If, vol, is, 110, cc, then, decrease, in, vol, =, 10, cc, If, vol, is, 100, cc, then, decrease, in, vol, =, 6, ×, 50, ×, 12, ×, 2, =, 15, 60, ×, 8, ×, 1, 10, 1, ×, 100, =, 9, 11, 110, 36, .]
Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 3 len. 5]: [-LRB-, b, -RRB-, 37, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 156 words in 3 sentences (41.49 wds/sec; 0.80 sents/sec).
  2 sentences were not parsed:
    2 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
Sentence skipped: no PCFG fallback.
SENTENCE_SKIPPED_OR_UNPARSABLE
(ROOT
  (S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB 37))
    (. .)))'
        };
$VAR1 = {
          'Batch' => [
                       '(b) 0.16, 27.',
                       '(a) ∴x= x × 100 = 25 4x 77 35 77 35 + )( − ) 8 8 8 8 1 112 42 3 × × = 18 8 4 8 8 Men Days Work Hours 50 12 1 6 60 8 2 x More men less hours 60 : 50 Less days more hours 8 : 12 More work more hours 1 : 2 12 − 1 11 = 90 90 34.',
                       '(c) P = S.P. – C.P. = 5x – 4x = Rs x Adding (i) and (ii), 2x = 14 x=7 y= 1 × 24 × 32 = 384 m2 2 5 1 1 = = =.25 80 16 4 33.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 7]: [-LRB-, b, -RRB-, 0.16, ,, 27, .]
Parsing [sent. 2 len. 79]: [-LRB-, a, -RRB-, ∴, x, =, x, ×, 100, =, 25, 4x, 77, 35, 77, 35, +, -RRB-, -LRB-, −, -RRB-, 8, 8, 8, 8, 1, 112, 42, 3, ×, ×, =, 18, 8, 4, 8, 8, Men, Days, Work, Hours, 50, 12, 1, 6, 60, 8, 2, x, More, men, less, hours, 60, :, 50, Less, days, more, hours, 8, :, 12, More, work, more, hours, 1, :, 2, 12, −, 1, 11, =, 90, 90, 34, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 3 len. 53]: [-LRB-, c, -RRB-, P, =, S.P., --, C.P., =, 5x, --, 4x, =, Rs, x, Adding, -LRB-, i, -RRB-, and, -LRB-, ii, -RRB-, ,, 2x, =, 14, x, =, 7, y, =, 1, ×, 24, ×, 32, =, 384, m2, 2, 5, 1, 1, =, =, =, .25, 80, 16, 4, 33, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 139 words in 3 sentences (12.32 wds/sec; 0.27 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => '((NP
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 0\\.16))
    (\\, \\,)
    (NP (CD 27))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
(ROOT
  (S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (NNP P))
          (SBAR
            (S
              (VP (SYM =)
                (NP (NNP S.P.))))))
        (: --)
        (NP
          (NP (NNP C.P.))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 5x))))))
        (: --)
        (NP
          (NP (CD 4x))
          (SBAR
            (S
              (VP (SYM =)
                (NP (NNP Rs)))))))
      (SBAR
        (S
          (NP
            (NP (SYM x))
            (VP (VBG Adding)
              (NP
                (NP
                  (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                  (CC and)
                  (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-)))
                (, ,)
                (NP
                  (NP (CD 2x))
                  (SBAR
                    (S
                      (VP (SYM =)
                        (NP (CD 14) (NNS x)))))))))
          (VP (SYM =)
            (NP (CD 7))))))
    (VP (VBP y)
      (NP
        (NP (NNP =) (CD 1) (CD ×) (CD 24) (CD ×) (CD 32) (CD =) (CD 384) (CD m2) (CD 2) (CD 5) (CD 1) (CD 1) (NNP =) (NNP =))
        (S
          (VP (SYM =)
            (NP (CD .25)))))
      (FRAG
        (NP (CD 80) (CD 16))
        (NP (CD 4) (CD 33))))
    (. .)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 0\\.16))
    (\\, \\,)
    (NP (CD 27))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 0\\.16))
    (\\, \\,)
    (NP (CD 27)))))
'
        };
Submitting expect

(-LRB- B -RRB- 0.16 , 27)


NIL
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'Batch' => [
                       '(b) 0.',
                       '12 = 24.',
                       '(b) 1.1 + 1.21 + 1.331 = 3.641 25.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 5]: [-LRB-, b, -RRB-, 0, .]
Parsing [sent. 2 len. 4]: [12, =, 24, .]
Parsing [sent. 3 len. 12]: [-LRB-, b, -RRB-, 1.1, +, 1.21, +, 1.331, =, 3.641, 25, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 21 words in 3 sentences (14.42 wds/sec; 2.06 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB 0))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, b-2)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (CD 12))
    (VP (SYM =)
      (NP (CD 24)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(24-3, 12-1)',
                                                       'dep(24-3, =-2)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 1.1) (NNS +))
    (VP (VBZ 1.21)
      (S
        (NP
          (QP (CD +) (CD 1.331)))
        (VP (SYM =)
          (NP (CD 3.641) (CD 25)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, b-2)',
                                                       'num(+-5, 1.1-4)',
                                                       'nsubj(1.21-6, +-5)',
                                                       'number(1.331-8, +-7)',
                                                       'nsubj(25-11, 1.331-8)',
                                                       'dep(25-11, =-9)',
                                                       'num(25-11, 3.641-10)',
                                                       'ccomp(1.21-6, 25-11)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB 0))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (CD 12))
    (VP (SYM =)
      (NP (CD 24)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 1\\.1) (NNS +))
    (VP (VBZ 1\\.21)
      (S
        (NP
          (QP (CD +) (CD 1\\.331)))
        (VP (SYM =)
          (NP (CD 3\\.641) (CD 25)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB 0))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB 0)))))
'
        };
Submitting expect

(-LRB- B -RRB- 0)


NIL
______________________________________________________________________
[7]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 12))
    (VP (SYM =)
      (NP (CD 24)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 12))
    (VP (SYM =)
      (NP (CD 24))))))
'
        };
Submitting expect

(12 = 24)


NIL
______________________________________________________________________
[8]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 1\\.1) (NNS +))
    (VP (VBZ 1\\.21)
      (S
        (NP
          (QP (CD +) (CD 1\\.331)))
        (VP (SYM =)
          (NP (CD 3\\.641) (CD 25)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (CD 1\\.1) (NNS +))
    (VP (VBZ 1\\.21)
      (S
        (NP
          (QP (CD +) (CD 1\\.331)))
        (VP (SYM =)
          (NP (CD 3\\.641) (CD 25))))))))
'
        };
Submitting expect

(-LRB- B -RRB- 1.1 + 1.21 + 1.331 = 3.641 25)


NIL
______________________________________________________________________
[9]> Got result
$VAR1 = {
          'Batch' => [
                       '(d) 2431 = 11 × 13 × 17 Greatest prime factor = 17 26.',
                       '(b) x + y = 9600 + 1500 = Rs 4700 3 2 0.16 = 0.4, (0.16) = 0.0256, 0.',
                       '16 = 0.1616 ...'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 17]: [-LRB-, d, -RRB-, 2431, =, 11, ×, 13, ×, 17, Greatest, prime, factor, =, 17, 26, .]
Parsing [sent. 2 len. 27]: [-LRB-, b, -RRB-, x, +, y, =, 9600, +, 1500, =, Rs, 4700, 3, 2, 0.16, =, 0.4, ,, -LRB-, 0.16, -RRB-, =, 0.0256, ,, 0, .]
Parsing [sent. 3 len. 4]: [16, =, 0.1616, ...]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 48 words in 3 sentences (13.95 wds/sec; 0.87 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (CD 2431))
    (VP (VBZ =)
      (S
        (NP (CD 11) (NNP ×) (CD 13) (NNP ×) (CD 17) (NNP Greatest) (NNP prime) (NN factor))
        (VP (SYM =)
          (NP (CD 17) (CD 26)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(=-5, d-2)',
                                                       'nsubj(=-5, 2431-4)',
                                                       'num(factor-13, 11-6)',
                                                       'nn(factor-13, ×-7)',
                                                       'num(factor-13, 13-8)',
                                                       'nn(factor-13, ×-9)',
                                                       'num(factor-13, 17-10)',
                                                       'nn(factor-13, Greatest-11)',
                                                       'nn(factor-13, prime-12)',
                                                       'nsubj(26-16, factor-13)',
                                                       'dep(26-16, =-14)',
                                                       'num(26-16, 17-15)',
                                                       'ccomp(=-5, 26-16)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (SYM x))
    (VP (VBZ +)
      (S
        (NP (NN y))
        (VP (SYM =)
          (NP (CD 9600) (NNP +) (NNP 1500) (NNP =) (NNP Rs) (CD 4700) (CD 3) (CD 2) (CD 0.16) (NNS =) (NN 0.4))))
      (, ,)
      (S
        (NP
          (PRN (-LRB- -LRB-)
            (NP (CD 0.16))
            (-RRB- -RRB-)))
        (VP (SYM =)
          (NP (CD 0.0256))))
      (, ,)
      (ADVP (RB 0)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, b-2)',
                                                       'nsubj(+-5, x-4)',
                                                       'nsubj(0.4-18, y-6)',
                                                       'dep(0.4-18, =-7)',
                                                       'num(0.4-18, 9600-8)',
                                                       'nn(0.4-18, +-9)',
                                                       'nn(0.4-18, 1500-10)',
                                                       'nn(0.4-18, =-11)',
                                                       'nn(0.4-18, Rs-12)',
                                                       'num(0.4-18, 4700-13)',
                                                       'num(0.4-18, 3-14)',
                                                       'num(0.4-18, 2-15)',
                                                       'num(0.4-18, 0.16-16)',
                                                       'nn(0.4-18, =-17)',
                                                       'ccomp(+-5, 0.4-18)',
                                                       'nsubj(0.0256-24, 0.16-21)',
                                                       'dep(0.0256-24, =-23)',
                                                       'ccomp(+-5, 0.0256-24)',
                                                       'advmod(+-5, 0-26)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (CD 16))
    (VP (SYM =)
      (NP (CD 0.1616)))
    (. ...)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(0.1616-3, 16-1)',
                                                       'dep(0.1616-3, =-2)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (CD 2431))
    (VP (VBZ =)
      (S
        (NP (CD 11) (NNP ×) (CD 13) (NNP ×) (CD 17) (NNP Greatest) (NNP prime) (NN factor))
        (VP (SYM =)
          (NP (CD 17) (CD 26)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (SYM x))
    (VP (VBZ +)
      (S
        (NP (NN y))
        (VP (SYM =)
          (NP (CD 9600) (NNP +) (NNP 1500) (NNP =) (NNP Rs) (CD 4700) (CD 3) (CD 2) (CD 0\\.16) (NNS =) (NN 0\\.4))))
      (\\, \\,)
      (S
        (NP
          (PRN (-LRB- -LRB-)
            (NP (CD 0\\.16))
            (-RRB- -RRB-)))
        (VP (SYM =)
          (NP (CD 0\\.0256))))
      (\\, \\,)
      (ADVP (RB 0)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (CD 16))
    (VP (SYM =)
      (NP (CD 0\\.1616)))
    (\\. \\.\\.\\.)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (CD 2431))
    (VP (VBZ =)
      (S
        (NP (CD 11) (NNP ×) (CD 13) (NNP ×) (CD 17) (NNP Greatest) (NNP prime) (NN factor))
        (VP (SYM =)
          (NP (CD 17) (CD 26)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (CD 2431))
    (VP (VBZ =)
      (S
        (NP (CD 11) (NNP ×) (CD 13) (NNP ×) (CD 17) (NNP Greatest) (NNP prime) (NN factor))
        (VP (SYM =)
          (NP (CD 17) (CD 26))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [10]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [10]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (SYM x))
    (VP (VBZ +)
      (S
        (NP (NN y))
        (VP (SYM =)
          (NP (CD 9600) (NNP +) (NNP 1500) (NNP =) (NNP Rs) (CD 4700) (CD 3) (CD 2) (CD 0\\.16) (NNS =) (NN 0\\.4))))
      (\\, \\,)
      (S
        (NP
          (PRN (-LRB- -LRB-)
            (NP (CD 0\\.16))
            (-RRB- -RRB-)))
        (VP (SYM =)
          (NP (CD 0\\.0256))))
      (\\, \\,)
      (ADVP (RB 0)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP (SYM x))
    (VP (VBZ +)
      (S
        (NP (NN y))
        (VP (SYM =)
          (NP (CD 9600) (NNP +) (NNP 1500) (NNP =) (NNP Rs) (CD 4700) (CD 3) (CD 2) (CD 0\\.16) (NNS =) (NN 0\\.4))))
      (\\, \\,)
      (S
        (NP
          (PRN (-LRB- -LRB-)
            (NP (CD 0\\.16))
            (-RRB- -RRB-)))
        (VP (SYM =)
          (NP (CD 0\\.0256))))
      (\\, \\,)
      (ADVP (RB 0))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISPc 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 16))
    (VP (SYM =)
      (NP (CD 0\\.1616)))
    (\\. \\.\\.\\.)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 16))
    (VP (SYM =)
      (NP (CD 0\\.1616)))
    (\\. \\.\\.\\.))))))
'
        };
Submitting expect

(16 = 0.1616 ...)


NIL
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       'Greatest = 38.',
                       '(a) A B C A 2 5 7 35 × × = ∴ A : D = 35 : 48 = × × = B C D D 3 4 8 48 39.',
                       '(d) ( 2 + 3 )2 + ( 2 − 3 )2 4 + 3 + 4 3 + 4 + 3 − 4 3 = 14 = 4−3 2 2 − ( 3 )2 40.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 4]: [Greatest, =, 38, .]
Parsing [sent. 2 len. 36]: [-LRB-, a, -RRB-, A, B, C, A, 2, 5, 7, 35, ×, ×, =, ∴, A, :, D, =, 35, :, 48, =, ×, ×, =, B, C, D, D, 3, 4, 8, 48, 39, .]
Parsing [sent. 3 len. 44]: [-LRB-, d, -RRB-, -LRB-, 2, +, 3, -RRB-, 2, +, -LRB-, 2, −, 3, -RRB-, 2, 4, +, 3, +, 4, 3, +, 4, +, 3, −, 4, 3, =, 14, =, 4, −, 3, 2, 2, −, -LRB-, 3, -RRB-, 2, 40, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 84 words in 3 sentences (14.08 wds/sec; 0.50 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP Greatest))
    (VP (SYM =)
      (NP (CD 38)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(38-3, Greatest-1)',
                                                       'dep(38-3, =-2)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP B))
    (VP (VBZ C)
      (NP
        (NP
          (NP (DT A)
            (ADJP (CD 2) (CD 5))
            (ADJP
              (QP (CD 7) (CD 35)))
            (NN ×))
          (VP (VBN ×)
            (S
              (VP (SYM =)
                (NP (NNP ∴) (NNP A))))))
        (: :)
        (NP
          (NP (NNP D))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 35))))))
        (: :)
        (NP (CD 48)
          (ADJP
            (QP (CD =) (CD ×)))
          (NNP ×) (NNP =) (NNP B) (NNP C) (NNP D) (NNP D) (CD 3)
          (ADJP
            (QP (CD 4) (CD 8)))
          (NNS 48))
        (NP (CD 39))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'det(B-5, A-4)',
                                                       'nsubj(C-6, B-5)',
                                                       'det(×-12, A-7)',
                                                       'number(5-9, 2-8)',
                                                       'amod(×-12, 5-9)',
                                                       'number(35-11, 7-10)',
                                                       'num(×-12, 35-11)',
                                                       'dobj(C-6, ×-12)',
                                                       'iobj(C-6, ×-12)',
                                                       'partmod(×-12, ×-13)',
                                                       'dep(A-16, =-14)',
                                                       'nn(A-16, ∴-15)',
                                                       'ccomp(×-13, A-16)',
                                                       'dep(×-12, D-18)',
                                                       'dep(35-20, =-19)',
                                                       'rcmod(D-18, 35-20)',
                                                       'num(48-34, 48-22)',
                                                       'number(×-24, =-23)',
                                                       'num(48-34, ×-24)',
                                                       'nn(48-34, ×-25)',
                                                       'nn(48-34, =-26)',
                                                       'nn(48-34, B-27)',
                                                       'nn(48-34, C-28)',
                                                       'nn(48-34, D-29)',
                                                       'nn(48-34, D-30)',
                                                       'num(48-34, 3-31)',
                                                       'number(8-33, 4-32)',
                                                       'num(48-34, 8-33)',
                                                       'dep(×-12, 48-34)',
                                                       'dobj(C-6, 39-35)',
                                                       'dep(×-12, 39-35)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP
        (NP (-LRB- -LRB-) (NNP d) (-RRB- -RRB-))
        (-LRB- -LRB-)
        (NP (CD 2) (NNP +) (CD 3))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP
            (QP (CD 2) (CD +)))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (CD 2) (NNS −))
              (NP (CD 3)))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2) (CD 4) (CD +) (CD 3) (CD +) (CD 4) (CD 3) (CD +) (CD 4) (NNP +) (NNP 3))
          (VP (VBG −)
            (S
              (NP
                (QP (CD 4) (CD 3)))
              (VP (SYM =)
                (NP (CD 14))))))))
    (VP (VBD =)
      (NP
        (NP (CD 4) (JJ −) (CD 3)
          (ADJP
            (QP (CD 2) (CD 2)))
          (NNS −))
        (PRN (-LRB- -LRB-)
          (NP (CD 3))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 2) (CD 40))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(=-32, d-2)',
                                                       'num(+-6, 2-5)',
                                                       'dep(d-2, +-6)',
                                                       'num(+-6, 3-7)',
                                                       'number(+-10, 2-9)',
                                                       'prep(d-2, +-10)',
                                                       'num(−-13, 2-12)',
                                                       'dep(+-10, −-13)',
                                                       'dep(−-13, 3-14)',
                                                       'num(3-26, 2-16)',
                                                       'num(3-26, 4-17)',
                                                       'num(3-26, +-18)',
                                                       'num(3-26, 3-19)',
                                                       'num(3-26, +-20)',
                                                       'num(3-26, 4-21)',
                                                       'num(3-26, 3-22)',
                                                       'num(3-26, +-23)',
                                                       'num(3-26, 4-24)',
                                                       'nn(3-26, +-25)',
                                                       'dep(+-10, 3-26)',
                                                       'partmod(3-26, −-27)',
                                                       'number(3-29, 4-28)',
                                                       'nsubj(14-31, 3-29)',
                                                       'dep(14-31, =-30)',
                                                       'ccomp(−-27, 14-31)',
                                                       'num(−-38, 4-33)',
                                                       'amod(−-38, −-34)',
                                                       'num(−-38, 3-35)',
                                                       'number(2-37, 2-36)',
                                                       'num(−-38, 2-37)',
                                                       'iobj(=-32, −-38)',
                                                       'appos(−-38, 3-40)',
                                                       'number(40-43, 2-42)',
                                                       'dobj(=-32, 40-43)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (NNP Greatest))
    (VP (SYM =)
      (NP (CD 38)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP B))
    (VP (VBZ C)
      (NP
        (NP
          (NP (DT A)
            (ADJP (CD 2) (CD 5))
            (ADJP
              (QP (CD 7) (CD 35)))
            (NN ×))
          (VP (VBN ×)
            (S
              (VP (SYM =)
                (NP (NNP ∴) (NNP A))))))
        (\\: \\:)
        (NP
          (NP (NNP D))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 35))))))
        (\\: \\:)
        (NP (CD 48)
          (ADJP
            (QP (CD =) (CD ×)))
          (NNP ×) (NNP =) (NNP B) (NNP C) (NNP D) (NNP D) (CD 3)
          (ADJP
            (QP (CD 4) (CD 8)))
          (NNS 48))
        (NP (CD 39))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP
        (NP (-LRB- -LRB-) (NNP d) (-RRB- -RRB-))
        (-LRB- -LRB-)
        (NP (CD 2) (NNP +) (CD 3))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP
            (QP (CD 2) (CD +)))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (CD 2) (NNS −))
              (NP (CD 3)))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2) (CD 4) (CD +) (CD 3) (CD +) (CD 4) (CD 3) (CD +) (CD 4) (NNP +) (NNP 3))
          (VP (VBG −)
            (S
              (NP
                (QP (CD 4) (CD 3)))
              (VP (SYM =)
                (NP (CD 14))))))))
    (VP (VBD =)
      (NP
        (NP (CD 4) (JJ −) (CD 3)
          (ADJP
            (QP (CD 2) (CD 2)))
          (NNS −))
        (PRN (-LRB- -LRB-)
          (NP (CD 3))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 2) (CD 40))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP Greatest))
    (VP (SYM =)
      (NP (CD 38)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP Greatest))
    (VP (SYM =)
      (NP (CD 38))))))
'
        };
Submitting expect

(GREATEST = 38)


NIL
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP B))
    (VP (VBZ C)
      (NP
        (NP
          (NP (DT A)
            (ADJP (CD 2) (CD 5))
            (ADJP
              (QP (CD 7) (CD 35)))
            (NN ×))
          (VP (VBN ×)
            (S
              (VP (SYM =)
                (NP (NNP ∴) (NNP A))))))
        (\\: \\:)
        (NP
          (NP (NNP D))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 35))))))
        (\\: \\:)
        (NP (CD 48)
          (ADJP
            (QP (CD =) (CD ×)))
          (NNP ×) (NNP =) (NNP B) (NNP C) (NNP D) (NNP D) (CD 3)
          (ADJP
            (QP (CD 4) (CD 8)))
          (NNS 48))
        (NP (CD 39))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP B))
    (VP (VBZ C)
      (NP
        (NP
          (NP (DT A)
            (ADJP (CD 2) (CD 5))
            (ADJP
              (QP (CD 7) (CD 35)))
            (NN ×))
          (VP (VBN ×)
            (S
              (VP (SYM =)
                (NP (NNP ∴) (NNP A))))))
        (\\: \\:)
        (NP
          (NP (NNP D))
          (SBAR
            (S
              (VP (SYM =)
                (NP (CD 35))))))
        (\\: \\:)
        (NP (CD 48)
          (ADJP
            (QP (CD =) (CD ×)))
          (NNP ×) (NNP =) (NNP B) (NNP C) (NNP D) (NNP D) (CD 3)
          (ADJP
            (QP (CD 4) (CD 8)))
          (NNS 48))
        (NP (CD 39)))))))
'
        };
Submitting expect

*** - GET: 48 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 48 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP
        (NP (-LRB- -LRB-) (NNP d) (-RRB- -RRB-))
        (-LRB- -LRB-)
        (NP (CD 2) (NNP +) (CD 3))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP
            (QP (CD 2) (CD +)))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (CD 2) (NNS −))
              (NP (CD 3)))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2) (CD 4) (CD +) (CD 3) (CD +) (CD 4) (CD 3) (CD +) (CD 4) (NNP +) (NNP 3))
          (VP (VBG −)
            (S
              (NP
                (QP (CD 4) (CD 3)))
              (VP (SYM =)
                (NP (CD 14))))))))
    (VP (VBD =)
      (NP
        (NP (CD 4) (JJ −) (CD 3)
          (ADJP
            (QP (CD 2) (CD 2)))
          (NNS −))
        (PRN (-LRB- -LRB-)
          (NP (CD 3))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 2) (CD 40))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP
        (NP (-LRB- -LRB-) (NNP d) (-RRB- -RRB-))
        (-LRB- -LRB-)
        (NP (CD 2) (NNP +) (CD 3))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP
            (QP (CD 2) (CD +)))
          (PRN (-LRB- -LRB-)
            (NP
              (NP (CD 2) (NNS −))
              (NP (CD 3)))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2) (CD 4) (CD +) (CD 3) (CD +) (CD 4) (CD 3) (CD +) (CD 4) (NNP +) (NNP 3))
          (VP (VBG −)
            (S
              (NP
                (QP (CD 4) (CD 3)))
              (VP (SYM =)
                (NP (CD 14))))))))
    (VP (VBD =)
      (NP
        (NP (CD 4) (JJ −) (CD 3)
          (ADJP
            (QP (CD 2) (CD 2)))
          (NNS −))
        (PRN (-LRB- -LRB-)
          (NP (CD 3))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 2) (CD 40)))))))
'
        };
Submitting expect

*** - GET: 3 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - GET: 3 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(d) A 25 C 30 B C A = B = ⇒ 10 = = 100 100 5 4 5 3 ::6:x 2 28.',
                       '(a) × 14400 = Rs 9600 3 Remaining = Rs 4800 or A : B : C = Ratio of profit of A B C 6500 : 9100 : 5200 = 5 : 7 : 4 A’s share = 7 × 4800 = Rs 2100 16 C’s share = 4 × 4800 = Rs 1200 16 41.',
                       '(c) He served for 5 × 4800 = Rs 1500 16 B’s share = 0.16 A.T.S.10 : 4 : 5 = 10 : 12 : 15 3 4 th of his life time 7 3 of his life time = 24 7 7 ∴ He lived for 24 × 3 = 56 years 42.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 30]: [-LRB-, d, -RRB-, A, 25, C, 30, B, C, A, =, B, =, ⇒, 10, =, =, 100, 100, 5, 4, 5, 3, :, :6, :, x, 2, 28, .]
Parsing [sent. 2 len. 62]: [-LRB-, a, -RRB-, ×, 14400, =, Rs, 9600, 3, Remaining, =, Rs, 4800, or, A, :, B, :, C, =, Ratio, of, profit, of, A, B, C, 6500, :, 9100, :, 5200, =, 5, :, 7, :, 4, A, 's, share, =, 7, ×, 4800, =, Rs, 2100, 16, C, 's, share, =, 4, ×, 4800, =, Rs, 1200, 16, 41, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 3 len. 59]: [-LRB-, c, -RRB-, He, served, for, 5, ×, 4800, =, Rs, 1500, 16, B, 's, share, =, 0.16, A.T.S., 10, :, 4, :, 5, =, 10, :, 12, :, 15, 3, 4, th, of, his, life, time, 7, 3, of, his, life, time, =, 24, 7, 7, ∴, He, lived, for, 24, ×, 3, =, 56, years, 42, .]
Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 151 words in 3 sentences (24.80 wds/sec; 0.49 sents/sec).
  2 sentences were not parsed:
    2 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (DT A) (CD 25) (NNP C) (CD 30) (NNP B) (NNP C) (NN A))
    (VP (VBP =)
      (NP
        (NP (NNP B) (NNP =) (NNP ⇒) (CD 10) (NNP =))
        (S
          (VP (SYM =)
            (NP (CD 100) (CD 100)))))
      (FRAG
        (NP
          (NP (CD 5) (CD 4))
          (NP (CD 5) (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD \\:6))
          (\\: \\:)
          (NP
            (NP (SYM x))
            (NP
              (QP (CD 2) (CD 28)))))))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
Sentence skipped: no PCFG fallback.
SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (DT A) (CD 25) (NNP C) (CD 30) (NNP B) (NNP C) (NN A))
    (VP (VBP =)
      (NP
        (NP (NNP B) (NNP =) (NNP ⇒) (CD 10) (NNP =))
        (S
          (VP (SYM =)
            (NP (CD 100) (CD 100)))))
      (FRAG
        (NP
          (NP (CD 5) (CD 4))
          (NP (CD 5) (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD \\:6))
          (\\: \\:)
          (NP
            (NP (SYM x))
            (NP
              (QP (CD 2) (CD 28)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
    (NP (DT A) (CD 25) (NNP C) (CD 30) (NNP B) (NNP C) (NN A))
    (VP (VBP =)
      (NP
        (NP (NNP B) (NNP =) (NNP ⇒) (CD 10) (NNP =))
        (S
          (VP (SYM =)
            (NP (CD 100) (CD 100)))))
      (FRAG
        (NP
          (NP (CD 5) (CD 4))
          (NP (CD 5) (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD \\:6))
          (\\: \\:)
          (NP
            (NP (SYM x))
            (NP
              (QP (CD 2) (CD 28))))))))))
'
        };
Submitting expect

(-LRB- D -RRB- A 25 C 30 B C A = B = ⇒ 10 = = 100 100 5 4 5 3 : :6 : X 2 28)

 SOME_NUMBER_OF A MAY = A B_=_⇒_10_=[PERSON??].
 A C_30_B_C[PERSON??] MAY HAVE AN A.

((:I (:Q SOME-NUMBER-OF A.N) =.V (:Q DET B_=_⇒_10_=.NAME)) (:I (:Q DET C_30_B_C.NAME) HAVE.V (:Q DET A.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- D -RRB- A 25 C 30 B C A = B = ⇒ 10 = = 100 100 5 4 5 3 : :6 : X 2 28)

 SOME_NUMBER_OF A MAY = A B_=_⇒_10_=[PERSON??].
 A C_30_B_C[PERSON??] MAY HAVE AN A.

((:I (:Q SOME-NUMBER-OF A.N) =.V (:Q DET B_=_⇒_10_=.NAME)) (:I (:Q DET C_30_B_C.NAME) HAVE.V (:Q DET A.N)))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) c a b = = = k ∴ a = 2k, b = 5k, c = 8k 8 2 5 438 s DECEMBER 2001 s THE COMPETITION MASTER OBJECTIVE-TYPE QUESTIONS a − b + c 2k − 5k + 8k = =1 b 5k 43.',
                       '(a) (n – 3)2 – n2 = (n – 3 – n) (n – 3 + n) = – 3 (2n – 3) = 3(3 –2n) which is divisible by 3 – 2n 44.',
                       '(b) (1 + 2 + 3 )2 – 2 3 – 2 6 – 2 2 = 1+2 + 3 + 2 2 + 2 6 + 2 3 – 2 3 –2 6 – 2 2 = 6 (a + b + c)2 = a2 + b2 + c2 + 2ab + 2bc + 2ca 45.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 52]: [-LRB-, a, -RRB-, c, a, b, =, =, =, k, ∴, a, =, 2k, ,, b, =, 5k, ,, c, =, 8k, 8, 2, 5, 438, s, DECEMBER, 2001, s, THE, COMPETITION, MASTER, OBJECTIVE-TYPE, QUESTIONS, a, −, b, +, c, 2k, −, 5k, +, 8k, =, =, 1, b, 5k, 43, .]
Parsing [sent. 2 len. 50]: [-LRB-, a, -RRB-, -LRB-, n, --, 3, -RRB-, 2, --, n2, =, -LRB-, n, --, 3, --, n, -RRB-, -LRB-, n, --, 3, +, n, -RRB-, =, --, 3, -LRB-, 2n, --, 3, -RRB-, =, 3, -LRB-, 3, --, 2n, -RRB-, which, is, divisible, by, 3, --, 2n, 44, .]
Parsing [sent. 3 len. 67]: [-LRB-, b, -RRB-, -LRB-, 1, +, 2, +, 3, -RRB-, 2, --, 2, 3, --, 2, 6, --, 2, 2, =, 1, +2, +, 3, +, 2, 2, +, 2, 6, +, 2, 3, --, 2, 3, --, 2, 6, --, 2, 2, =, 6, -LRB-, a, +, b, +, c, -RRB-, 2, =, a2, +, b2, +, c2, +, 2ab, +, 2bc, +, 2ca, 45, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 169 words in 3 sentences (12.23 wds/sec; 0.22 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (SBAR
      (X (SYM c))
      (S
        (NP (DT a) (NNP b) (NNP =) (NNP =) (NNP =) (NN k))
        (VP (VBZ ∴)
          (NP (DT a) (JJ =) (NN 2k)))))
    (, ,)
    (SBAR
      (X (SYM b))
      (S
        (S
          (VP (SYM =)
            (NP (CD 5k))))
        (, ,)
        (X (SYM c))
        (NP (NNP =) (JJ 8k) (CD 8) (CD 2) (CD 5) (CD 438) (NNP s) (NNP DECEMBER) (NN 2001))
        (VP (VBZ s)
          (NP
            (NP
              (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NNP OBJECTIVE-TYPE) (NNP QUESTIONS))
              (NP (DT a) (NN −)))
            (X (SYM b))))))
    (NP (NNP +) (SYM c) (NNP 2k) (NNPS −) (NNP 5k))
    (VP (VBP +)
      (NP
        (NP (JJ 8k) (NNS =))
        (S
          (VP (SYM =)
            (NP (CD 1)))))
      (FRAG
        (X (SYM b))
        (NP (CD 5k) (CD 43))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dep(∴-11, c-4)',
                                                       'det(k-10, a-5)',
                                                       'nn(k-10, b-6)',
                                                       'nn(k-10, =-7)',
                                                       'nn(k-10, =-8)',
                                                       'nn(k-10, =-9)',
                                                       'nsubj(∴-11, k-10)',
                                                       'dep(+-44, ∴-11)',
                                                       'det(2k-14, a-12)',
                                                       'amod(2k-14, =-13)',
                                                       'dobj(∴-11, 2k-14)',
                                                       'dep(QUESTIONS-35, b-16)',
                                                       'dep(5k-18, =-17)',
                                                       'ccomp(QUESTIONS-35, 5k-18)',
                                                       'dep(QUESTIONS-35, c-20)',
                                                       'nn(2001-29, =-21)',
                                                       'amod(2001-29, 8k-22)',
                                                       'num(2001-29, 8-23)',
                                                       'num(2001-29, 2-24)',
                                                       'num(2001-29, 5-25)',
                                                       'num(2001-29, 438-26)',
                                                       'nn(2001-29, s-27)',
                                                       'nn(2001-29, DECEMBER-28)',
                                                       'nsubj(QUESTIONS-35, 2001-29)',
                                                       'cop(QUESTIONS-35, s-30)',
                                                       'det(QUESTIONS-35, THE-31)',
                                                       'nn(QUESTIONS-35, COMPETITION-32)',
                                                       'nn(QUESTIONS-35, MASTER-33)',
                                                       'nn(QUESTIONS-35, OBJECTIVE-TYPE-34)',
                                                       'dep(+-44, QUESTIONS-35)',
                                                       'det(−-37, a-36)',
                                                       'dep(QUESTIONS-35, −-37)',
                                                       'dep(QUESTIONS-35, b-38)',
                                                       'nn(5k-43, +-39)',
                                                       'dep(5k-43, c-40)',
                                                       'nn(5k-43, 2k-41)',
                                                       'nn(5k-43, −-42)',
                                                       'nsubj(+-44, 5k-43)',
                                                       'amod(=-46, 8k-45)',
                                                       'dobj(+-44, =-46)',
                                                       'dep(1-48, =-47)',
                                                       'dep(=-46, 1-48)',
                                                       'dep(43-51, b-49)',
                                                       'num(43-51, 5k-50)',
                                                       'dep(+-44, 43-51)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP
      (NP
        (NP
          (NP
            (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NN n))
                (: --)
                (NP (CD 3)))
              (-RRB- -RRB-)))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (PRN (: --)
                (ADVP
                  (NP
                    (NP (JJ n2) (NNS =))
                    (PRN (-LRB- -LRB-)
                      (NP (NN n))
                      (: --)
                      (NP
                        (NP (CD 3))
                        (: --)
                        (NP (NN n)))
                      (-RRB- -RRB-))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NN n))
                        (: --)
                        (NP (CD 3) (JJ +) (NN n)))
                      (-RRB- -RRB-)))
                  (RB =))
                (: --)))
            (S
              (NP
                (NP (CD 3))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (CD 2n))
                    (: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-)))
              (VP (SYM =)
                (NP (CD 3))))))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (CD 3))
            (: --)
            (NP (CD 2n)))
          (-RRB- -RRB-)))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBZ is)
            (ADJP (JJ divisible)
              (PP (IN by)
                (NP (CD 3))))))))
    (: --)
    (NP
      (NP (CD 2n))
      (NP (CD 44)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(divisible-44, a-2)',
                                                       'dep(a-2, n-5)',
                                                       'dep(n-5, 3-7)',
                                                       'dobj(3-36, 2-9)',
                                                       'rel(3-36, 2-9)',
                                                       'amod(=-12, n2-11)',
                                                       'npadvmod(=-27, =-12)',
                                                       'dep(=-12, n-14)',
                                                       'dep(n-14, 3-16)',
                                                       'dep(3-16, n-18)',
                                                       'dep(=-12, n-21)',
                                                       'num(n-25, 3-23)',
                                                       'amod(n-25, +-24)',
                                                       'dep(n-21, n-25)',
                                                       'dep(2-9, =-27)',
                                                       'nsubj(3-36, 3-29)',
                                                       'dep(3-29, 2n-31)',
                                                       'dep(2n-31, 3-33)',
                                                       'dep(3-36, =-35)',
                                                       'rcmod(a-2, 3-36)',
                                                       'dep(a-2, 3-38)',
                                                       'dep(3-38, 2n-40)',
                                                       'cop(divisible-44, is-43)',
                                                       'rcmod(a-2, divisible-44)',
                                                       'prep_by(divisible-44, 3-46)',
                                                       'dep(a-2, 2n-48)',
                                                       'dep(2n-48, 44-49)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
',
                                            'Sent' => 'Sentence skipped: no PCFG fallback.',
                                            'Rel' => []
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (SBAR
      (X (SYM c))
      (S
        (NP (DT a) (NNP b) (NNP =) (NNP =) (NNP =) (NN k))
        (VP (VBZ ∴)
          (NP (DT a) (JJ =) (NN 2k)))))
    (\\, \\,)
    (SBAR
      (X (SYM b))
      (S
        (S
          (VP (SYM =)
            (NP (CD 5k))))
        (\\, \\,)
        (X (SYM c))
        (NP (NNP =) (JJ 8k) (CD 8) (CD 2) (CD 5) (CD 438) (NNP s) (NNP DECEMBER) (NN 2001))
        (VP (VBZ s)
          (NP
            (NP
              (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NNP OBJECTIVE-TYPE) (NNP QUESTIONS))
              (NP (DT a) (NN −)))
            (X (SYM b))))))
    (NP (NNP +) (SYM c) (NNP 2k) (NNPS −) (NNP 5k))
    (VP (VBP +)
      (NP
        (NP (JJ 8k) (NNS =))
        (S
          (VP (SYM =)
            (NP (CD 1)))))
      (FRAG
        (X (SYM b))
        (NP (CD 5k) (CD 43))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP
      (NP
        (NP
          (NP
            (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NN n))
                (\\: --)
                (NP (CD 3)))
              (-RRB- -RRB-)))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (PRN (\\: --)
                (ADVP
                  (NP
                    (NP (JJ n2) (NNS =))
                    (PRN (-LRB- -LRB-)
                      (NP (NN n))
                      (\\: --)
                      (NP
                        (NP (CD 3))
                        (\\: --)
                        (NP (NN n)))
                      (-RRB- -RRB-))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NN n))
                        (\\: --)
                        (NP (CD 3) (JJ +) (NN n)))
                      (-RRB- -RRB-)))
                  (RB =))
                (\\: --)))
            (S
              (NP
                (NP (CD 3))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (CD 2n))
                    (\\: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-)))
              (VP (SYM =)
                (NP (CD 3))))))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (CD 3))
            (\\: --)
            (NP (CD 2n)))
          (-RRB- -RRB-)))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBZ is)
            (ADJP (JJ divisible)
              (PP (IN by)
                (NP (CD 3))))))))
    (\\: --)
    (NP
      (NP (CD 2n))
      (NP (CD 44)))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (SBAR
      (X (SYM c))
      (S
        (NP (DT a) (NNP b) (NNP =) (NNP =) (NNP =) (NN k))
        (VP (VBZ ∴)
          (NP (DT a) (JJ =) (NN 2k)))))
    (\\, \\,)
    (SBAR
      (X (SYM b))
      (S
        (S
          (VP (SYM =)
            (NP (CD 5k))))
        (\\, \\,)
        (X (SYM c))
        (NP (NNP =) (JJ 8k) (CD 8) (CD 2) (CD 5) (CD 438) (NNP s) (NNP DECEMBER) (NN 2001))
        (VP (VBZ s)
          (NP
            (NP
              (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NNP OBJECTIVE-TYPE) (NNP QUESTIONS))
              (NP (DT a) (NN −)))
            (X (SYM b))))))
    (NP (NNP +) (SYM c) (NNP 2k) (NNPS −) (NNP 5k))
    (VP (VBP +)
      (NP
        (NP (JJ 8k) (NNS =))
        (S
          (VP (SYM =)
            (NP (CD 1)))))
      (FRAG
        (X (SYM b))
        (NP (CD 5k) (CD 43))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (SBAR
      (X (SYM c))
      (S
        (NP (DT a) (NNP b) (NNP =) (NNP =) (NNP =) (NN k))
        (VP (VBZ ∴)
          (NP (DT a) (JJ =) (NN 2k)))))
    (\\, \\,)
    (SBAR
      (X (SYM b))
      (S
        (S
          (VP (SYM =)
            (NP (CD 5k))))
        (\\, \\,)
        (X (SYM c))
        (NP (NNP =) (JJ 8k) (CD 8) (CD 2) (CD 5) (CD 438) (NNP s) (NNP DECEMBER) (NN 2001))
        (VP (VBZ s)
          (NP
            (NP
              (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NNP OBJECTIVE-TYPE) (NNP QUESTIONS))
              (NP (DT a) (NN −)))
            (X (SYM b))))))
    (NP (NNP +) (SYM c) (NNP 2k) (NNPS −) (NNP 5k))
    (VP (VBP +)
      (NP
        (NP (JJ 8k) (NNS =))
        (S
          (VP (SYM =)
            (NP (CD 1)))))
      (FRAG
        (X (SYM b))
        (NP (CD 5k) (CD 43)))))))
'
        };
Submitting expect

*** - GET: 2001 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 2001 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (NP
        (NP
          (NP
            (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NN n))
                (\\: --)
                (NP (CD 3)))
              (-RRB- -RRB-)))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (PRN (\\: --)
                (ADVP
                  (NP
                    (NP (JJ n2) (NNS =))
                    (PRN (-LRB- -LRB-)
                      (NP (NN n))
                      (\\: --)
                      (NP
                        (NP (CD 3))
                        (\\: --)
                        (NP (NN n)))
                      (-RRB- -RRB-))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NN n))
                        (\\: --)
                        (NP (CD 3) (JJ +) (NN n)))
                      (-RRB- -RRB-)))
                  (RB =))
                (\\: --)))
            (S
              (NP
                (NP (CD 3))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (CD 2n))
                    (\\: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-)))
              (VP (SYM =)
                (NP (CD 3))))))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (CD 3))
            (\\: --)
            (NP (CD 2n)))
          (-RRB- -RRB-)))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBZ is)
            (ADJP (JJ divisible)
              (PP (IN by)
                (NP (CD 3))))))))
    (\\: --)
    (NP
      (NP (CD 2n))
      (NP (CD 44)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (NP
        (NP
          (NP
            (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (NN n))
                (\\: --)
                (NP (CD 3)))
              (-RRB- -RRB-)))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (PRN (\\: --)
                (ADVP
                  (NP
                    (NP (JJ n2) (NNS =))
                    (PRN (-LRB- -LRB-)
                      (NP (NN n))
                      (\\: --)
                      (NP
                        (NP (CD 3))
                        (\\: --)
                        (NP (NN n)))
                      (-RRB- -RRB-))
                    (PRN (-LRB- -LRB-)
                      (NP
                        (NP (NN n))
                        (\\: --)
                        (NP (CD 3) (JJ +) (NN n)))
                      (-RRB- -RRB-)))
                  (RB =))
                (\\: --)))
            (S
              (NP
                (NP (CD 3))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (CD 2n))
                    (\\: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-)))
              (VP (SYM =)
                (NP (CD 3))))))
        (PRN (-LRB- -LRB-)
          (NP
            (NP (CD 3))
            (\\: --)
            (NP (CD 2n)))
          (-RRB- -RRB-)))
      (SBAR
        (WHNP (WDT which))
        (S
          (VP (VBZ is)
            (ADJP (JJ divisible)
              (PP (IN by)
                (NP (CD 3))))))))
    (\\: --)
    (NP
      (NP (CD 2n))
      (NP (CD 44))))))
'
        };
Submitting expect

(-LRB- A -RRB- -LRB- N -- 3 -RRB- 2 -- N2 = -LRB- N -- 3 -- N -RRB- -LRB- N -- 3 + N -RRB- = -- 3 -LRB- 2N -- 3 -RRB- = 3 -LRB- 3 -- 2N -RRB- WHICH
 IS DIVISIBLE BY 3 -- 2N 44)

 = CAN BE N2.
 A N CAN BE +.

((:I (:Q DET (:F PLUR =.N)) N2.A) (:I (:Q DET N.N) +.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- A -RRB- -LRB- N -- 3 -RRB- 2 -- N2 = -LRB- N -- 3 -- N -RRB- -LRB- N -- 3 + N -RRB- = -- 3 -LRB- 2N -- 3 -RRB- = 3 -LRB- 3 -- 2N -RRB- WHICH
 IS DIVISIBLE BY 3 -- 2N 44)

 = CAN BE N2.
 A N CAN BE +.

((:I (:Q DET (:F PLUR =.N)) N2.A) (:I (:Q DET N.N) +.A))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(b) 8400 – 2400 = Rs 6000 Ratio of profits of Ram, Rahim and Ratan = Rs 5000 : 4000 : 3000 = 5 : 4 : 3 Ratan’s share in profit = 6000 × 3 = Rs 1500 5+4+3 Ratan’s total income = 1500 + 2400 (For supervision) = Rs 3900 46.',
                       '(c) 47.',
                       '(b) Let the no.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 63]: [-LRB-, b, -RRB-, 8400, --, 2400, =, Rs, 6000, Ratio, of, profits, of, Ram, ,, Rahim, and, Ratan, =, Rs, 5000, :, 4000, :, 3000, =, 5, :, 4, :, 3, Ratan, 's, share, in, profit, =, 6000, ×, 3, =, Rs, 1500, 5, +4, +3, Ratan, 's, total, income, =, 1500, +, 2400, -LRB-, For, supervision, -RRB-, =, Rs, 3900, 46, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 2 len. 5]: [-LRB-, c, -RRB-, 47, .]
Parsing [sent. 3 len. 6]: [-LRB-, b, -RRB-, Let, the, no.]
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 74 words in 3 sentences (29.66 wds/sec; 1.20 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
(ROOT
  (S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB 47))
    (. .)))'
        };
$VAR1 = {
          'Tree' => '((VP
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VB Let)
    (NP (DT the))
    (S
      (VP (VB no\\.)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((VP
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VB Let)
    (NP (DT the))
    (S
      (VP (VB no\\.)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((VP
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VB Let)
    (NP (DT the))
    (S
      (VP (VB no\\.))))))))
'
        };
Submitting expect

(-LRB- B -RRB- LET THE NO.)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       'of girls and boys be x and y respectively 6x + 3y = 42 ...',
                       '(i) 3x + 5y = 42 ...',
                       '(ii) Solving (i) and (ii), we get x = 4 48.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 43]: [of, girls, and, boys, be, x, and, y, respectively, 6x, +, 3y, =, 42, ..., -LRB-, i, -RRB-, 3x, +, 5y, =, 42, ..., -LRB-, ii, -RRB-, Solving, -LRB-, i, -RRB-, and, -LRB-, ii, -RRB-, ,, we, get, x, =, 4, 48, .]
Parsed file: /tmp/stanfordparser.txt [1 sentences].
Parsed 43 words in 1 sentences (10.64 wds/sec; 0.25 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (S
      (PP (IN of)
        (NP (NNS girls)
          (CC and)
          (NNS boys)))
      (VP
        (VP (VB be)
          (ADJP (JJ x)))
        (CC and)
        (VP (VB y)
          (ADVP (RB respectively))
          (NP
            (NP (JJ 6x) (JJ +) (NNS 3y))
            (S
              (VP (SYM =)
                (NP (CD 42)))))
          (\\: \\.\\.\\.)
          (PRN (-LRB- -LRB-)
            (NP (NNP i))
            (-RRB- -RRB-))
          (NP
            (NP (JJ 3x) (JJ +) (NNS 5y))
            (S
              (VP (SYM =)
                (NP (CD 42)))))
          (\\: \\.\\.\\.)
          (PRN (-LRB- -LRB-)
            (NP (NN ii))
            (-RRB- -RRB-))
          (S
            (VP (VBG Solving)
              (NP
                (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                (CC and)
                (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))))))))
    (\\, \\,)
    (NP (PRP we))
    (VP (VBP get)
      (S
        (NP (SYM x))
        (VP (SYM =)
          (NP (CD 4) (CD 48)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (PP (IN of)
        (NP (NNS girls)
          (CC and)
          (NNS boys)))
      (VP
        (VP (VB be)
          (ADJP (JJ x)))
        (CC and)
        (VP (VB y)
          (ADVP (RB respectively))
          (NP
            (NP (JJ 6x) (JJ +) (NNS 3y))
            (S
              (VP (SYM =)
                (NP (CD 42)))))
          (\\: \\.\\.\\.)
          (PRN (-LRB- -LRB-)
            (NP (NNP i))
            (-RRB- -RRB-))
          (NP
            (NP (JJ 3x) (JJ +) (NNS 5y))
            (S
              (VP (SYM =)
                (NP (CD 42)))))
          (\\: \\.\\.\\.)
          (PRN (-LRB- -LRB-)
            (NP (NN ii))
            (-RRB- -RRB-))
          (S
            (VP (VBG Solving)
              (NP
                (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                (CC and)
                (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))))))))
    (\\, \\,)
    (NP (PRP we))
    (VP (VBP get)
      (S
        (NP (SYM x))
        (VP (SYM =)
          (NP (CD 4) (CD 48)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (PP (IN of)
        (NP (NNS girls)
          (CC and)
          (NNS boys)))
      (VP
        (VP (VB be)
          (ADJP (JJ x)))
        (CC and)
        (VP (VB y)
          (ADVP (RB respectively))
          (NP
            (NP (JJ 6x) (JJ +) (NNS 3y))
            (S
              (VP (SYM =)
                (NP (CD 42)))))
          (\\: \\.\\.\\.)
          (PRN (-LRB- -LRB-)
            (NP (NNP i))
            (-RRB- -RRB-))
          (NP
            (NP (JJ 3x) (JJ +) (NNS 5y))
            (S
              (VP (SYM =)
                (NP (CD 42)))))
          (\\: \\.\\.\\.)
          (PRN (-LRB- -LRB-)
            (NP (NN ii))
            (-RRB- -RRB-))
          (S
            (VP (VBG Solving)
              (NP
                (NP (-LRB- -LRB-) (NNP i) (-RRB- -RRB-))
                (CC and)
                (NP (-LRB- -LRB-) (NN ii) (-RRB- -RRB-))))))))
    (\\, \\,)
    (NP (PRP we))
    (VP (VBP get)
      (S
        (NP (SYM x))
        (VP (SYM =)
          (NP (CD 4) (CD 48))))))))
'
        };
Submitting expect

(OF GIRLS AND BOYS BE X AND Y RESPECTIVELY 6X + 3Y = 42 ... -LRB- I -RRB- 3X + 5Y = 42 ... -LRB- II -RRB- SOLVING -LRB- I -RRB- AND -LRB- II -RRB-
 , WE GET X = 4 48)

 3Y CAN BE 6X.
 3Y CAN BE +.
 5Y CAN BE 3X.
 5Y CAN BE +.

((:I (:Q DET (:F PLUR |\|3Y\|.N|)) |\|6X\|.A|) (:I (:Q DET (:F PLUR |\|3Y\|.N|)) +.A) (:I (:Q DET (:F PLUR |\|5Y\|.N|)) |\|3X\|.A|)
 (:I (:Q DET (:F PLUR |\|5Y\|.N|)) +.A))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(OF GIRLS AND BOYS BE X AND Y RESPECTIVELY 6X + 3Y = 42 ... -LRB- I -RRB- 3X + 5Y = 42 ... -LRB- II -RRB- SOLVING -LRB- I -RRB- AND -LRB- II -RRB-
 , WE GET X = 4 48)

 3Y CAN BE 6X.
 3Y CAN BE +.
 5Y CAN BE 3X.
 5Y CAN BE +.

((:I (:Q DET (:F PLUR |\\|3Y\\|.N|)) |\\|6X\\|.A|) (:I (:Q DET (:F PLUR |\\|3Y\\|.N|)) +.A) (:I (:Q DET (:F PLUR |\\|5Y\\|.N|)) |\\|3X\\|.A|)
 (:I (:Q DET (:F PLUR |\\|5Y\\|.N|)) +.A))
______________________________________________________________________
[5]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) Zinc = ATS 5 × 16 = 10 kg 8 Copper = 6 kg 10 + x 2 = ⇒ x = 2 kg 6 1 49.',
                       '(c) Let the no.',
                       'of 10 Re coins be x x × 10 + (80 – x) × 5 = 600 ⇒ x = 40 50.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 31]: [-LRB-, a, -RRB-, Zinc, =, ATS, 5, ×, 16, =, 10, kg, 8, Copper, =, 6, kg, 10, +, x, 2, =, ⇒, x, =, 2, kg, 6, 1, 49, .]
Parsing [sent. 2 len. 31]: [-LRB-, c, -RRB-, Let, the, no., of, 10, Re, coins, be, x, x, ×, 10, +, -LRB-, 80, --, x, -RRB-, ×, 5, =, 600, ⇒, x, =, 40, 50, .]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 62 words in 2 sentences (12.41 wds/sec; 0.40 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (NNP Zinc) (NNP =) (NNP ATS))
      (SBAR
        (S
          (NP (CD 5) (NNP ×) (CD 16) (NNP =) (CD 10) (NN kg) (CD 8) (NN Copper) (CD =) (CD 6) (NN kg) (CD 10) (CD +) (NNP x) (CD 2) (NN =))
          (VP (VBZ ⇒)
            (S
              (NP (SYM x))
              (VP (SYM =)
                (NP (CD 2))))))))
    (VP (VBP kg)
      (NP
        (QP (CD 6) (CD 1))
        (CD 49)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB Let)
      (S
        (NP
          (NP (DT the) (NN no\\.))
          (PP (IN of)
            (NP (CD 10) (NNP Re) (NNS coins))))
        (VP (VB be)
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (NP
                  (NP (SYM x))
                  (VP (VBG ×)
                    (NP
                      (NP (CD 10) (NNS +))
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (CD 80))
                          (\\: --)
                          (NP (SYM x)))
                        (-RRB- -RRB-))
                      (ADJP (JJ ×)
                        (NP (CD 5))))
                    (S
                      (VP (SYM =)
                        (NP (CD 600) (JJ ⇒) (NNS x))))))
                (VP (SYM =)
                  (NP (CD 40) (CD 50)))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (NNP Zinc) (NNP =) (NNP ATS))
      (SBAR
        (S
          (NP (CD 5) (NNP ×) (CD 16) (NNP =) (CD 10) (NN kg) (CD 8) (NN Copper) (CD =) (CD 6) (NN kg) (CD 10) (CD +) (NNP x) (CD 2) (NN =))
          (VP (VBZ ⇒)
            (S
              (NP (SYM x))
              (VP (SYM =)
                (NP (CD 2))))))))
    (VP (VBP kg)
      (NP
        (QP (CD 6) (CD 1))
        (CD 49)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (NNP Zinc) (NNP =) (NNP ATS))
      (SBAR
        (S
          (NP (CD 5) (NNP ×) (CD 16) (NNP =) (CD 10) (NN kg) (CD 8) (NN Copper) (CD =) (CD 6) (NN kg) (CD 10) (CD +) (NNP x) (CD 2) (NN =))
          (VP (VBZ ⇒)
            (S
              (NP (SYM x))
              (VP (SYM =)
                (NP (CD 2))))))))
    (VP (VBP kg)
      (NP
        (QP (CD 6) (CD 1))
        (CD 49))))))
'
        };
Submitting expect

*** - STRING: argument 2 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [6]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 2 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB Let)
      (S
        (NP
          (NP (DT the) (NN no\\.))
          (PP (IN of)
            (NP (CD 10) (NNP Re) (NNS coins))))
        (VP (VB be)
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (NP
                  (NP (SYM x))
                  (VP (VBG ×)
                    (NP
                      (NP (CD 10) (NNS +))
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (CD 80))
                          (\\: --)
                          (NP (SYM x)))
                        (-RRB- -RRB-))
                      (ADJP (JJ ×)
                        (NP (CD 5))))
                    (S
                      (VP (SYM =)
                        (NP (CD 600) (JJ ⇒) (NNS x))))))
                (VP (SYM =)
                  (NP (CD 40) (CD 50)))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (VP (VB Let)
      (S
        (NP
          (NP (DT the) (NN no\\.))
          (PP (IN of)
            (NP (CD 10) (NNP Re) (NNS coins))))
        (VP (VB be)
          (NP
            (NP (SYM x))
            (SBAR
              (S
                (NP
                  (NP (SYM x))
                  (VP (VBG ×)
                    (NP
                      (NP (CD 10) (NNS +))
                      (PRN (-LRB- -LRB-)
                        (NP
                          (NP (CD 80))
                          (\\: --)
                          (NP (SYM x)))
                        (-RRB- -RRB-))
                      (ADJP (JJ ×)
                        (NP (CD 5))))
                    (S
                      (VP (SYM =)
                        (NP (CD 600) (JJ ⇒) (NNS x))))))
                (VP (SYM =)
                  (NP (CD 40) (CD 50))))))))))))
'
        };
Submitting expect

(-LRB- C -RRB- LET THE NO. OF 10 RE COINS BE X X × 10 + -LRB- 80 -- X -RRB- × 5 = 600 ⇒ X = 40 50)

 A RE[PERSON??] MAY HAVE COINS.
 X CAN BE ⇒.

(NIL (:I (:Q DET RE.NAME) HAVE.V (:Q DET (:F PLUR COIN.N))) (:I NIL ×.V (:Q SOME-NUMBER-OF (:F PLUR +.N))) (:I (:Q DET (:F PLUR X.N)) ⇒.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- C -RRB- LET THE NO. OF 10 RE COINS BE X X × 10 + -LRB- 80 -- X -RRB- × 5 = 600 ⇒ X = 40 50)

 A RE[PERSON??] MAY HAVE COINS.
 X CAN BE ⇒.

(NIL (:I (:Q DET RE.NAME) HAVE.V (:Q DET (:F PLUR COIN.N))) (:I NIL ×.V (:Q SOME-NUMBER-OF (:F PLUR +.N))) (:I (:Q DET (:F PLUR X.N)) ⇒.A))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) Speed = = 44 × D 66 = 3 = 44 km/hr T 2 1000 1 = 733 m/min 60 3 51.',
                       '(d) There are two series 5, 9, 13, ... and 13, 17, 21, ...',
                       'Each digit is obtained by adding 4 to the preceding term ∴ Reqd no.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 26]: [-LRB-, a, -RRB-, Speed, =, =, 44, ×, D, 66, =, 3, =, 44, km\/hr, T, 2, 1000, 1, =, 733, m\/min, 60, 3, 51, .]
Parsing [sent. 2 len. 36]: [-LRB-, d, -RRB-, There, are, two, series, 5, ,, 9, ,, 13, ,, ..., and, 13, ,, 17, ,, 21, ,, ..., Each, digit, is, obtained, by, adding, 4, to, the, preceding, term, ∴, Reqd, no.]
Parsed file: /tmp/stanfordparser.txt [2 sentences].
Parsed 62 words in 2 sentences (13.20 wds/sec; 0.43 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Speed)
      (S
        (NP (CD =) (NNP =) (CD 44) (CD ×) (NNP D) (CD 66) (NNP =) (CD 3) (NNP =) (CD 44) (CD km\\\\/hr) (NNP T) (CD 2) (CD 1000) (CD 1) (NNP =) (CD 733) (NN m\\\\/min))
        (NP
          (NP (CD 60))
          (ADJP (CD 3) (CD 51)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (EX There))
      (VP (VBP are)
        (NP
          (NP
            (NP (CD two) (NN series))
            (NP
              (NP (CD 5))
              (\\, \\,)
              (NP
                (NP (CD 9))
                (\\, \\,)
                (NP (CD 13)))
              (\\, \\,)))
          (\\: \\.\\.\\.)
          (CC and)
          (NP
            (NP (CD 13))
            (\\, \\,)
            (NP
              (NP (CD 17))
              (\\, \\,)
              (NP (CD 21))
              (\\, \\,))))))
    (\\: \\.\\.\\.)
    (S
      (NP (DT Each) (NN digit))
      (VP (VBZ is)
        (VP (VBN obtained)
          (PP (IN by)
            (S
              (VP (VBG adding)
                (NP (CD 4))
                (PP (TO to)
                  (NP (DT the) (VBG preceding) (NN term) (NN ∴) (NNP Reqd) (NNP no\\.)))))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Speed)
      (S
        (NP (CD =) (NNP =) (CD 44) (CD ×) (NNP D) (CD 66) (NNP =) (CD 3) (NNP =) (CD 44) (CD km\\\\/hr) (NNP T) (CD 2) (CD 1000) (CD 1) (NNP =) (CD 733) (NN m\\\\/min))
        (NP
          (NP (CD 60))
          (ADJP (CD 3) (CD 51)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Speed)
      (S
        (NP (CD =) (NNP =) (CD 44) (CD ×) (NNP D) (CD 66) (NNP =) (CD 3) (NNP =) (CD 44) (CD km\\\\/hr) (NNP T) (CD 2) (CD 1000) (CD 1) (NNP =) (CD 733) (NN m\\\\/min))
        (NP
          (NP (CD 60))
          (ADJP (CD 3) (CD 51))))))))
'
        };
Submitting expect

*** - STRING: argument 733 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 733 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (EX There))
      (VP (VBP are)
        (NP
          (NP
            (NP (CD two) (NN series))
            (NP
              (NP (CD 5))
              (\\, \\,)
              (NP
                (NP (CD 9))
                (\\, \\,)
                (NP (CD 13)))
              (\\, \\,)))
          (\\: \\.\\.\\.)
          (CC and)
          (NP
            (NP (CD 13))
            (\\, \\,)
            (NP
              (NP (CD 17))
              (\\, \\,)
              (NP (CD 21))
              (\\, \\,))))))
    (\\: \\.\\.\\.)
    (S
      (NP (DT Each) (NN digit))
      (VP (VBZ is)
        (VP (VBN obtained)
          (PP (IN by)
            (S
              (VP (VBG adding)
                (NP (CD 4))
                (PP (TO to)
                  (NP (DT the) (VBG preceding) (NN term) (NN ∴) (NNP Reqd) (NNP no\\.)))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (EX There))
      (VP (VBP are)
        (NP
          (NP
            (NP (CD two) (NN series))
            (NP
              (NP (CD 5))
              (\\, \\,)
              (NP
                (NP (CD 9))
                (\\, \\,)
                (NP (CD 13)))
              (\\, \\,)))
          (\\: \\.\\.\\.)
          (CC and)
          (NP
            (NP (CD 13))
            (\\, \\,)
            (NP
              (NP (CD 17))
              (\\, \\,)
              (NP (CD 21))
              (\\, \\,))))))
    (\\: \\.\\.\\.)
    (S
      (NP (DT Each) (NN digit))
      (VP (VBZ is)
        (VP (VBN obtained)
          (PP (IN by)
            (S
              (VP (VBG adding)
                (NP (CD 4))
                (PP (TO to)
                  (NP (DT the) (VBG preceding) (NN term) (NN ∴) (NNP Reqd) (NNP no\\.))))))))))))))
'
        };
Submitting expect

(-LRB- D -RRB- THERE ARE TWO SERIES 5 , 9 , 13 , ... AND 13 , 17 , 21 , ... EACH DIGIT IS OBTAINED BY ADDING 4 TO THE PRECEDING TERM ∴ REQD NO.)


((:I (:Q SOME-NUMBER-OF DIGIT.N) (:F BE.PASV OBTAIN.V) (:P BY.P (:F KA NIL))))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       '= 13 + 4 = 17 52.',
                       '(a) P[(1 + 5 2 P×5×2 ) – 1] – = Rs 2 ⇒ P = Rs 800 100 100 53.',
                       '(b) 2P = P(1 + ⇒1 + R 4 R 4 ) ⇒ (1 + ) =2 100 100 1 R = 24 100 1 n R n n 8 P = P (1 + ) ⇒ 8 = (2 4 ) ⇒ 23 = 2 4 100 n ∴ = 3 ⇒ n = 12 4 54.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 8]: [=, 13, +, 4, =, 17, 52, .]
Parsing [sent. 2 len. 32]: [-LRB-, a, -RRB-, P, -LRB-, -LRB-, 1, +, 5, 2, P, ×, 5, ×, 2, -RRB-, --, 1, -RRB-, --, =, Rs, 2, ⇒, P, =, Rs, 800, 100, 100, 53, .]
Parsing [sent. 3 len. 68]: [-LRB-, b, -RRB-, 2P, =, P, -LRB-, 1, +, ⇒, 1, +, R, 4, R, 4, -RRB-, ⇒, -LRB-, 1, +, -RRB-, =, 2, 100, 100, 1, R, =, 24, 100, 1, n, R, n, n, 8, P, =, P, -LRB-, 1, +, -RRB-, ⇒, 8, =, -LRB-, 2, 4, -RRB-, ⇒, 23, =, 2, 4, 100, n, ∴, =, 3, ⇒, n, =, 12, 4, 54, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 108 words in 3 sentences (24.12 wds/sec; 0.67 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (NNP =) (CD 13))
      (ADJP (JJ +)
        (NP (CD 4))))
    (VP (SYM =)
      (NP (CD 17) (CD 52)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(52-7, =-1)',
                                                       'num(=-1, 13-2)',
                                                       'amod(=-1, +-3)',
                                                       'dep(+-3, 4-4)',
                                                       'dep(52-7, =-5)',
                                                       'num(52-7, 17-6)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (NNP P))
        (-LRB- -LRB-)
        (SBAR
          (SBAR
            (S (-LRB- -LRB-)
              (NP (CD 1))
              (VP (VBZ +)
                (NP (CD 5)))))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (ADVP (RB P)))
            (SINV
              (VP (VBN ×)
                (PRN
                  (NP
                    (NP (CD 5) (NNS ×))
                    (NP (CD 2)))
                  (-RRB- -RRB-)))
              (: --)
              (NP (CD 1)))))
        (-RRB- -RRB-))
      (PRN (: --)
        (S
          (NP
            (NP (NNP =) (NNP Rs))
            (NP (CD 2)))
          (NP (NNP ⇒) (NNP P)))))
    (VP (VBZ =)
      (ADJP (JJ Rs)
        (NP
          (QP (CD 800) (CD 100))
          (QP (CD 100) (CD 53)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(=-26, P-4)',
                                                       'nsubj(+-8, 1-7)',
                                                       'rcmod(P-4, +-8)',
                                                       'dobj(+-8, 5-9)',
                                                       'dep(×-12, 2-10)',
                                                       'advmod(2-10, P-11)',
                                                       'dep(+-8, ×-12)',
                                                       'num(×-14, 5-13)',
                                                       'dep(×-12, ×-14)',
                                                       'dep(×-14, 2-15)',
                                                       'dep(×-12, 1-18)',
                                                       'nn(Rs-22, =-21)',
                                                       'dep(P-25, Rs-22)',
                                                       'dep(Rs-22, 2-23)',
                                                       'nn(P-25, ⇒-24)',
                                                       'dep(P-4, P-25)',
                                                       'acomp(=-26, Rs-27)',
                                                       'number(100-29, 800-28)',
                                                       'num(53-31, 100-29)',
                                                       'number(53-31, 100-30)',
                                                       'dep(Rs-27, 53-31)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
',
                                            'Sent' => 'Sentence skipped: no PCFG fallback.',
                                            'Rel' => []
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (NNP =) (CD 13))
      (ADJP (JJ +)
        (NP (CD 4))))
    (VP (SYM =)
      (NP (CD 17) (CD 52)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (NNP P))
        (-LRB- -LRB-)
        (SBAR
          (SBAR
            (S (-LRB- -LRB-)
              (NP (CD 1))
              (VP (VBZ +)
                (NP (CD 5)))))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (ADVP (RB P)))
            (SINV
              (VP (VBN ×)
                (PRN
                  (NP
                    (NP (CD 5) (NNS ×))
                    (NP (CD 2)))
                  (-RRB- -RRB-)))
              (\\: --)
              (NP (CD 1)))))
        (-RRB- -RRB-))
      (PRN (\\: --)
        (S
          (NP
            (NP (NNP =) (NNP Rs))
            (NP (CD 2)))
          (NP (NNP ⇒) (NNP P)))))
    (VP (VBZ =)
      (ADJP (JJ Rs)
        (NP
          (QP (CD 800) (CD 100))
          (QP (CD 100) (CD 53)))))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (NNP =) (CD 13))
      (ADJP (JJ +)
        (NP (CD 4))))
    (VP (SYM =)
      (NP (CD 17) (CD 52)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (NNP =) (CD 13))
      (ADJP (JJ +)
        (NP (CD 4))))
    (VP (SYM =)
      (NP (CD 17) (CD 52))))))
'
        };
Submitting expect

(= 13 + 4 = 17 52)

 A =[PERSON??] CAN BE +.

((:I (:Q DET =.NAME) +.A))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(= 13 + 4 = 17 52)

 A =[PERSON??] CAN BE +.

((:I (:Q DET =.NAME) +.A))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (NNP P))
        (-LRB- -LRB-)
        (SBAR
          (SBAR
            (S (-LRB- -LRB-)
              (NP (CD 1))
              (VP (VBZ +)
                (NP (CD 5)))))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (ADVP (RB P)))
            (SINV
              (VP (VBN ×)
                (PRN
                  (NP
                    (NP (CD 5) (NNS ×))
                    (NP (CD 2)))
                  (-RRB- -RRB-)))
              (\\: --)
              (NP (CD 1)))))
        (-RRB- -RRB-))
      (PRN (\\: --)
        (S
          (NP
            (NP (NNP =) (NNP Rs))
            (NP (CD 2)))
          (NP (NNP ⇒) (NNP P)))))
    (VP (VBZ =)
      (ADJP (JJ Rs)
        (NP
          (QP (CD 800) (CD 100))
          (QP (CD 100) (CD 53)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (NNP P))
        (-LRB- -LRB-)
        (SBAR
          (SBAR
            (S (-LRB- -LRB-)
              (NP (CD 1))
              (VP (VBZ +)
                (NP (CD 5)))))
          (SBAR
            (WHNP
              (WHNP (CD 2))
              (ADVP (RB P)))
            (SINV
              (VP (VBN ×)
                (PRN
                  (NP
                    (NP (CD 5) (NNS ×))
                    (NP (CD 2)))
                  (-RRB- -RRB-)))
              (\\: --)
              (NP (CD 1)))))
        (-RRB- -RRB-))
      (PRN (\\: --)
        (S
          (NP
            (NP (NNP =) (NNP Rs))
            (NP (CD 2)))
          (NP (NNP ⇒) (NNP P)))))
    (VP (VBZ =)
      (ADJP (JJ Rs)
        (NP
          (QP (CD 800) (CD 100))
          (QP (CD 100) (CD 53))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
$VAR1 = {
          'Batch' => [
                       '(c) In 16 l of mixture, milk = 16 × 5 = 10 l 8 ∴ Water = 6 l 10l + 4l 14 7 = = New ratio = 6l 6 3 439 s DECEMBER 2001 s THE COMPETITION MASTER'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.5 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 44]: [-LRB-, c, -RRB-, In, 16, l, of, mixture, ,, milk, =, 16, ×, 5, =, 10, l, 8, ∴, Water, =, 6, l, 10l, +, 4l, 14, 7, =, =, New, ratio, =, 6l, 6, 3, 439, s, DECEMBER, 2001, s, THE, COMPETITION, MASTER]
Parsed file: /tmp/stanfordparser.txt [1 sentences].
Parsed 44 words in 1 sentences (8.41 wds/sec; 0.19 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (PP (IN In)
      (NP
        (NP (CD 16) (NN l))
        (PP (IN of)
          (NP (NN mixture)))))
    (, ,)
    (NP
      (NP (NN milk) (CD =) (CD 16) (CD ×) (CD 5) (CD =) (CD 10) (CD l) (CD 8) (NNP ∴) (NNP Water) (NNP =))
      (SBAR
        (S
          (NP
            (NP
              (QP (CD 6) (CD l))
              (JJ 10l) (NNS +))
            (VP (VBG 4l)
              (S
                (NP
                  (QP (CD 14) (CD 7)))
                (VP (SYM =)
                  (NP (JJ =) (NNP New) (NN ratio))))))
          (VP (SYM =)
            (NP (CD 6l) (CD 6)))))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 439)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP (DT THE) (NNP COMPETITION) (NNP MASTER)))))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, c-2)',
                                                       'num(l-6, 16-5)',
                                                       'prep_in(MASTER-44, l-6)',
                                                       'prep_of(l-6, mixture-8)',
                                                       'nn(=-21, milk-10)',
                                                       'num(=-21, =-11)',
                                                       'num(=-21, 16-12)',
                                                       'num(=-21, ×-13)',
                                                       'num(=-21, 5-14)',
                                                       'num(=-21, =-15)',
                                                       'num(=-21, 10-16)',
                                                       'num(=-21, l-17)',
                                                       'num(=-21, 8-18)',
                                                       'nn(=-21, ∴-19)',
                                                       'nn(=-21, Water-20)',
                                                       'nsubj(MASTER-44, =-21)',
                                                       'number(l-23, 6-22)',
                                                       'num(+-25, l-23)',
                                                       'amod(+-25, 10l-24)',
                                                       'nsubj(6-35, +-25)',
                                                       'partmod(+-25, 4l-26)',
                                                       'number(7-28, 14-27)',
                                                       'nsubj(ratio-32, 7-28)',
                                                       'dep(ratio-32, =-29)',
                                                       'amod(ratio-32, =-30)',
                                                       'nn(ratio-32, New-31)',
                                                       'ccomp(4l-26, ratio-32)',
                                                       'dep(6-35, =-33)',
                                                       'num(6-35, 6l-34)',
                                                       'rcmod(=-21, 6-35)',
                                                       'number(439-37, 3-36)',
                                                       'nsubj(DECEMBER-39, 439-37)',
                                                       'cop(DECEMBER-39, s-38)',
                                                       'rcmod(=-21, DECEMBER-39)',
                                                       'num(DECEMBER-39, 2001-40)',
                                                       'cop(MASTER-44, s-41)',
                                                       'det(MASTER-44, THE-42)',
                                                       'nn(MASTER-44, COMPETITION-43)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (PP (IN In)
      (NP
        (NP (CD 16) (NN l))
        (PP (IN of)
          (NP (NN mixture)))))
    (\\, \\,)
    (NP
      (NP (NN milk) (CD =) (CD 16) (CD ×) (CD 5) (CD =) (CD 10) (CD l) (CD 8) (NNP ∴) (NNP Water) (NNP =))
      (SBAR
        (S
          (NP
            (NP
              (QP (CD 6) (CD l))
              (JJ 10l) (NNS +))
            (VP (VBG 4l)
              (S
                (NP
                  (QP (CD 14) (CD 7)))
                (VP (SYM =)
                  (NP (JJ =) (NNP New) (NN ratio))))))
          (VP (SYM =)
            (NP (CD 6l) (CD 6)))))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 439)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP (DT THE) (NNP COMPETITION) (NNP MASTER)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (PP (IN In)
      (NP
        (NP (CD 16) (NN l))
        (PP (IN of)
          (NP (NN mixture)))))
    (\\, \\,)
    (NP
      (NP (NN milk) (CD =) (CD 16) (CD ×) (CD 5) (CD =) (CD 10) (CD l) (CD 8) (NNP ∴) (NNP Water) (NNP =))
      (SBAR
        (S
          (NP
            (NP
              (QP (CD 6) (CD l))
              (JJ 10l) (NNS +))
            (VP (VBG 4l)
              (S
                (NP
                  (QP (CD 14) (CD 7)))
                (VP (SYM =)
                  (NP (JJ =) (NNP New) (NN ratio))))))
          (VP (SYM =)
            (NP (CD 6l) (CD 6)))))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 439)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP (DT THE) (NNP COMPETITION) (NNP MASTER)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (PP (IN In)
      (NP
        (NP (CD 16) (NN l))
        (PP (IN of)
          (NP (NN mixture)))))
    (\\, \\,)
    (NP
      (NP (NN milk) (CD =) (CD 16) (CD ×) (CD 5) (CD =) (CD 10) (CD l) (CD 8) (NNP ∴) (NNP Water) (NNP =))
      (SBAR
        (S
          (NP
            (NP
              (QP (CD 6) (CD l))
              (JJ 10l) (NNS +))
            (VP (VBG 4l)
              (S
                (NP
                  (QP (CD 14) (CD 7)))
                (VP (SYM =)
                  (NP (JJ =) (NNP New) (NN ratio))))))
          (VP (SYM =)
            (NP (CD 6l) (CD 6)))))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 439)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP (DT THE) (NNP COMPETITION) (NNP MASTER))))))))
'
        };
Submitting expect

(-LRB- C -RRB- IN 16 L OF MIXTURE , MILK = 16 × 5 = 10 L 8 ∴ WATER = 6 L 10L + 4L 14 7 = = NEW RATIO = 6L 6 3 439 S DECEMBER 2001 S THE COMPETITION
 MASTER)

 MILK MAY BE A COMPETITION_MASTER[PERSON??].
 SOME_NUMBER_OF L CAN BE CONSTITUTED_OF_OR_FILLED_WITH MIXTURE.
 A RATIO CAN BE =.
 A NEW[PERSON??] MAY HAVE A RATIO.

((:I (:F K MILK.N) BE.V (:Q DET COMPETITION_MASTER.NAME)) (:I (:Q SOME-NUMBER-OF L.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K MIXTURE.N))
 (:I (:Q DET RATIO.N) =.A) (:I (:Q DET NEW.NAME) HAVE.V (:Q DET RATIO.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- C -RRB- IN 16 L OF MIXTURE , MILK = 16 × 5 = 10 L 8 ∴ WATER = 6 L 10L + 4L 14 7 = = NEW RATIO = 6L 6 3 439 S DECEMBER 2001 S THE COMPETITION
 MASTER)

 MILK MAY BE A COMPETITION_MASTER[PERSON??].
 SOME_NUMBER_OF L CAN BE CONSTITUTED_OF_OR_FILLED_WITH MIXTURE.
 A RATIO CAN BE =.
 A NEW[PERSON??] MAY HAVE A RATIO.

((:I (:F K MILK.N) BE.V (:Q DET COMPETITION_MASTER.NAME)) (:I (:Q SOME-NUMBER-OF L.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K MIXTURE.N))
 (:I (:Q DET RATIO.N) =.A) (:I (:Q DET NEW.NAME) HAVE.V (:Q DET RATIO.N)))
______________________________________________________________________
[3]>'
        };
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
/quantitative_aptitude8.pdf.preprocess
Moving /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess/x2.workhorse to /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/complete/x2.workhorse
<BLAH: /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess>
Remove Dir If Empty: /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess
/var/lib/myfrdcsa/codebases/minor/free-knext/scripts/knext.pl -d -f /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess/x1.workhorse
warning: Prolog import export not fully functional
$VAR1 = {
          'Batch' => [
                       'OBJECTIVE-TYPE QUESTIONS Quantitative Aptitude Solved Paper of Cooperative Bank Exam, 2000 1.',
                       'Find the sum of prime factors of 561.',
                       '(a) 31 (b) 12 (c) 40 (d) 41 2.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 14]: [OBJECTIVE-TYPE, QUESTIONS, Quantitative, Aptitude, Solved, Paper, of, Cooperative, Bank, Exam, ,, 2000, 1, .]
Parsing [sent. 2 len. 9]: [Find, the, sum, of, prime, factors, of, 561, .]
Parsing [sent. 3 len. 18]: [-LRB-, a, -RRB-, 31, -LRB-, b, -RRB-, 12, -LRB-, c, -RRB-, 40, -LRB-, d, -RRB-, 41, 2, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 41 words in 3 sentences (13.26 wds/sec; 0.97 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP OBJECTIVE-TYPE))
    (VP (VBZ QUESTIONS)
      (NP
        (NP (NNP Quantitative) (NNP Aptitude) (NNP Solved) (NNP Paper))
        (PP (IN of)
          (NP
            (NP (NNP Cooperative) (NNP Bank) (NNP Exam))
            (, ,)
            (NP (CD 2000) (CD 1))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(QUESTIONS-2, OBJECTIVE-TYPE-1)',
                                                       'nn(Paper-6, Quantitative-3)',
                                                       'nn(Paper-6, Aptitude-4)',
                                                       'nn(Paper-6, Solved-5)',
                                                       'dobj(QUESTIONS-2, Paper-6)',
                                                       'nn(Exam-10, Cooperative-8)',
                                                       'nn(Exam-10, Bank-9)',
                                                       'prep_of(Paper-6, Exam-10)',
                                                       'num(1-13, 2000-12)',
                                                       'appos(Exam-10, 1-13)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (JJ prime) (NNS factors))
            (PP (IN of)
              (NP (CD 561)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(sum-3, the-2)',
                                                       'dobj(Find-1, sum-3)',
                                                       'amod(factors-6, prime-5)',
                                                       'prep_of(sum-3, factors-6)',
                                                       'prep_of(factors-6, 561-8)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 12)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP (CD 40)))
      (PRN (-LRB- -LRB-)
        (VP (VBN d))
        (-RRB- -RRB-)))
    (VP (VBZ 41)
      (NP (CD 2)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(41-16, 31-4)',
                                                       'dep(31-4, b-6)',
                                                       'dep(31-4, 12-8)',
                                                       'dep(31-4, c-10)',
                                                       'dep(31-4, 40-12)',
                                                       'dep(31-4, d-14)',
                                                       'dobj(41-16, 2-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (NNP OBJECTIVE-TYPE))
    (VP (VBZ QUESTIONS)
      (NP
        (NP (NNP Quantitative) (NNP Aptitude) (NNP Solved) (NNP Paper))
        (PP (IN of)
          (NP
            (NP (NNP Cooperative) (NNP Bank) (NNP Exam))
            (\\, \\,)
            (NP (CD 2000) (CD 1))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (JJ prime) (NNS factors))
            (PP (IN of)
              (NP (CD 561)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 12)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP (CD 40)))
      (PRN (-LRB- -LRB-)
        (VP (VBN d))
        (-RRB- -RRB-)))
    (VP (VBZ 41)
      (NP (CD 2)))))'
        };
Initializing 
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP OBJECTIVE-TYPE))
    (VP (VBZ QUESTIONS)
      (NP
        (NP (NNP Quantitative) (NNP Aptitude) (NNP Solved) (NNP Paper))
        (PP (IN of)
          (NP
            (NP (NNP Cooperative) (NNP Bank) (NNP Exam))
            (\\, \\,)
            (NP (CD 2000) (CD 1))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP OBJECTIVE-TYPE))
    (VP (VBZ QUESTIONS)
      (NP
        (NP (NNP Quantitative) (NNP Aptitude) (NNP Solved) (NNP Paper))
        (PP (IN of)
          (NP
            (NP (NNP Cooperative) (NNP Bank) (NNP Exam))
            (\\, \\,)
            (NP (CD 2000) (CD 1)))))))))
'
        };
Submitting expect

(OBJECTIVE-TYPE QUESTIONS QUANTITATIVE APTITUDE SOLVED PAPER OF COOPERATIVE BANK EXAM , 2000 1)

 AN OBJECTIVE-TYPE[PERSON??] MAY QUESTION A QUANTITATIVE_APTITUDE_SOLVED_PAPER[PERSON??] OF A COOPERATIVE_BANK_EXAM[PERSON??].

((:I (:Q DET OBJECTIVE-TYPE.NAME) QUESTION.V (:A (:Q DET QUANTITATIVE_APTITUDE_SOLVED_PAPER.NAME) (:P OF.P (:Q DET COOPERATIVE_BANK_EXAM.NAME))))
 NIL)
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(OBJECTIVE-TYPE QUESTIONS QUANTITATIVE APTITUDE SOLVED PAPER OF COOPERATIVE BANK EXAM , 2000 1)

 AN OBJECTIVE-TYPE[PERSON??] MAY QUESTION A QUANTITATIVE_APTITUDE_SOLVED_PAPER[PERSON??] OF A COOPERATIVE_BANK_EXAM[PERSON??].

((:I (:Q DET OBJECTIVE-TYPE.NAME) QUESTION.V (:A (:Q DET QUANTITATIVE_APTITUDE_SOLVED_PAPER.NAME) (:P OF.P (:Q DET COOPERATIVE_BANK_EXAM.NAME))))
 NIL)
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (JJ prime) (NNS factors))
            (PP (IN of)
              (NP (CD 561)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (JJ prime) (NNS factors))
            (PP (IN of)
              (NP (CD 561))))))))))
'
        };
Submitting expect

(FIND THE SUM OF PRIME FACTORS OF 561)

 FACTORS CAN BE PRIME.

(NIL (:I (:Q DET (:F PLUR FACTOR.N)) PRIME.A))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THE SUM OF PRIME FACTORS OF 561)

 FACTORS CAN BE PRIME.

(NIL (:I (:Q DET (:F PLUR FACTOR.N)) PRIME.A))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 12)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP (CD 40)))
      (PRN (-LRB- -LRB-)
        (VP (VBN d))
        (-RRB- -RRB-)))
    (VP (VBZ 41)
      (NP (CD 2)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 12)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP (CD 40)))
      (PRN (-LRB- -LRB-)
        (VP (VBN d))
        (-RRB- -RRB-)))
    (VP (VBZ 41)
      (NP (CD 2))))))
'
        };
Submitting expect

*** - STRING: argument 41 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 41 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
$VAR1 = {
          'Batch' => [
                       '4 men prepares 5 mats in 4 days.',
                       'How many mats can be prepared by 200 men in 200 days?',
                       '(a) 200 (b) 10000 (c) 1000 (d) 5000 3.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 9]: [4, men, prepares, 5, mats, in, 4, days, .]
Parsing [sent. 2 len. 13]: [How, many, mats, can, be, prepared, by, 200, men, in, 200, days, ?]
Parsing [sent. 3 len. 18]: [-LRB-, a, -RRB-, 200, -LRB-, b, -RRB-, 10000, -LRB-, c, -RRB-, 1000, -LRB-, d, -RRB-, 5000, 3, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 40 words in 3 sentences (17.20 wds/sec; 1.29 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (CD 4) (NNS men))
    (VP (VBZ prepares)
      (NP
        (NP (CD 5) (NNS mats))
        (PP (IN in)
          (NP (CD 4) (NNS days)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(men-2, 4-1)',
                                                       'nsubj(prepares-3, men-2)',
                                                       'num(mats-5, 5-4)',
                                                       'dobj(prepares-3, mats-5)',
                                                       'num(days-8, 4-7)',
                                                       'prep_in(mats-5, days-8)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHADJP (WRB How) (JJ many))
    (SQ
      (NP (NNS mats))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN prepared)
            (PP (IN by)
              (NP
                (NP (CD 200) (NNS men))
                (PP (IN in)
                  (NP (CD 200) (NNS days)))))))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'advmod(many-2, How-1)',
                                                       'dep(prepared-6, many-2)',
                                                       'nsubjpass(prepared-6, mats-3)',
                                                       'aux(prepared-6, can-4)',
                                                       'auxpass(prepared-6, be-5)',
                                                       'num(men-9, 200-8)',
                                                       'agent(prepared-6, men-9)',
                                                       'num(days-12, 200-11)',
                                                       'prep_in(men-9, days-12)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 200))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (SBAR
          (S
            (NP
              (NP (CD 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (VP (VBZ 1000)))))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (VP (VBZ 5000)
      (NP (CD 3)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dobj(1000-12, 200-4)',
                                                       'nsubj(5000-16, 200-4)',
                                                       'dep(200-4, b-6)',
                                                       'nsubj(1000-12, 10000-8)',
                                                       'dep(10000-8, c-10)',
                                                       'rcmod(200-4, 1000-12)',
                                                       'appos(200-4, d-14)',
                                                       'dobj(5000-16, 3-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (CD 4) (NNS men))
    (VP (VBZ prepares)
      (NP
        (NP (CD 5) (NNS mats))
        (PP (IN in)
          (NP (CD 4) (NNS days)))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHADJP (WRB How) (JJ many))
    (SQ
      (NP (NNS mats))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN prepared)
            (PP (IN by)
              (NP
                (NP (CD 200) (NNS men))
                (PP (IN in)
                  (NP (CD 200) (NNS days)))))))))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 200))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (SBAR
          (S
            (NP
              (NP (CD 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (VP (VBZ 1000)))))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (VP (VBZ 5000)
      (NP (CD 3)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 4) (NNS men))
    (VP (VBZ prepares)
      (NP
        (NP (CD 5) (NNS mats))
        (PP (IN in)
          (NP (CD 4) (NNS days)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 4) (NNS men))
    (VP (VBZ prepares)
      (NP
        (NP (CD 5) (NNS mats))
        (PP (IN in)
          (NP (CD 4) (NNS days))))))))
'
        };
Submitting expect

(4 MEN PREPARES 5 MATS IN 4 DAYS)

 SOME_NUMBER_OF MEN MAY PREPARE SOME_NUMBER_OF MATS.
 SOME_NUMBER_OF MATS CAN BE IN SOME_NUMBER_OF DAYS.

((:I (:Q SOME-NUMBER-OF (:F PLUR MAN.N)) PREPARE.V (:Q SOME-NUMBER-OF (:F PLUR MAT.N)))
 (:I (:Q SOME-NUMBER-OF (:F PLUR MAT.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(4 MEN PREPARES 5 MATS IN 4 DAYS)

 SOME_NUMBER_OF MEN MAY PREPARE SOME_NUMBER_OF MATS.
 SOME_NUMBER_OF MATS CAN BE IN SOME_NUMBER_OF DAYS.

((:I (:Q SOME-NUMBER-OF (:F PLUR MAN.N)) PREPARE.V (:Q SOME-NUMBER-OF (:F PLUR MAT.N)))
 (:I (:Q SOME-NUMBER-OF (:F PLUR MAT.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHADJP (WRB How) (JJ many))
    (SQ
      (NP (NNS mats))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN prepared)
            (PP (IN by)
              (NP
                (NP (CD 200) (NNS men))
                (PP (IN in)
                  (NP (CD 200) (NNS days)))))))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHADJP (WRB How) (JJ many))
    (SQ
      (NP (NNS mats))
      (VP (MD can)
        (VP (VB be)
          (VP (VBN prepared)
            (PP (IN by)
              (NP
                (NP (CD 200) (NNS men))
                (PP (IN in)
                  (NP (CD 200) (NNS days)))))))))
    (\\. ?))))))
'
        };
Submitting expect

(HOW MANY MATS CAN BE PREPARED BY 200 MEN IN 200 DAYS ?)

 SOME_NUMBER_OF MEN CAN BE IN SOME_NUMBER_OF DAYS.

((:I (:Q SOME-NUMBER-OF (:F PLUR MAN.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(HOW MANY MATS CAN BE PREPARED BY 200 MEN IN 200 DAYS ?)

 SOME_NUMBER_OF MEN CAN BE IN SOME_NUMBER_OF DAYS.

((:I (:Q SOME-NUMBER-OF (:F PLUR MAN.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 200))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (SBAR
          (S
            (NP
              (NP (CD 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (VP (VBZ 1000)))))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (VP (VBZ 5000)
      (NP (CD 3)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP (CD 200))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (SBAR
          (S
            (NP
              (NP (CD 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (VP (VBZ 1000)))))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (VP (VBZ 5000)
      (NP (CD 3))))))
'
        };
Submitting expect

*** - STRING: argument 1000 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 1000 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
$VAR1 = {
          'Batch' => [
                       'Product of two numbers is 1575 and their quotient is 7.',
                       'What are the numbers?',
                       '(a) 205 and 15 (b) 15 and 105 (c) 225 and 15 (d) 25 and 135 4.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 12]: [Product, of, two, numbers, is, 1575, and, their, quotient, is, 7, .]
Parsing [sent. 2 len. 5]: [What, are, the, numbers, ?]
Parsing [sent. 3 len. 26]: [-LRB-, a, -RRB-, 205, and, 15, -LRB-, b, -RRB-, 15, and, 105, -LRB-, c, -RRB-, 225, and, 15, -LRB-, d, -RRB-, 25, and, 135, 4, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 43 words in 3 sentences (15.32 wds/sec; 1.07 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP
        (NP (NN Product))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 1575))))
    (CC and)
    (S
      (NP (PRP$ their) (NN quotient))
      (VP (VBZ is)
        (NP (CD 7))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(1575-6, Product-1)',
                                                       'num(numbers-4, two-3)',
                                                       'prep_of(Product-1, numbers-4)',
                                                       'cop(1575-6, is-5)',
                                                       'poss(quotient-9, their-8)',
                                                       'nsubj(7-11, quotient-9)',
                                                       'cop(7-11, is-10)',
                                                       'conj_and(1575-6, 7-11)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHNP (WP What))
    (SQ (VBP are)
      (NP (DT the) (NNS numbers)))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'attr(are-2, What-1)',
                                                       'det(numbers-4, the-3)',
                                                       'nsubj(are-2, numbers-4)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 205)
      (S
        (NP
          (NP
            (NP
              (NP
                (QP (CC and)
                  (CD 15)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 15)
              (CC and)
              (CD 105)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 225))
          (CC and)
          (NP
            (NP
              (NP (CD 15))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 25)
              (CC and)
              (CD 135) (CD 4))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'cc(15-6, and-5)',
                                                       'nsubj(225-16, 15-6)',
                                                       'dep(15-6, b-8)',
                                                       'dep(15-6, 15-10)',
                                                       'dep(15-6, 105-12)',
                                                       'conj_and(15-10, 105-12)',
                                                       'dep(15-6, c-14)',
                                                       'xcomp(205-4, 225-16)',
                                                       'xcomp(205-4, 15-18)',
                                                       'conj_and(225-16, 15-18)',
                                                       'dep(15-18, d-20)',
                                                       'number(4-25, 25-22)',
                                                       'num(15-18, 135-24)',
                                                       'conj_and(4-25, 135-24)',
                                                       'num(15-18, 4-25)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (S
      (NP
        (NP (NN Product))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 1575))))
    (CC and)
    (S
      (NP (PRP$ their) (NN quotient))
      (VP (VBZ is)
        (NP (CD 7))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHNP (WP What))
    (SQ (VBP are)
      (NP (DT the) (NNS numbers)))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 205)
      (S
        (NP
          (NP
            (NP
              (NP
                (QP (CC and)
                  (CD 15)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 15)
              (CC and)
              (CD 105)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 225))
          (CC and)
          (NP
            (NP
              (NP (CD 15))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 25)
              (CC and)
              (CD 135) (CD 4))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP
        (NP (NN Product))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 1575))))
    (CC and)
    (S
      (NP (PRP$ their) (NN quotient))
      (VP (VBZ is)
        (NP (CD 7))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP
        (NP (NN Product))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 1575))))
    (CC and)
    (S
      (NP (PRP$ their) (NN quotient))
      (VP (VBZ is)
        (NP (CD 7)))))))
'
        };
Submitting expect

(PRODUCT OF TWO NUMBERS IS 1575 AND THEIR QUOTIENT IS 7)

 PRODUCT OF SOME_NUMBER_OF NUMBERS CAN BE A NUMBER_OR_PORTION.
 A QUOTIENT CAN BE A NUMBER_OR_PORTION.
 INDIVIDUAL -S MAY HAVE A QUOTIENT.

((:I (:A (:F K PRODUCT.N) (:P OF.P (:Q SOME-NUMBER-OF (:F PLUR NUMBER.N)))) NUMBER-OR-PORTION.N) NIL (:I (:Q THE QUOTIENT.N) NUMBER-OR-PORTION.N)
 (:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET QUOTIENT.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(PRODUCT OF TWO NUMBERS IS 1575 AND THEIR QUOTIENT IS 7)

 PRODUCT OF SOME_NUMBER_OF NUMBERS CAN BE A NUMBER_OR_PORTION.
 A QUOTIENT CAN BE A NUMBER_OR_PORTION.
 INDIVIDUAL -S MAY HAVE A QUOTIENT.

((:I (:A (:F K PRODUCT.N) (:P OF.P (:Q SOME-NUMBER-OF (:F PLUR NUMBER.N)))) NUMBER-OR-PORTION.N) NIL (:I (:Q THE QUOTIENT.N) NUMBER-OR-PORTION.N)
 (:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET QUOTIENT.N)))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHNP (WP What))
    (SQ (VBP are)
      (NP (DT the) (NNS numbers)))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHNP (WP What))
    (SQ (VBP are)
      (NP (DT the) (NNS numbers)))
    (\\. ?))))))
'
        };
Submitting expect

(WHAT ARE THE NUMBERS ?)


NIL
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 205)
      (S
        (NP
          (NP
            (NP
              (NP
                (QP (CC and)
                  (CD 15)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 15)
              (CC and)
              (CD 105)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 225))
          (CC and)
          (NP
            (NP
              (NP (CD 15))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 25)
              (CC and)
              (CD 135) (CD 4))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 205)
      (S
        (NP
          (NP
            (NP
              (NP
                (QP (CC and)
                  (CD 15)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 15)
              (CC and)
              (CD 105)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 225))
          (CC and)
          (NP
            (NP
              (NP (CD 15))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 25)
              (CC and)
              (CD 135) (CD 4)))))))))
'
        };
Submitting expect

(-LRB- A -RRB- 205 AND 15 -LRB- B -RRB- 15 AND 105 -LRB- C -RRB- 225 AND 15 -LRB- D -RRB- 25 AND 135 4)


NIL
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'Batch' => [
                       'A person purchased a T.V. 20% less than the market price and sells it at 20% more than the market price.',
                       'What is his percentage profit?',
                       '(a) 50% (b) 40% (c) 0% (d) 20% 5.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 24]: [A, person, purchased, a, T.V., 20, %, less, than, the, market, price, and, sells, it, at, 20, %, more, than, the, market, price, .]
Parsing [sent. 2 len. 6]: [What, is, his, percentage, profit, ?]
Parsing [sent. 3 len. 22]: [-LRB-, a, -RRB-, 50, %, -LRB-, b, -RRB-, 40, %, -LRB-, c, -RRB-, 0, %, -LRB-, d, -RRB-, 20, %, 5, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 52 words in 3 sentences (15.68 wds/sec; 0.90 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT A) (NN person))
    (VP
      (VP (VBD purchased)
        (NP (DT a) (NNP T.V.))
        (PP
          (ADVP
            (NP (CD 20) (NN %))
            (RBR less))
          (IN than)
          (NP (DT the) (NN market) (NN price))))
      (CC and)
      (VP (VBZ sells)
        (NP (PRP it))
        (PP (IN at)
          (PP
            (ADVP
              (NP (CD 20) (NN %))
              (RBR more))
            (IN than)
            (NP (DT the) (NN market) (NN price))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(person-2, A-1)',
                                                       'nsubj(purchased-3, person-2)',
                                                       'nsubj(sells-14, person-2)',
                                                       'det(T.V.-5, a-4)',
                                                       'dobj(purchased-3, T.V.-5)',
                                                       'num(%-7, 20-6)',
                                                       'npadvmod(less-8, %-7)',
                                                       'advmod(purchased-3, less-8)',
                                                       'det(price-12, the-10)',
                                                       'nn(price-12, market-11)',
                                                       'prep_than(purchased-3, price-12)',
                                                       'conj_and(purchased-3, sells-14)',
                                                       'dobj(sells-14, it-15)',
                                                       'prep(sells-14, at-16)',
                                                       'num(%-18, 20-17)',
                                                       'npadvmod(more-19, %-18)',
                                                       'advmod(at-16, more-19)',
                                                       'pcomp(at-16, than-20)',
                                                       'det(price-23, the-21)',
                                                       'nn(price-23, market-22)',
                                                       'prep_than(at-16, price-23)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHNP (WP What))
    (SQ (VBZ is)
      (NP (PRP$ his) (NN percentage) (NN profit)))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'attr(is-2, What-1)',
                                                       'poss(profit-5, his-3)',
                                                       'nn(profit-5, percentage-4)',
                                                       'nsubj(is-2, profit-5)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 50) (NN %))
    (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
      (NP
        (NP
          (NP
            (NP (CD 40) (NN %))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 0) (NN %)))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-)))
        (ADJP (CD 20) (NN %))
        (NP (CD 5))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'num(%-5, 50-4)',
                                                       'nsubj(b-7, %-5)',
                                                       'num(%-10, 40-9)',
                                                       'dobj(b-7, %-10)',
                                                       'iobj(b-7, %-10)',
                                                       'dep(%-10, c-12)',
                                                       'num(%-15, 0-14)',
                                                       'dep(%-10, %-15)',
                                                       'appos(%-10, d-17)',
                                                       'number(%-20, 20-19)',
                                                       'amod(%-10, %-20)',
                                                       'dep(%-10, 5-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (DT A) (NN person))
    (VP
      (VP (VBD purchased)
        (NP (DT a) (NNP T\\.V\\.))
        (PP
          (ADVP
            (NP (CD 20) (NN %))
            (RBR less))
          (IN than)
          (NP (DT the) (NN market) (NN price))))
      (CC and)
      (VP (VBZ sells)
        (NP (PRP it))
        (PP (IN at)
          (PP
            (ADVP
              (NP (CD 20) (NN %))
              (RBR more))
            (IN than)
            (NP (DT the) (NN market) (NN price))))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHNP (WP What))
    (SQ (VBZ is)
      (NP (PRP$ his) (NN percentage) (NN profit)))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 50) (NN %))
    (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
      (NP
        (NP
          (NP
            (NP (CD 40) (NN %))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 0) (NN %)))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-)))
        (ADJP (CD 20) (NN %))
        (NP (CD 5))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT A) (NN person))
    (VP
      (VP (VBD purchased)
        (NP (DT a) (NNP T\\.V\\.))
        (PP
          (ADVP
            (NP (CD 20) (NN %))
            (RBR less))
          (IN than)
          (NP (DT the) (NN market) (NN price))))
      (CC and)
      (VP (VBZ sells)
        (NP (PRP it))
        (PP (IN at)
          (PP
            (ADVP
              (NP (CD 20) (NN %))
              (RBR more))
            (IN than)
            (NP (DT the) (NN market) (NN price))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT A) (NN person))
    (VP
      (VP (VBD purchased)
        (NP (DT a) (NNP T\\.V\\.))
        (PP
          (ADVP
            (NP (CD 20) (NN %))
            (RBR less))
          (IN than)
          (NP (DT the) (NN market) (NN price))))
      (CC and)
      (VP (VBZ sells)
        (NP (PRP it))
        (PP (IN at)
          (PP
            (ADVP
              (NP (CD 20) (NN %))
              (RBR more))
            (IN than)
            (NP (DT the) (NN market) (NN price)))))))))
'
        };
Submitting expect

(A PERSON PURCHASED A T.V. 20 % LESS THAN THE MARKET PRICE AND SELLS IT AT 20 % MORE THAN THE MARKET PRICE)

 A PERSON MAY PURCHASE A T.V.[PERSON??].

((:I (:Q A{N} PERSON.N) PURCHASE.V (:Q DET T.V..NAME)))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A PERSON PURCHASED A T.V. 20 % LESS THAN THE MARKET PRICE AND SELLS IT AT 20 % MORE THAN THE MARKET PRICE)

 A PERSON MAY PURCHASE A T.V.[PERSON??].

((:I (:Q A{N} PERSON.N) PURCHASE.V (:Q DET T.V..NAME)))
______________________________________________________________________
[6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHNP (WP What))
    (SQ (VBZ is)
      (NP (PRP$ his) (NN percentage) (NN profit)))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHNP (WP What))
    (SQ (VBZ is)
      (NP (PRP$ his) (NN percentage) (NN profit)))
    (\\. ?))))))
'
        };
Submitting expect

(WHAT IS HIS PERCENTAGE PROFIT ?)

 A MALE MAY HAVE A PERCENTAGE PROFIT.

((:I (:Q DET MALE*.N) HAVE.V (:Q DET (:F NN PERCENTAGE.N PROFIT.N))))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(WHAT IS HIS PERCENTAGE PROFIT ?)

 A MALE MAY HAVE A PERCENTAGE PROFIT.

((:I (:Q DET MALE*.N) HAVE.V (:Q DET (:F NN PERCENTAGE.N PROFIT.N))))
______________________________________________________________________
[7]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 50) (NN %))
    (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
      (NP
        (NP
          (NP
            (NP (CD 40) (NN %))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 0) (NN %)))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-)))
        (ADJP (CD 20) (NN %))
        (NP (CD 5))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 50) (NN %))
    (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
      (NP
        (NP
          (NP
            (NP (CD 40) (NN %))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 0) (NN %)))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-)))
        (ADJP (CD 20) (NN %))
        (NP (CD 5)))))))
'
        };
Submitting expect

(-LRB- A -RRB- 50 % -LRB- B -RRB- 40 % -LRB- C -RRB- 0 % -LRB- D -RRB- 20 % 5)


NIL
______________________________________________________________________
[8]> Got result
$VAR1 = {
          'Batch' => [
                       'A bucket half filled with water weighs 70 kg.',
                       'When its 1 th is empty, it weighs 80 kg.',
                       'Find the weight of the 4 bucket when its 2 th is filled with water.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 10]: [A, bucket, half, filled, with, water, weighs, 70, kg, .]
Parsing [sent. 2 len. 12]: [When, its, 1, th, is, empty, ,, it, weighs, 80, kg, .]
Parsing [sent. 3 len. 16]: [Find, the, weight, of, the, 4, bucket, when, its, 2, th, is, filled, with, water, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 38 words in 3 sentences (15.32 wds/sec; 1.21 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT A) (NN bucket) (NN half))
      (VP (VBN filled)
        (PP (IN with)
          (NP (NN water)))))
    (VP (VBZ weighs)
      (NP (CD 70) (NN kg)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(half-3, A-1)',
                                                       'nn(half-3, bucket-2)',
                                                       'nsubj(weighs-7, half-3)',
                                                       'partmod(half-3, filled-4)',
                                                       'prep_with(filled-4, water-6)',
                                                       'num(kg-9, 70-8)',
                                                       'dobj(weighs-7, kg-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP$ its) (CD 1) (NN th))
        (VP (VBZ is)
          (ADJP (JJ empty)))))
    (, ,)
    (NP (PRP it))
    (VP (VBZ weighs)
      (NP (CD 80) (NN kg)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'advmod(empty-6, When-1)',
                                                       'poss(th-4, its-2)',
                                                       'num(th-4, 1-3)',
                                                       'nsubj(empty-6, th-4)',
                                                       'cop(empty-6, is-5)',
                                                       'advcl(weighs-9, empty-6)',
                                                       'nsubj(weighs-9, it-8)',
                                                       'num(kg-11, 80-10)',
                                                       'dobj(weighs-9, kg-11)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN weight))
        (PP (IN of)
          (NP (DT the) (CD 4) (NN bucket)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP$ its) (CD 2) (NN th))
            (VP (VBZ is)
              (VP (VBN filled)
                (PP (IN with)
                  (NP (NN water)))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(weight-3, the-2)',
                                                       'dobj(Find-1, weight-3)',
                                                       'tmod(filled-13, weight-3)',
                                                       'det(bucket-7, the-5)',
                                                       'num(bucket-7, 4-6)',
                                                       'prep_of(weight-3, bucket-7)',
                                                       'advmod(filled-13, when-8)',
                                                       'poss(th-11, its-9)',
                                                       'num(th-11, 2-10)',
                                                       'nsubjpass(filled-13, th-11)',
                                                       'auxpass(filled-13, is-12)',
                                                       'dep(weight-3, filled-13)',
                                                       'prep_with(filled-13, water-15)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT A) (NN bucket) (NN half))
      (VP (VBN filled)
        (PP (IN with)
          (NP (NN water)))))
    (VP (VBZ weighs)
      (NP (CD 70) (NN kg)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP$ its) (CD 1) (NN th))
        (VP (VBZ is)
          (ADJP (JJ empty)))))
    (\\, \\,)
    (NP (PRP it))
    (VP (VBZ weighs)
      (NP (CD 80) (NN kg)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN weight))
        (PP (IN of)
          (NP (DT the) (CD 4) (NN bucket)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP$ its) (CD 2) (NN th))
            (VP (VBZ is)
              (VP (VBN filled)
                (PP (IN with)
                  (NP (NN water)))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT A) (NN bucket) (NN half))
      (VP (VBN filled)
        (PP (IN with)
          (NP (NN water)))))
    (VP (VBZ weighs)
      (NP (CD 70) (NN kg)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT A) (NN bucket) (NN half))
      (VP (VBN filled)
        (PP (IN with)
          (NP (NN water)))))
    (VP (VBZ weighs)
      (NP (CD 70) (NN kg))))))
'
        };
Submitting expect

(A BUCKET HALF FILLED WITH WATER WEIGHS 70 KG)

 A BUCKET HALF MAY WEIGH SOME_NUMBER_OF KG.
 A BUCKET HALF MAY BE FILL -ED WITH WATER.

((:I (:Q A{N} (:F NN BUCKET.N HALF.N)) WEIGH.V (:Q SOME-NUMBER-OF KG.N))
 (:I (:Q A{N} (:F NN BUCKET.N HALF.N)) (:F BE.PASV FILL.V) (:P WITH.P (:F K WATER.N))))
______________________________________________________________________
[9]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A BUCKET HALF FILLED WITH WATER WEIGHS 70 KG)

 A BUCKET HALF MAY WEIGH SOME_NUMBER_OF KG.
 A BUCKET HALF MAY BE FILL -ED WITH WATER.

((:I (:Q A{N} (:F NN BUCKET.N HALF.N)) WEIGH.V (:Q SOME-NUMBER-OF KG.N))
 (:I (:Q A{N} (:F NN BUCKET.N HALF.N)) (:F BE.PASV FILL.V) (:P WITH.P (:F K WATER.N))))
______________________________________________________________________
[9]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP$ its) (CD 1) (NN th))
        (VP (VBZ is)
          (ADJP (JJ empty)))))
    (\\, \\,)
    (NP (PRP it))
    (VP (VBZ weighs)
      (NP (CD 80) (NN kg)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (PRP$ its) (CD 1) (NN th))
        (VP (VBZ is)
          (ADJP (JJ empty)))))
    (\\, \\,)
    (NP (PRP it))
    (VP (VBZ weighs)
      (NP (CD 80) (NN kg))))))
'
        };
Submitting expect

(WHEN ITS 1 TH IS EMPTY , IT WEIGHS 80 KG)

 A THING-REFERRED-TO MAY WEIGH SOME_NUMBER_OF KG.
 SOME_NUMBER_OF TH CAN BE EMPTY.

((:I (:Q DET THING-REFERRED-TO*.N) WEIGH.V (:Q SOME-NUMBER-OF KG.N)) (:I (:Q SOME-NUMBER-OF TH.N) EMPTY.A))
______________________________________________________________________
[10]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(WHEN ITS 1 TH IS EMPTY , IT WEIGHS 80 KG)

 A THING-REFERRED-TO MAY WEIGH SOME_NUMBER_OF KG.
 SOME_NUMBER_OF TH CAN BE EMPTY.

((:I (:Q DET THING-REFERRED-TO*.N) WEIGH.V (:Q SOME-NUMBER-OF KG.N)) (:I (:Q SOME-NUMBER-OF TH.N) EMPTY.A))
______________________________________________________________________
[10]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN weight))
        (PP (IN of)
          (NP (DT the) (CD 4) (NN bucket)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP$ its) (CD 2) (NN th))
            (VP (VBZ is)
              (VP (VBN filled)
                (PP (IN with)
                  (NP (NN water)))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN weight))
        (PP (IN of)
          (NP (DT the) (CD 4) (NN bucket)))
        (SBAR
          (WHADVP (WRB when))
          (S
            (NP (PRP$ its) (CD 2) (NN th))
            (VP (VBZ is)
              (VP (VBN filled)
                (PP (IN with)
                  (NP (NN water))))))))))))
'
        };
Submitting expect

(FIND THE WEIGHT OF THE 4 BUCKET WHEN ITS 2 TH IS FILLED WITH WATER)

 SOME_NUMBER_OF TH MAY BE FILL -ED WITH WATER.

(NIL (:I (:Q SOME-NUMBER-OF TH.N) (:F BE.PASV FILL.V) (:P WITH.P (:F K WATER.N))))
______________________________________________________________________
[11]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THE WEIGHT OF THE 4 BUCKET WHEN ITS 2 TH IS FILLED WITH WATER)

 SOME_NUMBER_OF TH MAY BE FILL -ED WITH WATER.

(NIL (:I (:Q SOME-NUMBER-OF TH.N) (:F BE.PASV FILL.V) (:P WITH.P (:F K WATER.N))))
______________________________________________________________________
[11]>'
        };
$VAR1 = {
          'Batch' => [
                       '5 much A gets more than B?',
                       '(a) Rs 750 (b) Rs 850 (c) Rs 650 (d) Rs 500 7.',
                       '10 years before father’s age was 4 1 time his son’s 3 3 time son’s age.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 8]: [5, much, A, gets, more, than, B, ?]
Parsing [sent. 2 len. 22]: [-LRB-, a, -RRB-, Rs, 750, -LRB-, b, -RRB-, Rs, 850, -LRB-, c, -RRB-, Rs, 650, -LRB-, d, -RRB-, Rs, 500, 7, .]
Parsing [sent. 3 len. 20]: [10, years, before, father, 's, age, was, 4, 1, time, his, son, 's, 3, 3, time, son, 's, age, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 50 words in 3 sentences (18.64 wds/sec; 1.12 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (CD 5) (JJ much) (NN A))
    (VP (VBZ gets)
      (NP
        (QP (JJR more) (IN than) (CD B))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(A-3, 5-1)',
                                                       'amod(A-3, much-2)',
                                                       'nsubj(gets-4, A-3)',
                                                       'mwe(than-6, more-5)',
                                                       'quantmod(B-7, than-6)',
                                                       'dobj(gets-4, B-7)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Rs)
      (S
        (NP
          (NP
            (NP (CD 750))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (NNP Rs) (CD 850)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (NNP Rs) (NNP 650)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NNP Rs))
          (ADJP (CD 500) (CD 7)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(Rs-19, 750-5)',
                                                       'dep(750-5, b-7)',
                                                       'dep(750-5, Rs-9)',
                                                       'num(Rs-9, 850-10)',
                                                       'dep(750-5, c-12)',
                                                       'nn(Rs-19, Rs-14)',
                                                       'nn(Rs-19, 650-15)',
                                                       'appos(Rs-19, d-17)',
                                                       'xcomp(Rs-4, Rs-19)',
                                                       'number(7-21, 500-20)',
                                                       'amod(Rs-19, 7-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN before)
        (NP
          (NP (NN father) (POS \'s))
          (NN age))))
    (VP (VBD was)
      (NP
        (NP
          (QP (CD 4) (CD 1))
          (NN time))
        (SBAR
          (S
            (NP
              (NP (PRP$ his) (NN son) (POS \'s))
              (ADJP
                (QP (CD 3) (CD 3)))
              (NN time) (NN son))
            (VP (VBZ \'s)
              (NP (NN age)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(years-2, 10-1)',
                                                       'nsubj(time-10, years-2)',
                                                       'poss(age-6, father-4)',
                                                       'prep_before(years-2, age-6)',
                                                       'cop(time-10, was-7)',
                                                       'number(1-9, 4-8)',
                                                       'num(time-10, 1-9)',
                                                       'poss(son-12, his-11)',
                                                       'poss(son-17, son-12)',
                                                       'number(3-15, 3-14)',
                                                       'num(son-17, 3-15)',
                                                       'nn(son-17, time-16)',
                                                       'nsubj(age-19, son-17)',
                                                       'cop(age-19, \'s-18)',
                                                       'rcmod(time-10, age-19)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (CD 5) (JJ much) (NN A))
    (VP (VBZ gets)
      (NP
        (QP (JJR more) (IN than) (CD B))))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Rs)
      (S
        (NP
          (NP
            (NP (CD 750))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (NNP Rs) (CD 850)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (NNP Rs) (NNP 650)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NNP Rs))
          (ADJP (CD 500) (CD 7)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN before)
        (NP
          (NP (NN father) (POS \\\'s))
          (NN age))))
    (VP (VBD was)
      (NP
        (NP
          (QP (CD 4) (CD 1))
          (NN time))
        (SBAR
          (S
            (NP
              (NP (PRP$ his) (NN son) (POS \\\'s))
              (ADJP
                (QP (CD 3) (CD 3)))
              (NN time) (NN son))
            (VP (VBZ \\\'s)
              (NP (NN age)))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 5) (JJ much) (NN A))
    (VP (VBZ gets)
      (NP
        (QP (JJR more) (IN than) (CD B))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 5) (JJ much) (NN A))
    (VP (VBZ gets)
      (NP
        (QP (JJR more) (IN than) (CD B))))
    (\\. ?))))))
'
        };
Submitting expect

(5 MUCH A GETS MORE THAN B ?)


NIL
______________________________________________________________________
[12]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Rs)
      (S
        (NP
          (NP
            (NP (CD 750))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (NNP Rs) (CD 850)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (NNP Rs) (NNP 650)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NNP Rs))
          (ADJP (CD 500) (CD 7)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB Rs)
      (S
        (NP
          (NP
            (NP (CD 750))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (NNP Rs) (CD 850)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (NNP Rs) (NNP 650)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NNP Rs))
          (ADJP (CD 500) (CD 7))))))))
'
        };
Submitting expect

(-LRB- A -RRB- RS 750 -LRB- B -RRB- RS 850 -LRB- C -RRB- RS 650 -LRB- D -RRB- RS 500 7)


NIL
______________________________________________________________________
[13]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN before)
        (NP
          (NP (NN father) (POS \\\'s))
          (NN age))))
    (VP (VBD was)
      (NP
        (NP
          (QP (CD 4) (CD 1))
          (NN time))
        (SBAR
          (S
            (NP
              (NP (PRP$ his) (NN son) (POS \\\'s))
              (ADJP
                (QP (CD 3) (CD 3)))
              (NN time) (NN son))
            (VP (VBZ \\\'s)
              (NP (NN age)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN before)
        (NP
          (NP (NN father) (POS \\\'s))
          (NN age))))
    (VP (VBD was)
      (NP
        (NP
          (QP (CD 4) (CD 1))
          (NN time))
        (SBAR
          (S
            (NP
              (NP (PRP$ his) (NN son) (POS \\\'s))
              (ADJP
                (QP (CD 3) (CD 3)))
              (NN time) (NN son))
            (VP (VBZ \\\'s)
              (NP (NN age))))))))))
'
        };
Submitting expect

(10 YEARS BEFORE FATHER 'S AGE WAS 4 1 TIME HIS SON 'S 3 3 TIME SON 'S AGE)

 SOME_NUMBER_OF YEARS CAN BE BEFORE AN AGE.
 FATHER MAY HAVE AN AGE.
 A TIME SON CAN BE AN AGE.
 A SON MAY HAVE A TIME SON.
 A MALE MAY HAVE A SON.

((:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) BEFORE.P (:Q THE AGE.N)) (:I (:F K FATHER.N) HAVE.V (:Q DET AGE.N))
 (:I (:Q THE (:F NN TIME.N SON.N)) (:F K AGE.N)) (:I (:Q THE SON.N) HAVE.V (:Q DET (:F NN TIME.N SON.N)))
 (:I (:Q DET MALE*.N) HAVE.V (:Q DET SON.N)))
______________________________________________________________________
[14]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(10 YEARS BEFORE FATHER \'S AGE WAS 4 1 TIME HIS SON \'S 3 3 TIME SON \'S AGE)

 SOME_NUMBER_OF YEARS CAN BE BEFORE AN AGE.
 FATHER MAY HAVE AN AGE.
 A TIME SON CAN BE AN AGE.
 A SON MAY HAVE A TIME SON.
 A MALE MAY HAVE A SON.

((:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) BEFORE.P (:Q THE AGE.N)) (:I (:F K FATHER.N) HAVE.V (:Q DET AGE.N))
 (:I (:Q THE (:F NN TIME.N SON.N)) (:F K AGE.N)) (:I (:Q THE SON.N) HAVE.V (:Q DET (:F NN TIME.N SON.N)))
 (:I (:Q DET MALE*.N) HAVE.V (:Q DET SON.N)))
______________________________________________________________________
[14]>'
        };
$VAR1 = {
          'Batch' => [
                       '7 8.',
                       'Find the sum of 5.',
                       '3 + 3.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 3]: [7, 8, .]
Parsing [sent. 2 len. 6]: [Find, the, sum, of, 5, .]
Parsing [sent. 3 len. 4]: [3, +, 3, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 13 words in 3 sentences (7.10 wds/sec; 1.64 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(FRAG
    (NP (CD 7) (CD 8))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(8-2, 7-1)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (CD 5)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(sum-3, the-2)',
                                                       'dobj(Find-1, sum-3)',
                                                       'prep_of(sum-3, 5-5)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(+-2, 3-1)',
                                                       'dobj(+-2, 3-3)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((FRAG
    (NP (CD 7) (CD 8))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (CD 5)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (CD 7) (CD 8))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (CD 7) (CD 8)))))
'
        };
Submitting expect

(7 8)


NIL
______________________________________________________________________
[15]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (CD 5)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (CD 5))))))))
'
        };
Submitting expect

(FIND THE SUM OF 5)


(NIL)
______________________________________________________________________
[16]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (LS 3))
    (VP (VB +)
      (NP (CD 3))))))
'
        };
Submitting expect

(3 + 3)


NIL
______________________________________________________________________
[17]> Got result
$VAR1 = {
          'Batch' => [
                       '25 + 12.',
                       '1 . .',
                       '(a) 20.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 4]: [25, +, 12, .]
Parsing [sent. 2 len. 3]: [1, ., .]
Parsing [sent. 3 len. 5]: [-LRB-, a, -RRB-, 20, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 12 words in 3 sentences (9.52 wds/sec; 2.38 sents/sec).
Error
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 25))
    (QP (CD +) (CD 12))))'
        };
$VAR1 = {
          'Tree' => '((NP (CD 1) (RB \\.)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 25))
    (QP (CD +) (CD 12))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 25))
    (QP (CD +) (CD 12)))))
'
        };
Submitting expect

(25 + 12)


NIL
______________________________________________________________________
[18]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP (CD 1) (RB \\.)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP (CD 1) (RB \\.))))
'
        };
Submitting expect

(1 .)


NIL
______________________________________________________________________
[19]> Got result
$VAR1 = {
          'Batch' => [
                       '069 . .',
                       '(c) 20.',
                       '69 (d) 5 years 10.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 3]: [069, ., .]
Parsing [sent. 2 len. 5]: [-LRB-, c, -RRB-, 20, .]
Parsing [sent. 3 len. 8]: [69, -LRB-, d, -RRB-, 5, years, 10, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 16 words in 3 sentences (12.33 wds/sec; 2.31 sents/sec).
Error
$VAR1 = {
          'Tree' => '((FRAG
    (ADJP (JJ 069)))'
        };
$VAR1 = {
          'Tree' => '(num(years-6\\, 5-5)
dep(69-1\\, years-6)
dep(years-6\\, 10-7)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (ADJP (JJ 069)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (ADJP (JJ 069))))
'
        };
Submitting expect
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '(num(years-6\\, 5-5)
dep(69-1\\, years-6)
dep(years-6\\, 10-7)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'(num(years-6\\, 5-5)
dep(69-1\\, years-6)
dep(years-6\\, 10-7))))
'
        };
Submitting expect

(5-5 DEP YEARS-6 DEP 10-7)


NIL
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       'A tank is filled up by a pipe A in 5 minutes while it is emptied by a pipe B in 10 minutes.',
                       'When the tank is halffilled up two pipes are opened simultaneously.',
                       'Find the time required so that 3 th of the tank is filled up.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 24]: [A, tank, is, filled, up, by, a, pipe, A, in, 5, minutes, while, it, is, emptied, by, a, pipe, B, in, 10, minutes, .]
Parsing [sent. 2 len. 12]: [When, the, tank, is, halffilled, up, two, pipes, are, opened, simultaneously, .]
Parsing [sent. 3 len. 15]: [Find, the, time, required, so, that, 3, th, of, the, tank, is, filled, up, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 51 words in 3 sentences (16.17 wds/sec; 0.95 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT A) (NN tank))
    (VP (VBZ is)
      (VP (VBN filled)
        (PRT (RP up))
        (PP (IN by)
          (NP
            (NP (DT a) (NN pipe) (NN A))
            (PP (IN in)
              (NP (CD 5) (NNS minutes)))))
        (SBAR (IN while)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN emptied)
                (PP (IN by)
                  (NP
                    (NP (DT a) (NN pipe) (NN B))
                    (PP (IN in)
                      (NP (CD 10) (NNS minutes)))))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(tank-2, A-1)',
                                                       'nsubjpass(filled-4, tank-2)',
                                                       'auxpass(filled-4, is-3)',
                                                       'prt(filled-4, up-5)',
                                                       'det(A-9, a-7)',
                                                       'nn(A-9, pipe-8)',
                                                       'agent(filled-4, A-9)',
                                                       'num(minutes-12, 5-11)',
                                                       'prep_in(A-9, minutes-12)',
                                                       'mark(emptied-16, while-13)',
                                                       'nsubjpass(emptied-16, it-14)',
                                                       'auxpass(emptied-16, is-15)',
                                                       'advcl(filled-4, emptied-16)',
                                                       'det(B-20, a-18)',
                                                       'nn(B-20, pipe-19)',
                                                       'agent(emptied-16, B-20)',
                                                       'num(minutes-23, 10-22)',
                                                       'prep_in(B-20, minutes-23)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NN tank))
        (VP (VBZ is)
          (VP (VBN halffilled)
            (ADVP (RB up)
              (NP (CD two) (NNS pipes)))))))
    (VP (VBP are)
      (VP (VBN opened)
        (ADVP (RB simultaneously))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'advmod(halffilled-5, When-1)',
                                                       'det(tank-3, the-2)',
                                                       'nsubjpass(halffilled-5, tank-3)',
                                                       'auxpass(halffilled-5, is-4)',
                                                       'advcl(opened-10, halffilled-5)',
                                                       'csubjpass(opened-10, halffilled-5)',
                                                       'csubjpass(opened-10, halffilled-5)',
                                                       'advmod(halffilled-5, up-6)',
                                                       'num(pipes-8, two-7)',
                                                       'pobj(up-6, pipes-8)',
                                                       'auxpass(opened-10, are-9)',
                                                       'advmod(opened-10, simultaneously-11)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN time))
        (VP (VBN required)
          (SBAR (RB so) (IN that)
            (S
              (NP
                (NP (CD 3) (NN th))
                (PP (IN of)
                  (NP (DT the) (NN tank))))
              (VP (VBZ is)
                (VP (VBN filled)
                  (PRT (RP up)))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(time-3, the-2)',
                                                       'dobj(Find-1, time-3)',
                                                       'partmod(time-3, required-4)',
                                                       'advmod(filled-13, so-5)',
                                                       'dep(filled-13, that-6)',
                                                       'num(th-8, 3-7)',
                                                       'nsubjpass(filled-13, th-8)',
                                                       'det(tank-11, the-10)',
                                                       'prep_of(th-8, tank-11)',
                                                       'auxpass(filled-13, is-12)',
                                                       'advcl(required-4, filled-13)',
                                                       'ccomp(required-4, filled-13)',
                                                       'prt(filled-13, up-14)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (DT A) (NN tank))
    (VP (VBZ is)
      (VP (VBN filled)
        (PRT (RP up))
        (PP (IN by)
          (NP
            (NP (DT a) (NN pipe) (NN A))
            (PP (IN in)
              (NP (CD 5) (NNS minutes)))))
        (SBAR (IN while)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN emptied)
                (PP (IN by)
                  (NP
                    (NP (DT a) (NN pipe) (NN B))
                    (PP (IN in)
                      (NP (CD 10) (NNS minutes)))))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NN tank))
        (VP (VBZ is)
          (VP (VBN halffilled)
            (ADVP (RB up)
              (NP (CD two) (NNS pipes)))))))
    (VP (VBP are)
      (VP (VBN opened)
        (ADVP (RB simultaneously))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN time))
        (VP (VBN required)
          (SBAR (RB so) (IN that)
            (S
              (NP
                (NP (CD 3) (NN th))
                (PP (IN of)
                  (NP (DT the) (NN tank))))
              (VP (VBZ is)
                (VP (VBN filled)
                  (PRT (RP up)))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT A) (NN tank))
    (VP (VBZ is)
      (VP (VBN filled)
        (PRT (RP up))
        (PP (IN by)
          (NP
            (NP (DT a) (NN pipe) (NN A))
            (PP (IN in)
              (NP (CD 5) (NNS minutes)))))
        (SBAR (IN while)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN emptied)
                (PP (IN by)
                  (NP
                    (NP (DT a) (NN pipe) (NN B))
                    (PP (IN in)
                      (NP (CD 10) (NNS minutes)))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT A) (NN tank))
    (VP (VBZ is)
      (VP (VBN filled)
        (PRT (RP up))
        (PP (IN by)
          (NP
            (NP (DT a) (NN pipe) (NN A))
            (PP (IN in)
              (NP (CD 5) (NNS minutes)))))
        (SBAR (IN while)
          (S
            (NP (PRP it))
            (VP (VBZ is)
              (VP (VBN emptied)
                (PP (IN by)
                  (NP
                    (NP (DT a) (NN pipe) (NN B))
                    (PP (IN in)
                      (NP (CD 10) (NNS minutes))))))))))))))
'
        };
Submitting expect

(A TANK IS FILLED UP BY A PIPE A IN 5 MINUTES WHILE IT IS EMPTIED BY A PIPE B IN 10 MINUTES)

 A TANK MAY BE FILL_UP -ED BY A PIPE A.
 A PIPE A CAN BE IN SOME_NUMBER_OF MINUTES.
 A THING-REFERRED-TO MAY BE EMPTY -ED BY A PIPE B.
 A PIPE B CAN BE IN SOME_NUMBER_OF MINUTES.

((:I (:Q A{N} TANK.N) (:F BE.PASV FILL_UP.V) (:P BY.P (:Q A{N} (:F NN PIPE.N A.N))))
 (:I (:Q A{N} (:F NN PIPE.N A.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR MINUTE.N)))
 (:I (:Q DET THING-REFERRED-TO*.N) (:F BE.PASV EMPTY.V) (:P BY.P (:Q A{N} (:F NN PIPE.N B.N))))
 (:I (:Q A{N} (:F NN PIPE.N B.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR MINUTE.N))))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A TANK IS FILLED UP BY A PIPE A IN 5 MINUTES WHILE IT IS EMPTIED BY A PIPE B IN 10 MINUTES)

 A TANK MAY BE FILL_UP -ED BY A PIPE A.
 A PIPE A CAN BE IN SOME_NUMBER_OF MINUTES.
 A THING-REFERRED-TO MAY BE EMPTY -ED BY A PIPE B.
 A PIPE B CAN BE IN SOME_NUMBER_OF MINUTES.

((:I (:Q A{N} TANK.N) (:F BE.PASV FILL_UP.V) (:P BY.P (:Q A{N} (:F NN PIPE.N A.N))))
 (:I (:Q A{N} (:F NN PIPE.N A.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR MINUTE.N)))
 (:I (:Q DET THING-REFERRED-TO*.N) (:F BE.PASV EMPTY.V) (:P BY.P (:Q A{N} (:F NN PIPE.N B.N))))
 (:I (:Q A{N} (:F NN PIPE.N B.N)) IN.P (:Q SOME-NUMBER-OF (:F PLUR MINUTE.N))))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NN tank))
        (VP (VBZ is)
          (VP (VBN halffilled)
            (ADVP (RB up)
              (NP (CD two) (NNS pipes)))))))
    (VP (VBP are)
      (VP (VBN opened)
        (ADVP (RB simultaneously))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR
      (WHADVP (WRB When))
      (S
        (NP (DT the) (NN tank))
        (VP (VBZ is)
          (VP (VBN halffilled)
            (ADVP (RB up)
              (NP (CD two) (NNS pipes)))))))
    (VP (VBP are)
      (VP (VBN opened)
        (ADVP (RB simultaneously)))))))
'
        };
Submitting expect

(WHEN THE TANK IS HALFFILLED UP TWO PIPES ARE OPENED SIMULTANEOUSLY)

 A TANK MAY BE HALFFILL -ED.

((:I (:Q THE TANK.N) (:F BE.PASV HALFFILL.V)))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(WHEN THE TANK IS HALFFILLED UP TWO PIPES ARE OPENED SIMULTANEOUSLY)

 A TANK MAY BE HALFFILL -ED.

((:I (:Q THE TANK.N) (:F BE.PASV HALFFILL.V)))
______________________________________________________________________
[5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN time))
        (VP (VBN required)
          (SBAR (RB so) (IN that)
            (S
              (NP
                (NP (CD 3) (NN th))
                (PP (IN of)
                  (NP (DT the) (NN tank))))
              (VP (VBZ is)
                (VP (VBN filled)
                  (PRT (RP up)))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN time))
        (VP (VBN required)
          (SBAR (RB so) (IN that)
            (S
              (NP
                (NP (CD 3) (NN th))
                (PP (IN of)
                  (NP (DT the) (NN tank))))
              (VP (VBZ is)
                (VP (VBN filled)
                  (PRT (RP up))))))))))))
'
        };
Submitting expect

(FIND THE TIME REQUIRED SO THAT 3 TH OF THE TANK IS FILLED UP)

 A TIME MAY BE REQUIRE -ED.
 SOME_NUMBER_OF TH OF A TANK MAY BE FILL_UP -ED.
 A TANK MAY HAVE A TH.

((:I (:Q THE TIME.N) (:F BE.PASV REQUIRE.V)) (:I (:A (:Q SOME-NUMBER-OF TH.N) (:P OF.P (:Q THE TANK.N))) (:F BE.PASV FILL_UP.V))
 (:I (:Q DET TANK.N) HAVE.V (:Q DET TH.N)))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THE TIME REQUIRED SO THAT 3 TH OF THE TANK IS FILLED UP)

 A TIME MAY BE REQUIRE -ED.
 SOME_NUMBER_OF TH OF A TANK MAY BE FILL_UP -ED.
 A TANK MAY HAVE A TH.

((:I (:Q THE TIME.N) (:F BE.PASV REQUIRE.V)) (:I (:A (:Q SOME-NUMBER-OF TH.N) (:P OF.P (:Q THE TANK.N))) (:F BE.PASV FILL_UP.V))
 (:I (:Q DET TANK.N) HAVE.V (:Q DET TH.N)))
______________________________________________________________________
[6]>'
        };
$VAR1 = {
          'Batch' => [
                       '4 (a) 2 minutes 30 seconds (b) 5 minutes (c) 10 minutes (d) 4 minutes 3 4 11.',
                       'Simplify: 1 494 2 4 ÷ of 7 + 999 × 99 3 9 2 495 (a) 98902 (b) 10000 (c) 99000 (d) 11111 12.',
                       'Find the ratio of purchase price and the sell price so (a) 6 : 7 (b) 5 : 9 (c) 3 : 5 (d) 4 : 7 13.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 27]: [4, -LRB-, a, -RRB-, 2, minutes, 30, seconds, -LRB-, b, -RRB-, 5, minutes, -LRB-, c, -RRB-, 10, minutes, -LRB-, d, -RRB-, 4, minutes, 3, 4, 11, .]
Parsing [sent. 2 len. 35]: [Simplify, :, 1, 494, 2, 4, ÷, of, 7, +, 999, ×, 99, 3, 9, 2, 495, -LRB-, a, -RRB-, 98902, -LRB-, b, -RRB-, 10000, -LRB-, c, -RRB-, 99000, -LRB-, d, -RRB-, 11111, 12, .]
Parsing [sent. 3 len. 37]: [Find, the, ratio, of, purchase, price, and, the, sell, price, so, -LRB-, a, -RRB-, 6, :, 7, -LRB-, b, -RRB-, 5, :, 9, -LRB-, c, -RRB-, 3, :, 5, -LRB-, d, -RRB-, 4, :, 7, 13, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 99 words in 3 sentences (17.93 wds/sec; 0.54 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (CD 4))
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (NP (CD 2) (NNS minutes)))
    (NP
      (NP
        (NP (CD 30) (NNS seconds))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 5) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 10) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 4) (NNS minutes)))
    (NP
      (NP
        (QP (CD 3) (CD 4)))
      (NP (CD 11)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(4-1, a-3)',
                                                       'num(minutes-6, 2-5)',
                                                       'dep(a-3, minutes-6)',
                                                       'num(seconds-8, 30-7)',
                                                       'dep(4-1, seconds-8)',
                                                       'dep(seconds-8, b-10)',
                                                       'num(minutes-13, 5-12)',
                                                       'dep(seconds-8, minutes-13)',
                                                       'dep(minutes-13, c-15)',
                                                       'num(minutes-18, 10-17)',
                                                       'dep(4-1, minutes-18)',
                                                       'appos(minutes-18, d-20)',
                                                       'num(minutes-23, 4-22)',
                                                       'dep(minutes-18, minutes-23)',
                                                       'number(4-25, 3-24)',
                                                       'dep(4-1, 4-25)',
                                                       'dep(4-25, 11-26)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(FRAG
    (NP (NNP Simplify))
    (: :)
    (FRAG
      (X
        (NP
          (NP
            (QP (CD 1) (CD 494))
            (ADJP (CD 2) (CD 4))
            (NNS ÷))
          (PP (IN of)
            (NP (CD 7) (NNS +))))
        (NP (CD 999) (NNS ×))
        (NP
          (NP (CD 99))
          (NP
            (NP
              (NP (CD 3)
                (ADJP
                  (QP (CD 9) (CD 2)))
                (JJ 495)
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NN 98902)
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NNS 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP
              (NP (CD 99000))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-)))))
      (NP (CD 11111) (CD 12)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'number(494-4, 1-3)',
                                                       'num(÷-7, 494-4)',
                                                       'number(4-6, 2-5)',
                                                       'amod(÷-7, 4-6)',
                                                       'dep(99-13, ÷-7)',
                                                       'num(+-10, 7-9)',
                                                       'prep_of(÷-7, +-10)',
                                                       'num(×-12, 999-11)',
                                                       'dep(99-13, ×-12)',
                                                       'dep(12-34, 99-13)',
                                                       'num(10000-25, 3-14)',
                                                       'number(2-16, 9-15)',
                                                       'num(10000-25, 2-16)',
                                                       'amod(10000-25, 495-17)',
                                                       'dep(10000-25, a-19)',
                                                       'nn(10000-25, 98902-21)',
                                                       'dep(10000-25, b-23)',
                                                       'dep(99-13, 10000-25)',
                                                       'dep(10000-25, c-27)',
                                                       'dep(10000-25, 99000-29)',
                                                       'dep(99000-29, d-31)',
                                                       'num(12-34, 11111-33)',
                                                       'dep(Simplify-1, 12-34)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN of)
            (NP (NN purchase) (NN price))))
        (CC and)
        (NP
          (NP
            (NP (DT the) (NN sell) (NN price) (RB so))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NP (CD 6)))
          (: :)
          (NP
            (NP (CD 7))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 5)))
          (: :)
          (NP
            (NP (CD 9))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (: :)
          (NP
            (NP (CD 5))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (: :)
          (NP
            (NP (CD 7))
            (NP (CD 13))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(ratio-3, the-2)',
                                                       'dobj(Find-1, ratio-3)',
                                                       'nn(price-6, purchase-5)',
                                                       'prep_of(ratio-3, price-6)',
                                                       'det(price-10, the-8)',
                                                       'nn(price-10, sell-9)',
                                                       'dobj(Find-1, price-10)',
                                                       'conj_and(ratio-3, price-10)',
                                                       'advmod(price-10, so-11)',
                                                       'dep(price-10, a-13)',
                                                       'dep(price-10, 6-15)',
                                                       'dep(price-10, 7-17)',
                                                       'dep(7-17, b-19)',
                                                       'dep(7-17, 5-21)',
                                                       'dep(price-10, 9-23)',
                                                       'dep(9-23, c-25)',
                                                       'dep(9-23, 3-27)',
                                                       'dep(price-10, 5-29)',
                                                       'appos(5-29, d-31)',
                                                       'dep(5-29, 4-33)',
                                                       'dep(price-10, 7-35)',
                                                       'dep(7-35, 13-36)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 4))
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (NP (CD 2) (NNS minutes)))
    (NP
      (NP
        (NP (CD 30) (NNS seconds))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 5) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 10) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 4) (NNS minutes)))
    (NP
      (NP
        (QP (CD 3) (CD 4)))
      (NP (CD 11)))))'
        };
$VAR1 = {
          'Tree' => '((FRAG
    (NP (NNP Simplify))
    (\\: \\:)
    (FRAG
      (X
        (NP
          (NP
            (QP (CD 1) (CD 494))
            (ADJP (CD 2) (CD 4))
            (NNS ÷))
          (PP (IN of)
            (NP (CD 7) (NNS +))))
        (NP (CD 999) (NNS ×))
        (NP
          (NP (CD 99))
          (NP
            (NP
              (NP (CD 3)
                (ADJP
                  (QP (CD 9) (CD 2)))
                (JJ 495)
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NN 98902)
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NNS 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP
              (NP (CD 99000))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-)))))
      (NP (CD 11111) (CD 12)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN of)
            (NP (NN purchase) (NN price))))
        (CC and)
        (NP
          (NP
            (NP (DT the) (NN sell) (NN price) (RB so))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NP (CD 6)))
          (\\: \\:)
          (NP
            (NP (CD 7))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 5)))
          (\\: \\:)
          (NP
            (NP (CD 9))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (\\: \\:)
          (NP
            (NP (CD 5))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (\\: \\:)
          (NP
            (NP (CD 7))
            (NP (CD 13))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 4))
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (NP (CD 2) (NNS minutes)))
    (NP
      (NP
        (NP (CD 30) (NNS seconds))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 5) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 10) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 4) (NNS minutes)))
    (NP
      (NP
        (QP (CD 3) (CD 4)))
      (NP (CD 11)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 4))
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (NP (CD 2) (NNS minutes)))
    (NP
      (NP
        (NP (CD 30) (NNS seconds))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 5) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 10) (NNS minutes)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 4) (NNS minutes)))
    (NP
      (NP
        (QP (CD 3) (CD 4)))
      (NP (CD 11))))))
'
        };
Submitting expect

(4 -LRB- A -RRB- 2 MINUTES 30 SECONDS -LRB- B -RRB- 5 MINUTES -LRB- C -RRB- 10 MINUTES -LRB- D -RRB- 4 MINUTES 3 4 11)


NIL
______________________________________________________________________
[7]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (NNP Simplify))
    (\\: \\:)
    (FRAG
      (X
        (NP
          (NP
            (QP (CD 1) (CD 494))
            (ADJP (CD 2) (CD 4))
            (NNS ÷))
          (PP (IN of)
            (NP (CD 7) (NNS +))))
        (NP (CD 999) (NNS ×))
        (NP
          (NP (CD 99))
          (NP
            (NP
              (NP (CD 3)
                (ADJP
                  (QP (CD 9) (CD 2)))
                (JJ 495)
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NN 98902)
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NNS 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP
              (NP (CD 99000))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-)))))
      (NP (CD 11111) (CD 12)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (NNP Simplify))
    (\\: \\:)
    (FRAG
      (X
        (NP
          (NP
            (QP (CD 1) (CD 494))
            (ADJP (CD 2) (CD 4))
            (NNS ÷))
          (PP (IN of)
            (NP (CD 7) (NNS +))))
        (NP (CD 999) (NNS ×))
        (NP
          (NP (CD 99))
          (NP
            (NP
              (NP (CD 3)
                (ADJP
                  (QP (CD 9) (CD 2)))
                (JJ 495)
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NN 98902)
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NNS 10000))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP
              (NP (CD 99000))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-)))))
      (NP (CD 11111) (CD 12))))))
'
        };
Submitting expect

*** - GET: 10000 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 10000 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN of)
            (NP (NN purchase) (NN price))))
        (CC and)
        (NP
          (NP
            (NP (DT the) (NN sell) (NN price) (RB so))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NP (CD 6)))
          (\\: \\:)
          (NP
            (NP (CD 7))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 5)))
          (\\: \\:)
          (NP
            (NP (CD 9))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (\\: \\:)
          (NP
            (NP (CD 5))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (\\: \\:)
          (NP
            (NP (CD 7))
            (NP (CD 13))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN of)
            (NP (NN purchase) (NN price))))
        (CC and)
        (NP
          (NP
            (NP (DT the) (NN sell) (NN price) (RB so))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NP (CD 6)))
          (\\: \\:)
          (NP
            (NP (CD 7))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 5)))
          (\\: \\:)
          (NP
            (NP (CD 9))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (\\: \\:)
          (NP
            (NP (CD 5))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (\\: \\:)
          (NP
            (NP (CD 7))
            (NP (CD 13)))))))))
'
        };
Submitting expect

(FIND THE RATIO OF PURCHASE PRICE AND THE SELL PRICE SO -LRB- A -RRB- 6 : 7 -LRB- B -RRB- 5 : 9 -LRB- C -RRB- 3 : 5 -LRB- D -RRB- 4 : 7 13)


(NIL)
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'Batch' => [
                       'Find the number between 400 and 500 which is divisible by 12, 16 and 24.',
                       '(a) 420 (b) 430 (c) 410 (d) 480 14.',
                       'The ratio of two numbers is 5 : 7 and their difference is 60, find the numbers.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 17]: [Find, the, number, between, 400, and, 500, which, is, divisible, by, 12, ,, 16, and, 24, .]
Parsing [sent. 2 len. 18]: [-LRB-, a, -RRB-, 420, -LRB-, b, -RRB-, 430, -LRB-, c, -RRB-, 410, -LRB-, d, -RRB-, 480, 14, .]
Parsing [sent. 3 len. 19]: [The, ratio, of, two, numbers, is, 5, :, 7, and, their, difference, is, 60, ,, find, the, numbers, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 54 words in 3 sentences (17.87 wds/sec; 0.99 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN number))
        (PP (IN between)
          (NP (CD 400)
            (CC and)
            (CD 500)))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ is)
              (ADJP (JJ divisible)
                (PP (IN by)
                  (NP (CD 12) (, ,) (CD 16)
                    (CC and)
                    (CD 24)))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(number-3, the-2)',
                                                       'dobj(Find-1, number-3)',
                                                       'nsubj(divisible-10, number-3)',
                                                       'prep_between(number-3, 400-5)',
                                                       'prep_between(number-3, 500-7)',
                                                       'conj_and(400-5, 500-7)',
                                                       'cop(divisible-10, is-9)',
                                                       'rcmod(number-3, divisible-10)',
                                                       'prep_by(divisible-10, 12-12)',
                                                       'num(12-12, 16-14)',
                                                       'prep_by(divisible-10, 24-16)',
                                                       'conj_and(12-12, 24-16)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 420))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 430)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 410)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 480) (CD 14)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(410-12, 420-4)',
                                                       'dep(420-4, b-6)',
                                                       'partmod(420-4, 430-8)',
                                                       'dep(420-4, c-10)',
                                                       'dep(410-12, d-14)',
                                                       'num(14-17, 480-16)',
                                                       'dobj(410-12, 14-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 5))))
    (: :)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP (PRP$ their) (NN difference)))
      (VP (VBZ is)
        (NP (CD 60))
        (, ,)
        (S
          (VP (VB find)
            (NP (DT the) (NNS numbers))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(ratio-2, The-1)',
                                                       'nsubj(5-7, ratio-2)',
                                                       'num(numbers-5, two-4)',
                                                       'prep_of(ratio-2, numbers-5)',
                                                       'cop(5-7, is-6)',
                                                       'nsubj(60-14, 7-9)',
                                                       'poss(difference-12, their-11)',
                                                       'conj_and(7-9, difference-12)',
                                                       'nsubj(60-14, difference-12)',
                                                       'cop(60-14, is-13)',
                                                       'parataxis(5-7, 60-14)',
                                                       'dep(60-14, find-16)',
                                                       'det(numbers-18, the-17)',
                                                       'dobj(find-16, numbers-18)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN number))
        (PP (IN between)
          (NP (CD 400)
            (CC and)
            (CD 500)))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ is)
              (ADJP (JJ divisible)
                (PP (IN by)
                  (NP (CD 12) (\\, \\,) (CD 16)
                    (CC and)
                    (CD 24)))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 420))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 430)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 410)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 480) (CD 14)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 5))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP (PRP$ their) (NN difference)))
      (VP (VBZ is)
        (NP (CD 60))
        (\\, \\,)
        (S
          (VP (VB find)
            (NP (DT the) (NNS numbers))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN number))
        (PP (IN between)
          (NP (CD 400)
            (CC and)
            (CD 500)))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ is)
              (ADJP (JJ divisible)
                (PP (IN by)
                  (NP (CD 12) (\\, \\,) (CD 16)
                    (CC and)
                    (CD 24)))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN number))
        (PP (IN between)
          (NP (CD 400)
            (CC and)
            (CD 500)))
        (SBAR
          (WHNP (WDT which))
          (S
            (VP (VBZ is)
              (ADJP (JJ divisible)
                (PP (IN by)
                  (NP (CD 12) (\\, \\,) (CD 16)
                    (CC and)
                    (CD 24))))))))))))
'
        };
Submitting expect

(FIND THE NUMBER BETWEEN 400 AND 500 WHICH IS DIVISIBLE BY 12 , 16 AND 24)


((:I (:Q THE NUMBER.N) BETWEEN.P NIL))
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 420))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 430)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 410)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 480) (CD 14)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 420))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 430)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 410)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 480) (CD 14))))))
'
        };
Submitting expect

*** - STRING: argument 430 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 430 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 5))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP (PRP$ their) (NN difference)))
      (VP (VBZ is)
        (NP (CD 60))
        (\\, \\,)
        (S
          (VP (VB find)
            (NP (DT the) (NNS numbers))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP (CD two) (NNS numbers))))
      (VP (VBZ is)
        (NP (CD 5))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP (PRP$ their) (NN difference)))
      (VP (VBZ is)
        (NP (CD 60))
        (\\, \\,)
        (S
          (VP (VB find)
            (NP (DT the) (NNS numbers)))))))))
'
        };
Submitting expect

(THE RATIO OF TWO NUMBERS IS 5 : 7 AND THEIR DIFFERENCE IS 60 , FIND THE NUMBERS)

 A RATIO OF SOME_NUMBER_OF NUMBERS CAN BE A NUMBER_OR_PORTION.
 SOME NUMBER_OR_PORTION CAN BE A NUMBER_OR_PORTION.
 INDIVIDUAL -S MAY HAVE A DIFFERENCE.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:Q SOME-NUMBER-OF (:F PLUR NUMBER.N)))) NUMBER-OR-PORTION.N) NIL
 (:I (:Q SOME NUMBER-OR-PORTION.N) NUMBER-OR-PORTION.N) (:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET DIFFERENCE.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(THE RATIO OF TWO NUMBERS IS 5 : 7 AND THEIR DIFFERENCE IS 60 , FIND THE NUMBERS)

 A RATIO OF SOME_NUMBER_OF NUMBERS CAN BE A NUMBER_OR_PORTION.
 SOME NUMBER_OR_PORTION CAN BE A NUMBER_OR_PORTION.
 INDIVIDUAL -S MAY HAVE A DIFFERENCE.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:Q SOME-NUMBER-OF (:F PLUR NUMBER.N)))) NUMBER-OR-PORTION.N) NIL
 (:I (:Q SOME NUMBER-OR-PORTION.N) NUMBER-OR-PORTION.N) (:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET DIFFERENCE.N)))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) 150, 210 (b) 500, 700 (c) 50, 110 (d) 55, 115 1 3 9 and . 2 4 16 15.',
                       'Find the H.C.F. and L.C.M. of 1 , (a) 9 3 , 4 16 (b) 3 9 , 16 2 (c) Find the sum of the age of the father and the son at present.',
                       '(a) 65 years (b) 100 years (c) 75 years (d) 90 years . 1 years 2 1 years 2 2 3 1 th of A and C. How 4 age.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 29]: [-LRB-, a, -RRB-, 150, ,, 210, -LRB-, b, -RRB-, 500, ,, 700, -LRB-, c, -RRB-, 50, ,, 110, -LRB-, d, -RRB-, 55, ,, 115, 1, 3, 9, and, .]
Parsing [sent. 2 len. 5]: [2, 4, 16, 15, .]
Parsing [sent. 3 len. 42]: [Find, the, H.C.F., and, L.C.M., of, 1, ,, -LRB-, a, -RRB-, 9, 3, ,, 4, 16, -LRB-, b, -RRB-, 3, 9, ,, 16, 2, -LRB-, c, -RRB-, Find, the, sum, of, the, age, of, the, father, and, the, son, at, present, .]
Parsing [sent. 4 len. 21]: [-LRB-, a, -RRB-, 65, years, -LRB-, b, -RRB-, 100, years, -LRB-, c, -RRB-, 75, years, -LRB-, d, -RRB-, 90, years, .]
Parsing [sent. 5 len. 18]: [1, years, 2, 1, years, 2, 2, 3, 1, th, of, A, and, C., How, 4, age, .]
Parsed file: /tmp/stanfordparser.txt [5 sentences].
Parsed 115 words in 5 sentences (17.94 wds/sec; 0.78 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 150))
      (\\, \\,)
      (NP
        (NP (CD 210))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (NP (CD 500)))
      (\\, \\,)
      (NP
        (NP (CD 700))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))
        (NP (CD 50)))
      (\\, \\,))
    (VP (VBZ 110)
      (S (-LRB- -LRB-)
        (NP (SYM d))
        (-RRB- -RRB-)
        (NP
          (NP (CD 55))
          (\\, \\,)
          (VP (VBG 115)
            (NP
              (NP (CD 1))
              (ADJP (CD 3) (CD 9)))
            (CC and)))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 2) (CD 4))
    (QP (CD 16) (CD 15))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (VP
        (VP (VB Find)
          (NP
            (NP
              (NP (DT the) (NNP H\\.C\\.F\\.)
                (CC and)
                (NNP L\\.C\\.M\\.))
              (PP (IN of)
                (NP (CD 1)))
              (\\, \\,)
              (PRN (-LRB- -LRB-)
                (X (SYM a))
                (-RRB- -RRB-)))
            (ADJP (CD 9) (CD 3))))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP (CD 4) (CD 16)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (ADJP (CD 3) (CD 9)))))
    (\\, \\,)
    (NP
      (NP
        (QP (CD 16) (CD 2)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP
                (NP (DT the) (NN father))
                (CC and)
                (NP (DT the) (NN son)))))))
      (PP (IN at)
        (ADJP (JJ present))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 65)
      (S
        (NP
          (NP
            (NP
              (NP (NNS years))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 100) (NNS years)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 75) (NNS years)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (NP (CD 90) (NNS years)))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 1) (NNS years))
    (PP
      (NP
        (QP (CD 2) (CD 1))
        (NNS years)
        (QP (CD 2) (CD 2)))
      (NP
        (NP
          (QP (CD 3) (CD 1))
          (NN th))
        (PP (IN of)
          (NP (NNP A)
            (CC and)
            (NNP C\\.)))
        (SBAR
          (WHADVP (WRB How))
          (S
            (NP (CD 4))
            (VP (VBP age))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 150))
      (\\, \\,)
      (NP
        (NP (CD 210))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (NP (CD 500)))
      (\\, \\,)
      (NP
        (NP (CD 700))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))
        (NP (CD 50)))
      (\\, \\,))
    (VP (VBZ 110)
      (S (-LRB- -LRB-)
        (NP (SYM d))
        (-RRB- -RRB-)
        (NP
          (NP (CD 55))
          (\\, \\,)
          (VP (VBG 115)
            (NP
              (NP (CD 1))
              (ADJP (CD 3) (CD 9)))
            (CC and)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 150))
      (\\, \\,)
      (NP
        (NP (CD 210))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-))
        (NP (CD 500)))
      (\\, \\,)
      (NP
        (NP (CD 700))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))
        (NP (CD 50)))
      (\\, \\,))
    (VP (VBZ 110)
      (S (-LRB- -LRB-)
        (NP (SYM d))
        (-RRB- -RRB-)
        (NP
          (NP (CD 55))
          (\\, \\,)
          (VP (VBG 115)
            (NP
              (NP (CD 1))
              (ADJP (CD 3) (CD 9)))
            (CC and))))))))
'
        };
Submitting expect

*** - STRING: argument 110 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 110 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 2) (CD 4))
    (QP (CD 16) (CD 15))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 2) (CD 4))
    (QP (CD 16) (CD 15)))))
'
        };
Submitting expect

(2 4 16 15)


NIL
______________________________________________________________________
[3]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (VP
        (VP (VB Find)
          (NP
            (NP
              (NP (DT the) (NNP H\\.C\\.F\\.)
                (CC and)
                (NNP L\\.C\\.M\\.))
              (PP (IN of)
                (NP (CD 1)))
              (\\, \\,)
              (PRN (-LRB- -LRB-)
                (X (SYM a))
                (-RRB- -RRB-)))
            (ADJP (CD 9) (CD 3))))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP (CD 4) (CD 16)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (ADJP (CD 3) (CD 9)))))
    (\\, \\,)
    (NP
      (NP
        (QP (CD 16) (CD 2)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP
                (NP (DT the) (NN father))
                (CC and)
                (NP (DT the) (NN son)))))))
      (PP (IN at)
        (ADJP (JJ present))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (VP
        (VP (VB Find)
          (NP
            (NP
              (NP (DT the) (NNP H\\.C\\.F\\.)
                (CC and)
                (NNP L\\.C\\.M\\.))
              (PP (IN of)
                (NP (CD 1)))
              (\\, \\,)
              (PRN (-LRB- -LRB-)
                (X (SYM a))
                (-RRB- -RRB-)))
            (ADJP (CD 9) (CD 3))))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP (CD 4) (CD 16)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (ADJP (CD 3) (CD 9)))))
    (\\, \\,)
    (NP
      (NP
        (QP (CD 16) (CD 2)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP Find)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP
                (NP (DT the) (NN father))
                (CC and)
                (NP (DT the) (NN son)))))))
      (PP (IN at)
        (ADJP (JJ present)))))))
'
        };
Submitting expect

(FIND THE H.C.F. AND L.C.M. OF 1 , -LRB- A -RRB- 9 3 , 4 16 -LRB- B -RRB- 3 9 , 16 2 -LRB- C -RRB- FIND THE SUM OF THE AGE OF THE FATHER AND THE
 SON AT PRESENT)

 A FATHER MAY HAVE AN AGE.

(NIL (:I (:Q DET FATHER.N) HAVE.V (:Q DET AGE.N)))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THE H.C.F. AND L.C.M. OF 1 , -LRB- A -RRB- 9 3 , 4 16 -LRB- B -RRB- 3 9 , 16 2 -LRB- C -RRB- FIND THE SUM OF THE AGE OF THE FATHER AND THE
 SON AT PRESENT)

 A FATHER MAY HAVE AN AGE.

(NIL (:I (:Q DET FATHER.N) HAVE.V (:Q DET AGE.N)))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 65)
      (S
        (NP
          (NP
            (NP
              (NP (NNS years))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 100) (NNS years)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 75) (NNS years)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (NP (CD 90) (NNS years)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 65)
      (S
        (NP
          (NP
            (NP
              (NP (NNS years))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP (CD 100) (NNS years)))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 75) (NNS years)
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (NP (CD 90) (NNS years))))))))
'
        };
Submitting expect

(-LRB- A -RRB- 65 YEARS -LRB- B -RRB- 100 YEARS -LRB- C -RRB- 75 YEARS -LRB- D -RRB- 90 YEARS)


NIL
______________________________________________________________________
[5]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 1) (NNS years))
    (PP
      (NP
        (QP (CD 2) (CD 1))
        (NNS years)
        (QP (CD 2) (CD 2)))
      (NP
        (NP
          (QP (CD 3) (CD 1))
          (NN th))
        (PP (IN of)
          (NP (NNP A)
            (CC and)
            (NNP C\\.)))
        (SBAR
          (WHADVP (WRB How))
          (S
            (NP (CD 4))
            (VP (VBP age))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 1) (NNS years))
    (PP
      (NP
        (QP (CD 2) (CD 1))
        (NNS years)
        (QP (CD 2) (CD 2)))
      (NP
        (NP
          (QP (CD 3) (CD 1))
          (NN th))
        (PP (IN of)
          (NP (NNP A)
            (CC and)
            (NNP C\\.)))
        (SBAR
          (WHADVP (WRB How))
          (S
            (NP (CD 4))
            (VP (VBP age)))))))))
'
        };
Submitting expect

(1 YEARS 2 1 YEARS 2 2 3 1 TH OF A AND C. HOW 4 AGE)

 SOME NUMBER_OR_PORTION MAY AGE.

(NIL (:I (:Q SOME NUMBER-OR-PORTION.N) AGE.V))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(1 YEARS 2 1 YEARS 2 2 3 1 TH OF A AND C. HOW 4 AGE)

 SOME NUMBER_OR_PORTION MAY AGE.

(NIL (:I (:Q SOME NUMBER-OR-PORTION.N) AGE.V))
______________________________________________________________________
[6]>'
        };
$VAR1 = {
          'Batch' => [
                       '10 years after father’s age will be 2 (c) 3 (b) 2 that there is 16 % profit.',
                       '(a) 16 kg (b) 100 kg (c) 66 kg (d) 48 kg 6.',
                       'Rs 5625 is divided among A, B and C in such a way that A gets half of B and C while B gets (a) 2 years 27 1 , 64 2 (d) 1 27 , 2 64 16.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 24]: [10, years, after, father, 's, age, will, be, 2, -LRB-, c, -RRB-, 3, -LRB-, b, -RRB-, 2, that, there, is, 16, %, profit, .]
Parsing [sent. 2 len. 22]: [-LRB-, a, -RRB-, 16, kg, -LRB-, b, -RRB-, 100, kg, -LRB-, c, -RRB-, 66, kg, -LRB-, d, -RRB-, 48, kg, 6, .]
Parsing [sent. 3 len. 45]: [Rs, 5625, is, divided, among, A, ,, B, and, C, in, such, a, way, that, A, gets, half, of, B, and, C, while, B, gets, -LRB-, a, -RRB-, 2, years, 27, 1, ,, 64, 2, -LRB-, d, -RRB-, 1, 27, ,, 2, 64, 16, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 91 words in 3 sentences (15.80 wds/sec; 0.52 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN after)
        (NP
          (NP (NN father) (POS \'s))
          (NN age))))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP
            (NP (CD 2))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (SBAR
          (NP (CD 2))
          (IN that)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (ADJP (CD 16) (NN %))
                (NN profit)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(years-2, 10-1)',
                                                       'nsubj(2-9, years-2)',
                                                       'poss(age-6, father-4)',
                                                       'prep_after(years-2, age-6)',
                                                       'aux(2-9, will-7)',
                                                       'cop(2-9, be-8)',
                                                       'dep(2-9, c-11)',
                                                       'dep(2-9, 3-13)',
                                                       'dep(2-9, b-15)',
                                                       'dep(is-20, 2-17)',
                                                       'dep(is-20, that-18)',
                                                       'expl(is-20, there-19)',
                                                       'dep(2-9, is-20)',
                                                       'number(%-22, 16-21)',
                                                       'amod(profit-23, %-22)',
                                                       'nsubj(is-20, profit-23)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 16))
    (VP (VBP kg)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 100) (NN kg)
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 66) (NN kg)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 48) (NNP kg) (CD 6)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(kg-5, 16-4)',
                                                       'dep(kg-10, b-7)',
                                                       'num(kg-10, 100-9)',
                                                       'dep(kg-5, kg-10)',
                                                       'dep(kg-10, c-12)',
                                                       'num(kg-15, 66-14)',
                                                       'dep(kg-10, kg-15)',
                                                       'dep(kg-10, d-17)',
                                                       'num(kg-20, 48-19)',
                                                       'dep(kg-10, kg-20)',
                                                       'num(kg-20, 6-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP Rs) (NNP 5625))
    (VP (VBZ is)
      (VP (VBN divided)
        (PP (IN among)
          (NP (NNP A) (, ,) (NNP B)
            (CC and)
            (NNP C)))
        (PP (IN in)
          (NP (PDT such) (DT a) (NN way)))
        (SBAR (IN that)
          (S
            (NP (NNP A))
            (VP (VBZ gets)
              (NP
                (NP (NN half))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C))))
              (SBAR (IN while)
                (S
                  (NP (NNP B))
                  (VP (VBZ gets)
                    (NP
                      (NP
                        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
                        (NP (CD 2) (NNS years))
                        (PP (VBG 27)
                          (NP
                            (NP (CD 1))
                            (, ,)
                            (NP
                              (NP
                                (NP
                                  (QP (CD 64) (CD 2)))
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP d))
                                  (-RRB- -RRB-)))
                              (QP (CD 1) (CD 27))))))
                      (, ,)
                      (NP
                        (NP
                          (QP (CD 2) (CD 64)))
                        (NP (CD 16))))))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nn(5625-2, Rs-1)',
                                                       'nsubjpass(divided-4, 5625-2)',
                                                       'auxpass(divided-4, is-3)',
                                                       'prep_among(divided-4, A-6)',
                                                       'prep_among(divided-4, B-8)',
                                                       'conj_and(A-6, B-8)',
                                                       'prep_among(divided-4, C-10)',
                                                       'conj_and(A-6, C-10)',
                                                       'predet(way-14, such-12)',
                                                       'det(way-14, a-13)',
                                                       'prep_in(divided-4, way-14)',
                                                       'complm(gets-17, that-15)',
                                                       'nsubj(gets-17, A-16)',
                                                       'ccomp(divided-4, gets-17)',
                                                       'dobj(gets-17, half-18)',
                                                       'prep_of(half-18, B-20)',
                                                       'prep_of(half-18, C-22)',
                                                       'conj_and(B-20, C-22)',
                                                       'mark(gets-25, while-23)',
                                                       'nsubj(gets-25, B-24)',
                                                       'advcl(gets-17, gets-25)',
                                                       'dep(-RRB--28, a-27)',
                                                       'num(years-30, 2-29)',
                                                       'dobj(gets-25, years-30)',
                                                       'prep_27(years-30, 1-32)',
                                                       'number(2-35, 64-34)',
                                                       'appos(1-32, 2-35)',
                                                       'appos(2-35, d-37)',
                                                       'number(27-40, 1-39)',
                                                       'num(2-35, 27-40)',
                                                       'number(64-43, 2-42)',
                                                       'appos(years-30, 64-43)',
                                                       'dep(64-43, 16-44)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN after)
        (NP
          (NP (NN father) (POS \\\'s))
          (NN age))))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP
            (NP (CD 2))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (SBAR
          (NP (CD 2))
          (IN that)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (ADJP (CD 16) (NN %))
                (NN profit)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 16))
    (VP (VBP kg)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 100) (NN kg)
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 66) (NN kg)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 48) (NNP kg) (CD 6)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (NNP Rs) (NNP 5625))
    (VP (VBZ is)
      (VP (VBN divided)
        (PP (IN among)
          (NP (NNP A) (\\, \\,) (NNP B)
            (CC and)
            (NNP C)))
        (PP (IN in)
          (NP (PDT such) (DT a) (NN way)))
        (SBAR (IN that)
          (S
            (NP (NNP A))
            (VP (VBZ gets)
              (NP
                (NP (NN half))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C))))
              (SBAR (IN while)
                (S
                  (NP (NNP B))
                  (VP (VBZ gets)
                    (NP
                      (NP
                        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
                        (NP (CD 2) (NNS years))
                        (PP (VBG 27)
                          (NP
                            (NP (CD 1))
                            (\\, \\,)
                            (NP
                              (NP
                                (NP
                                  (QP (CD 64) (CD 2)))
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP d))
                                  (-RRB- -RRB-)))
                              (QP (CD 1) (CD 27))))))
                      (\\, \\,)
                      (NP
                        (NP
                          (QP (CD 2) (CD 64)))
                        (NP (CD 16))))))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN after)
        (NP
          (NP (NN father) (POS \\\'s))
          (NN age))))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP
            (NP (CD 2))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (SBAR
          (NP (CD 2))
          (IN that)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (ADJP (CD 16) (NN %))
                (NN profit)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (CD 10) (NNS years))
      (PP (IN after)
        (NP
          (NP (NN father) (POS \\\'s))
          (NN age))))
    (VP (MD will)
      (VP (VB be)
        (NP
          (NP
            (NP (CD 2))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 3)))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (SBAR
          (NP (CD 2))
          (IN that)
          (S
            (NP (EX there))
            (VP (VBZ is)
              (NP
                (ADJP (CD 16) (NN %))
                (NN profit))))))))))
'
        };
Submitting expect

(10 YEARS AFTER FATHER 'S AGE WILL BE 2 -LRB- C -RRB- 3 -LRB- B -RRB- 2 THAT THERE IS 16 % PROFIT)

 SOME_NUMBER_OF YEARS CAN BE A NUMBER_OR_PORTION.
 SOME_NUMBER_OF YEARS CAN BE AFTER AN AGE.
 FATHER MAY HAVE AN AGE.

((:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) NUMBER-OR-PORTION.N) (:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) AFTER.P (:Q THE AGE.N))
 (:I (:F K FATHER.N) HAVE.V (:Q DET AGE.N)))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(10 YEARS AFTER FATHER \'S AGE WILL BE 2 -LRB- C -RRB- 3 -LRB- B -RRB- 2 THAT THERE IS 16 % PROFIT)

 SOME_NUMBER_OF YEARS CAN BE A NUMBER_OR_PORTION.
 SOME_NUMBER_OF YEARS CAN BE AFTER AN AGE.
 FATHER MAY HAVE AN AGE.

((:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) NUMBER-OR-PORTION.N) (:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) AFTER.P (:Q THE AGE.N))
 (:I (:F K FATHER.N) HAVE.V (:Q DET AGE.N)))
______________________________________________________________________
[7]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 16))
    (VP (VBP kg)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 100) (NN kg)
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 66) (NN kg)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 48) (NNP kg) (CD 6)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 16))
    (VP (VBP kg)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 100) (NN kg)
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 66) (NN kg)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 48) (NNP kg) (CD 6))))))))
'
        };
Submitting expect

(-LRB- A -RRB- 16 KG -LRB- B -RRB- 100 KG -LRB- C -RRB- 66 KG -LRB- D -RRB- 48 KG 6)


NIL
______________________________________________________________________
[8]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP Rs) (NNP 5625))
    (VP (VBZ is)
      (VP (VBN divided)
        (PP (IN among)
          (NP (NNP A) (\\, \\,) (NNP B)
            (CC and)
            (NNP C)))
        (PP (IN in)
          (NP (PDT such) (DT a) (NN way)))
        (SBAR (IN that)
          (S
            (NP (NNP A))
            (VP (VBZ gets)
              (NP
                (NP (NN half))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C))))
              (SBAR (IN while)
                (S
                  (NP (NNP B))
                  (VP (VBZ gets)
                    (NP
                      (NP
                        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
                        (NP (CD 2) (NNS years))
                        (PP (VBG 27)
                          (NP
                            (NP (CD 1))
                            (\\, \\,)
                            (NP
                              (NP
                                (NP
                                  (QP (CD 64) (CD 2)))
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP d))
                                  (-RRB- -RRB-)))
                              (QP (CD 1) (CD 27))))))
                      (\\, \\,)
                      (NP
                        (NP
                          (QP (CD 2) (CD 64)))
                        (NP (CD 16))))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP Rs) (NNP 5625))
    (VP (VBZ is)
      (VP (VBN divided)
        (PP (IN among)
          (NP (NNP A) (\\, \\,) (NNP B)
            (CC and)
            (NNP C)))
        (PP (IN in)
          (NP (PDT such) (DT a) (NN way)))
        (SBAR (IN that)
          (S
            (NP (NNP A))
            (VP (VBZ gets)
              (NP
                (NP (NN half))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C))))
              (SBAR (IN while)
                (S
                  (NP (NNP B))
                  (VP (VBZ gets)
                    (NP
                      (NP
                        (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
                        (NP (CD 2) (NNS years))
                        (PP (VBG 27)
                          (NP
                            (NP (CD 1))
                            (\\, \\,)
                            (NP
                              (NP
                                (NP
                                  (QP (CD 64) (CD 2)))
                                (PRN (-LRB- -LRB-)
                                  (NP (NNP d))
                                  (-RRB- -RRB-)))
                              (QP (CD 1) (CD 27))))))
                      (\\, \\,)
                      (NP
                        (NP
                          (QP (CD 2) (CD 64)))
                        (NP (CD 16)))))))))))))))
'
        };
Submitting expect

*** - GET: 5625 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [9]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 5625 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [9]>'
        };
$VAR1 = {
          'Batch' => [
                       'Average age of A and B is 9 years 4 months and that of B and C is 4 years 8 months.',
                       'How many years A is older than C?',
                       '(b) 20.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 23]: [Average, age, of, A, and, B, is, 9, years, 4, months, and, that, of, B, and, C, is, 4, years, 8, months, .]
Parsing [sent. 2 len. 9]: [How, many, years, A, is, older, than, C, ?]
Parsing [sent. 3 len. 5]: [-LRB-, b, -RRB-, 20, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 37 words in 3 sentences (14.74 wds/sec; 1.20 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (JJ Average) (NN age))
      (PP (IN of)
        (NP (NNP A)
          (CC and)
          (NNP B))))
    (VP (VBZ is)
      (NP
        (NP (CD 9) (NNS years))
        (SBAR
          (S
            (NP
              (NP (CD 4) (NNS months))
              (CC and)
              (NP
                (NP (DT that))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C)))))
            (VP (VBZ is)
              (NP
                (NP (CD 4) (NNS years))
                (NP (CD 8) (NNS months))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'amod(age-2, Average-1)',
                                                       'nsubj(years-9, age-2)',
                                                       'prep_of(age-2, A-4)',
                                                       'prep_of(age-2, B-6)',
                                                       'conj_and(A-4, B-6)',
                                                       'cop(years-9, is-7)',
                                                       'num(years-9, 9-8)',
                                                       'num(months-11, 4-10)',
                                                       'nsubj(years-20, months-11)',
                                                       'conj_and(months-11, that-13)',
                                                       'nsubj(years-20, that-13)',
                                                       'prep_of(that-13, B-15)',
                                                       'prep_of(that-13, C-17)',
                                                       'conj_and(B-15, C-17)',
                                                       'cop(years-20, is-18)',
                                                       'num(years-20, 4-19)',
                                                       'rcmod(years-9, years-20)',
                                                       'num(months-22, 8-21)',
                                                       'dep(years-20, months-22)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHNP
      (WHNP
        (WHADJP (WRB How) (JJ many))
        (NNS years))
      (NP (NNP A)))
    (SQ (VBZ is)
      (NP
        (NP (JJR older))
        (PP (IN than)
          (NP (NNP C)))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'advmod(many-2, How-1)',
                                                       'amod(years-3, many-2)',
                                                       'dep(A-4, years-3)',
                                                       'attr(is-5, A-4)',
                                                       'nsubj(is-5, older-6)',
                                                       'prep_than(older-6, C-8)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (-LRB- -LRB-) (NNP b) (-RRB- -RRB-))
    (NP (CD 20))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(b-2, 20-4)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (JJ Average) (NN age))
      (PP (IN of)
        (NP (NNP A)
          (CC and)
          (NNP B))))
    (VP (VBZ is)
      (NP
        (NP (CD 9) (NNS years))
        (SBAR
          (S
            (NP
              (NP (CD 4) (NNS months))
              (CC and)
              (NP
                (NP (DT that))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C)))))
            (VP (VBZ is)
              (NP
                (NP (CD 4) (NNS years))
                (NP (CD 8) (NNS months))))))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHNP
      (WHNP
        (WHADJP (WRB How) (JJ many))
        (NNS years))
      (NP (NNP A)))
    (SQ (VBZ is)
      (NP
        (NP (JJR older))
        (PP (IN than)
          (NP (NNP C)))))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (-LRB- -LRB-) (NNP b) (-RRB- -RRB-))
    (NP (CD 20))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (JJ Average) (NN age))
      (PP (IN of)
        (NP (NNP A)
          (CC and)
          (NNP B))))
    (VP (VBZ is)
      (NP
        (NP (CD 9) (NNS years))
        (SBAR
          (S
            (NP
              (NP (CD 4) (NNS months))
              (CC and)
              (NP
                (NP (DT that))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C)))))
            (VP (VBZ is)
              (NP
                (NP (CD 4) (NNS years))
                (NP (CD 8) (NNS months))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (JJ Average) (NN age))
      (PP (IN of)
        (NP (NNP A)
          (CC and)
          (NNP B))))
    (VP (VBZ is)
      (NP
        (NP (CD 9) (NNS years))
        (SBAR
          (S
            (NP
              (NP (CD 4) (NNS months))
              (CC and)
              (NP
                (NP (DT that))
                (PP (IN of)
                  (NP (NNP B)
                    (CC and)
                    (NNP C)))))
            (VP (VBZ is)
              (NP
                (NP (CD 4) (NNS years))
                (NP (CD 8) (NNS months)))))))))))
'
        };
Submitting expect

(AVERAGE AGE OF A AND B IS 9 YEARS 4 MONTHS AND THAT OF B AND C IS 4 YEARS 8 MONTHS)

 AGE OF AN A_AND_B[PERSON??] CAN BE YEARS.
 SOME_NUMBER_OF MONTHS CAN BE YEARS.

((:I (:A (:F K AGE.N) (:P OF.P (:Q DET A_AND_B.NAME))) (:F PLUR YEAR.N)) (:I (:Q SOME-NUMBER-OF (:F PLUR MONTH.N)) (:F PLUR YEAR.N)) NIL)
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(AVERAGE AGE OF A AND B IS 9 YEARS 4 MONTHS AND THAT OF B AND C IS 4 YEARS 8 MONTHS)

 AGE OF AN A_AND_B[PERSON??] CAN BE YEARS.
 SOME_NUMBER_OF MONTHS CAN BE YEARS.

((:I (:A (:F K AGE.N) (:P OF.P (:Q DET A_AND_B.NAME))) (:F PLUR YEAR.N)) (:I (:Q SOME-NUMBER-OF (:F PLUR MONTH.N)) (:F PLUR YEAR.N)) NIL)
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHNP
      (WHNP
        (WHADJP (WRB How) (JJ many))
        (NNS years))
      (NP (NNP A)))
    (SQ (VBZ is)
      (NP
        (NP (JJR older))
        (PP (IN than)
          (NP (NNP C)))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHNP
      (WHNP
        (WHADJP (WRB How) (JJ many))
        (NNS years))
      (NP (NNP A)))
    (SQ (VBZ is)
      (NP
        (NP (JJR older))
        (PP (IN than)
          (NP (NNP C)))))
    (\\. ?))))))
'
        };
Submitting expect

(HOW MANY YEARS A IS OLDER THAN C ?)


NIL
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (-LRB- -LRB-) (NNP b) (-RRB- -RRB-))
    (NP (CD 20))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (-LRB- -LRB-) (NNP b) (-RRB- -RRB-))
    (NP (CD 20)))))
'
        };
Submitting expect

(-LRB- B -RRB- 20)


NIL
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'Batch' => [
                       '65 . .',
                       '(d) 20.',
                       '609 9.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 3]: [65, ., .]
Parsing [sent. 2 len. 5]: [-LRB-, d, -RRB-, 20, .]
Parsing [sent. 3 len. 3]: [609, 9, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 11 words in 3 sentences (11.24 wds/sec; 3.06 sents/sec).
Error
Error
$VAR1 = {
          'Tree' => '((FRAG
    (ADJP (FW 65)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (ADJP (FW 65)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (ADJP (FW 65))))
'
        };
Submitting expect
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'Batch' => [
                       'A man deposited Rs 2400 in a Bank at a simple interest of 5% per annum.',
                       'If he wants to purchase an article of price Rs 3000, how many years he is to wait?',
                       '(a) 9 1 years 3 434 s DECEMBER 2001 s THE COMPETITION MASTER (b) 9.2 years OBJECTIVE-TYPE QUESTIONS 1 years 2 (c) 9 (d) 9.4 years 17.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 18]: [A, man, deposited, Rs, 2400, in, a, Bank, at, a, simple, interest, of, 5, %, per, annum, .]
Parsing [sent. 2 len. 20]: [If, he, wants, to, purchase, an, article, of, price, Rs, 3000, ,, how, many, years, he, is, to, wait, ?]
Parsing [sent. 3 len. 36]: [-LRB-, a, -RRB-, 9, 1, years, 3, 434, s, DECEMBER, 2001, s, THE, COMPETITION, MASTER, -LRB-, b, -RRB-, 9.2, years, OBJECTIVE-TYPE, QUESTIONS, 1, years, 2, -LRB-, c, -RRB-, 9, -LRB-, d, -RRB-, 9.4, years, 17, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 74 words in 3 sentences (15.57 wds/sec; 0.63 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT A) (NN man))
    (VP (VBD deposited)
      (NP
        (NP (NNP Rs) (CD 2400))
        (PP (IN in)
          (NP (DT a) (NNP Bank))))
      (PP (IN at)
        (NP
          (NP (DT a) (JJ simple) (NN interest))
          (PP (IN of)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN annum))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(man-2, A-1)',
                                                       'nsubj(deposited-3, man-2)',
                                                       'dobj(deposited-3, Rs-4)',
                                                       'num(Rs-4, 2400-5)',
                                                       'det(Bank-8, a-7)',
                                                       'prep_in(Rs-4, Bank-8)',
                                                       'det(interest-12, a-10)',
                                                       'amod(interest-12, simple-11)',
                                                       'prep_at(deposited-3, interest-12)',
                                                       'num(%-15, 5-14)',
                                                       'prep_of(interest-12, %-15)',
                                                       'prep_per(%-15, annum-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBZ wants)
          (S
            (VP (TO to)
              (VP (VB purchase)
                (NP
                  (NP (DT an) (NN article))
                  (PP (IN of)
                    (NP (NN price) (NNP Rs) (CD 3000))))))))))
    (, ,)
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NNS years))
    (SQ
      (NP (PRP he))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB wait))))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(wants-3, If-1)',
                                                       'nsubj(wants-3, he-2)',
                                                       'xsubj(purchase-5, he-2)',
                                                       'advcl(is-17, wants-3)',
                                                       'aux(purchase-5, to-4)',
                                                       'xcomp(wants-3, purchase-5)',
                                                       'det(article-7, an-6)',
                                                       'dobj(purchase-5, article-7)',
                                                       'nn(Rs-10, price-9)',
                                                       'prep_of(article-7, Rs-10)',
                                                       'num(Rs-10, 3000-11)',
                                                       'advmod(many-14, how-13)',
                                                       'amod(years-15, many-14)',
                                                       'tmod(is-17, years-15)',
                                                       'nsubj(is-17, he-16)',
                                                       'xsubj(wait-19, he-16)',
                                                       'aux(wait-19, to-18)',
                                                       'xcomp(is-17, wait-19)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 9) (CD 1))
        (NNS years))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 434)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (X
          (X
            (NP
              (NP (JJ 9.2) (NNS years))
              (NP (NN OBJECTIVE-TYPE) (NNS QUESTIONS)))
            (NP (CD 1) (NNS years))
            (NP
              (NP
                (NP
                  (NP (CD 2))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 9)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (NP (CD 9.4) (NNS years))))
          (NP (CD 17)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'number(1-5, 9-4)',
                                                       'num(years-6, 1-5)',
                                                       'nsubj(MASTER-15, years-6)',
                                                       'number(434-8, 3-7)',
                                                       'nsubj(DECEMBER-10, 434-8)',
                                                       'cop(DECEMBER-10, s-9)',
                                                       'rcmod(years-6, DECEMBER-10)',
                                                       'num(DECEMBER-10, 2001-11)',
                                                       'cop(MASTER-15, s-12)',
                                                       'det(MASTER-15, THE-13)',
                                                       'nn(MASTER-15, COMPETITION-14)',
                                                       'dep(MASTER-15, b-17)',
                                                       'amod(years-20, 9.2-19)',
                                                       'dep(2-25, years-20)',
                                                       'nn(QUESTIONS-22, OBJECTIVE-TYPE-21)',
                                                       'dep(years-20, QUESTIONS-22)',
                                                       'num(years-24, 1-23)',
                                                       'dep(2-25, years-24)',
                                                       'dep(17-35, 2-25)',
                                                       'dep(2-25, c-27)',
                                                       'dep(2-25, 9-29)',
                                                       'appos(2-25, d-31)',
                                                       'num(years-34, 9.4-33)',
                                                       'dep(2-25, years-34)',
                                                       'dep(MASTER-15, 17-35)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (DT A) (NN man))
    (VP (VBD deposited)
      (NP
        (NP (NNP Rs) (CD 2400))
        (PP (IN in)
          (NP (DT a) (NNP Bank))))
      (PP (IN at)
        (NP
          (NP (DT a) (JJ simple) (NN interest))
          (PP (IN of)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN annum))))))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBZ wants)
          (S
            (VP (TO to)
              (VP (VB purchase)
                (NP
                  (NP (DT an) (NN article))
                  (PP (IN of)
                    (NP (NN price) (NNP Rs) (CD 3000))))))))))
    (\\, \\,)
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NNS years))
    (SQ
      (NP (PRP he))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB wait))))))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 9) (CD 1))
        (NNS years))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 434)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (X
          (X
            (NP
              (NP (JJ 9\\.2) (NNS years))
              (NP (NN OBJECTIVE-TYPE) (NNS QUESTIONS)))
            (NP (CD 1) (NNS years))
            (NP
              (NP
                (NP
                  (NP (CD 2))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 9)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (NP (CD 9\\.4) (NNS years))))
          (NP (CD 17)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT A) (NN man))
    (VP (VBD deposited)
      (NP
        (NP (NNP Rs) (CD 2400))
        (PP (IN in)
          (NP (DT a) (NNP Bank))))
      (PP (IN at)
        (NP
          (NP (DT a) (JJ simple) (NN interest))
          (PP (IN of)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN annum))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT A) (NN man))
    (VP (VBD deposited)
      (NP
        (NP (NNP Rs) (CD 2400))
        (PP (IN in)
          (NP (DT a) (NNP Bank))))
      (PP (IN at)
        (NP
          (NP (DT a) (JJ simple) (NN interest))
          (PP (IN of)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN annum)))))))))))
'
        };
Submitting expect

(A MAN DEPOSITED RS 2400 IN A BANK AT A SIMPLE INTEREST OF 5 % PER ANNUM)

 A MAN MAY DEPOSIT A RS[PERSON??].
 A RS[PERSON??] CAN BE IN A BANK[PERSON??].
 INTEREST CAN BE CONSTITUTED_OF_OR_FILLED_WITH SOME_NUMBER_OF %.
 INTEREST CAN BE SIMPLE.

((:I (:Q A{N} MAN.N) DEPOSIT.V (:Q DET RS.NAME)) (:I (:Q DET RS.NAME) IN.P (:Q DET BANK.NAME))
 (:I (:Q A{N} INTEREST.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:Q SOME-NUMBER-OF %.N)) (:I (:Q DET INTEREST.N) SIMPLE.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(A MAN DEPOSITED RS 2400 IN A BANK AT A SIMPLE INTEREST OF 5 % PER ANNUM)

 A MAN MAY DEPOSIT A RS[PERSON??].
 A RS[PERSON??] CAN BE IN A BANK[PERSON??].
 INTEREST CAN BE CONSTITUTED_OF_OR_FILLED_WITH SOME_NUMBER_OF %.
 INTEREST CAN BE SIMPLE.

((:I (:Q A{N} MAN.N) DEPOSIT.V (:Q DET RS.NAME)) (:I (:Q DET RS.NAME) IN.P (:Q DET BANK.NAME))
 (:I (:Q A{N} INTEREST.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:Q SOME-NUMBER-OF %.N)) (:I (:Q DET INTEREST.N) SIMPLE.A))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBZ wants)
          (S
            (VP (TO to)
              (VP (VB purchase)
                (NP
                  (NP (DT an) (NN article))
                  (PP (IN of)
                    (NP (NN price) (NNP Rs) (CD 3000))))))))))
    (\\, \\,)
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NNS years))
    (SQ
      (NP (PRP he))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB wait))))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBZ wants)
          (S
            (VP (TO to)
              (VP (VB purchase)
                (NP
                  (NP (DT an) (NN article))
                  (PP (IN of)
                    (NP (NN price) (NNP Rs) (CD 3000))))))))))
    (\\, \\,)
    (WHNP
      (WHADJP (WRB how) (JJ many))
      (NNS years))
    (SQ
      (NP (PRP he))
      (VP (VBZ is)
        (S
          (VP (TO to)
            (VP (VB wait))))))
    (\\. ?))))))
'
        };
Submitting expect

(IF HE WANTS TO PURCHASE AN ARTICLE OF PRICE RS 3000 , HOW MANY YEARS HE IS TO WAIT ?)

 AN ARTICLE CAN BE CONSTITUTED_OF_OR_FILLED_WITH PRICE.

((:I (:Q A{N} ARTICLE.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K PRICE.N)))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(IF HE WANTS TO PURCHASE AN ARTICLE OF PRICE RS 3000 , HOW MANY YEARS HE IS TO WAIT ?)

 AN ARTICLE CAN BE CONSTITUTED_OF_OR_FILLED_WITH PRICE.

((:I (:Q A{N} ARTICLE.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K PRICE.N)))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 9) (CD 1))
        (NNS years))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 434)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (X
          (X
            (NP
              (NP (JJ 9\\.2) (NNS years))
              (NP (NN OBJECTIVE-TYPE) (NNS QUESTIONS)))
            (NP (CD 1) (NNS years))
            (NP
              (NP
                (NP
                  (NP (CD 2))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 9)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (NP (CD 9\\.4) (NNS years))))
          (NP (CD 17)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 9) (CD 1))
        (NNS years))
      (SBAR
        (S
          (NP
            (QP (CD 3) (CD 434)))
          (VP (VBZ s)
            (NP (NNP DECEMBER) (CD 2001))))))
    (VP (VBZ s)
      (NP
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (X
          (X
            (NP
              (NP (JJ 9\\.2) (NNS years))
              (NP (NN OBJECTIVE-TYPE) (NNS QUESTIONS)))
            (NP (CD 1) (NNS years))
            (NP
              (NP
                (NP
                  (NP (CD 2))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 9)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (NP (CD 9\\.4) (NNS years))))
          (NP (CD 17))))))))
'
        };
Submitting expect

(-LRB- A -RRB- 9 1 YEARS 3 434 S DECEMBER 2001 S THE COMPETITION MASTER -LRB- B -RRB- 9.2 YEARS OBJECTIVE-TYPE QUESTIONS 1 YEARS 2 -LRB- C -RRB- 9
 -LRB- D -RRB- 9.4 YEARS 17)

 YEARS MAY *NULL-VERB* SOME_NUMBER_OF YEARS SOME NUMBER_OR_PORTION.
 YEARS CAN BE 9.2.

((:I (:F K (:F PLUR YEAR.N)) *NULL-VERB*.V (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) (:Q SOME NUMBER-OR-PORTION.N))
 (:I (:Q DET (:F PLUR YEAR.N)) |\|9.2\|.A|))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(-LRB- A -RRB- 9 1 YEARS 3 434 S DECEMBER 2001 S THE COMPETITION MASTER -LRB- B -RRB- 9.2 YEARS OBJECTIVE-TYPE QUESTIONS 1 YEARS 2 -LRB- C -RRB- 9
 -LRB- D -RRB- 9.4 YEARS 17)

 YEARS MAY *NULL-VERB* SOME_NUMBER_OF YEARS SOME NUMBER_OR_PORTION.
 YEARS CAN BE 9.2.

((:I (:F K (:F PLUR YEAR.N)) *NULL-VERB*.V (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) (:Q SOME NUMBER-OR-PORTION.N))
 (:I (:Q DET (:F PLUR YEAR.N)) |\\|9.2\\|.A|))
______________________________________________________________________
[5]>'
        };
$VAR1 = {
          'Batch' => [
                       'A train moving with a speed of 54 km/hr crosses 270 metre bridge in 30 seconds.',
                       'Find the length of the train.',
                       '(a) 100 m (b) 150 m (c) 180 m (d) 200 m 18.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.1 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 17]: [A, train, moving, with, a, speed, of, 54, km\/hr, crosses, 270, metre, bridge, in, 30, seconds, .]
Parsing [sent. 2 len. 7]: [Find, the, length, of, the, train, .]
Parsing [sent. 3 len. 22]: [-LRB-, a, -RRB-, 100, m, -LRB-, b, -RRB-, 150, m, -LRB-, c, -RRB-, 180, m, -LRB-, d, -RRB-, 200, m, 18, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 46 words in 3 sentences (11.94 wds/sec; 0.78 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT A) (NN train))
      (VP (VBG moving)
        (PP (IN with)
          (NP
            (NP (DT a) (NN speed))
            (PP (IN of)
              (NP (CD 54) (NN km\\/hr)))))))
    (VP (VBZ crosses)
      (NP
        (NP (CD 270) (JJ metre) (NN bridge))
        (PP (IN in)
          (NP (CD 30) (NNS seconds)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(train-2, A-1)',
                                                       'nsubj(crosses-10, train-2)',
                                                       'partmod(train-2, moving-3)',
                                                       'det(speed-6, a-5)',
                                                       'prep_with(moving-3, speed-6)',
                                                       'num(km\\/hr-9, 54-8)',
                                                       'prep_of(speed-6, km\\/hr-9)',
                                                       'num(bridge-13, 270-11)',
                                                       'amod(bridge-13, metre-12)',
                                                       'dobj(crosses-10, bridge-13)',
                                                       'num(seconds-16, 30-15)',
                                                       'prep_in(bridge-13, seconds-16)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN length))
        (PP (IN of)
          (NP (DT the) (NN train)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(length-3, the-2)',
                                                       'dobj(Find-1, length-3)',
                                                       'det(train-6, the-5)',
                                                       'prep_of(length-3, train-6)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 100) (NN m)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (SBAR
        (S
          (NP
            (NP (CD 150) (NN m))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBZ 180)))))
    (VP (VBP m)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 200) (JJ m) (CD 18)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'num(m-5, 100-4)',
                                                       'dobj(180-14, m-5)',
                                                       'nsubj(m-15, m-5)',
                                                       'dep(m-5, b-7)',
                                                       'num(m-10, 150-9)',
                                                       'nsubj(180-14, m-10)',
                                                       'dep(m-10, c-12)',
                                                       'rcmod(m-5, 180-14)',
                                                       'dep(m-15, d-17)',
                                                       'num(18-21, 200-19)',
                                                       'amod(18-21, m-20)',
                                                       'dobj(m-15, 18-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT A) (NN train))
      (VP (VBG moving)
        (PP (IN with)
          (NP
            (NP (DT a) (NN speed))
            (PP (IN of)
              (NP (CD 54) (NN km\\\\/hr)))))))
    (VP (VBZ crosses)
      (NP
        (NP (CD 270) (JJ metre) (NN bridge))
        (PP (IN in)
          (NP (CD 30) (NNS seconds)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN length))
        (PP (IN of)
          (NP (DT the) (NN train)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 100) (NN m)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (SBAR
        (S
          (NP
            (NP (CD 150) (NN m))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBZ 180)))))
    (VP (VBP m)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 200) (JJ m) (CD 18)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT A) (NN train))
      (VP (VBG moving)
        (PP (IN with)
          (NP
            (NP (DT a) (NN speed))
            (PP (IN of)
              (NP (CD 54) (NN km\\\\/hr)))))))
    (VP (VBZ crosses)
      (NP
        (NP (CD 270) (JJ metre) (NN bridge))
        (PP (IN in)
          (NP (CD 30) (NNS seconds)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT A) (NN train))
      (VP (VBG moving)
        (PP (IN with)
          (NP
            (NP (DT a) (NN speed))
            (PP (IN of)
              (NP (CD 54) (NN km\\\\/hr)))))))
    (VP (VBZ crosses)
      (NP
        (NP (CD 270) (JJ metre) (NN bridge))
        (PP (IN in)
          (NP (CD 30) (NNS seconds))))))))
'
        };
Submitting expect

(A TRAIN MOVING WITH A SPEED OF 54 KM\/HR CROSSES 270 METRE BRIDGE IN 30 SECONDS)

 A TRAIN MAY CROSS SOME_NUMBER_OF BRIDGE.
 A TRAIN MAY MOVE WITH A SPEED OF SOME_NUMBER_OF KM\/HR.
 A SPEED CAN BE CONSTITUTED_OF_OR_FILLED_WITH SOME_NUMBER_OF KM\/HR.
 SOME_NUMBER_OF BRIDGE CAN BE IN SOME_NUMBER_OF SECONDS.
 A BRIDGE CAN BE METRE.

((:I (:Q A{N} TRAIN.N) CROSS.V (:Q SOME-NUMBER-OF BRIDGE.N))
 (:I (:Q A{N} TRAIN.N) MOVE.V (:P WITH.P (:A (:Q A{N} SPEED.N) (:P OF.P (:Q SOME-NUMBER-OF |\|KM\\\\/HR\|.N|)))))
 (:I (:Q A{N} SPEED.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:Q SOME-NUMBER-OF |\|KM\\\\/HR\|.N|))
 (:I (:Q SOME-NUMBER-OF BRIDGE.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR SECOND.N))) (:I (:Q DET BRIDGE.N) METRE.A))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A TRAIN MOVING WITH A SPEED OF 54 KM\\/HR CROSSES 270 METRE BRIDGE IN 30 SECONDS)

 A TRAIN MAY CROSS SOME_NUMBER_OF BRIDGE.
 A TRAIN MAY MOVE WITH A SPEED OF SOME_NUMBER_OF KM\\/HR.
 A SPEED CAN BE CONSTITUTED_OF_OR_FILLED_WITH SOME_NUMBER_OF KM\\/HR.
 SOME_NUMBER_OF BRIDGE CAN BE IN SOME_NUMBER_OF SECONDS.
 A BRIDGE CAN BE METRE.

((:I (:Q A{N} TRAIN.N) CROSS.V (:Q SOME-NUMBER-OF BRIDGE.N))
 (:I (:Q A{N} TRAIN.N) MOVE.V (:P WITH.P (:A (:Q A{N} SPEED.N) (:P OF.P (:Q SOME-NUMBER-OF |\\|KM\\\\\\\\/HR\\|.N|)))))
 (:I (:Q A{N} SPEED.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:Q SOME-NUMBER-OF |\\|KM\\\\\\\\/HR\\|.N|))
 (:I (:Q SOME-NUMBER-OF BRIDGE.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR SECOND.N))) (:I (:Q DET BRIDGE.N) METRE.A))
______________________________________________________________________
[6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN length))
        (PP (IN of)
          (NP (DT the) (NN train)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN length))
        (PP (IN of)
          (NP (DT the) (NN train))))))))
'
        };
Submitting expect

(FIND THE LENGTH OF THE TRAIN)

 A TRAIN MAY HAVE A LENGTH.

((:I (:Q DET TRAIN.N) HAVE.V (:Q DET LENGTH.N)))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THE LENGTH OF THE TRAIN)

 A TRAIN MAY HAVE A LENGTH.

((:I (:Q DET TRAIN.N) HAVE.V (:Q DET LENGTH.N)))
______________________________________________________________________
[7]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 100) (NN m)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (SBAR
        (S
          (NP
            (NP (CD 150) (NN m))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBZ 180)))))
    (VP (VBP m)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 200) (JJ m) (CD 18)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 100) (NN m)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (SBAR
        (S
          (NP
            (NP (CD 150) (NN m))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBZ 180)))))
    (VP (VBP m)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 200) (JJ m) (CD 18))))))
'
        };
Submitting expect

*** - STRING: argument 180 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 180 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]>'
        };
$VAR1 = {
          'Batch' => [
                       'A and B together complete a work in 3 days.',
                       'After two days of their work B leaves and the work is completed in next two days.',
                       'In how many days B alone completes the work?'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.3 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 11]: [A, and, B, together, complete, a, work, in, 3, days, .]
Parsing [sent. 2 len. 18]: [After, two, days, of, their, work, B, leaves, and, the, work, is, completed, in, next, two, days, .]
Parsing [sent. 3 len. 10]: [In, how, many, days, B, alone, completes, the, work, ?]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 39 words in 3 sentences (11.65 wds/sec; 0.90 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP A)
      (CC and)
      (NNP B))
    (ADVP (RB together))
    (VP (VB complete)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP (CD 3) (NNS days)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(complete-5, A-1)',
                                                       'conj_and(A-1, B-3)',
                                                       'nsubj(complete-5, B-3)',
                                                       'advmod(complete-5, together-4)',
                                                       'det(work-7, a-6)',
                                                       'dobj(complete-5, work-7)',
                                                       'num(days-10, 3-9)',
                                                       'prep_in(work-7, days-10)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (PP (IN After)
        (NP
          (NP (CD two) (NNS days))
          (PP (IN of)
            (NP (PRP$ their) (NN work)))))
      (NP (NNP B))
      (VP (VBZ leaves)))
    (CC and)
    (S
      (NP (DT the) (NN work))
      (VP (VBZ is)
        (VP (VBN completed)
          (PP (IN in)
            (NP (JJ next) (CD two) (NNS days))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(days-3, two-2)',
                                                       'prep_after(leaves-8, days-3)',
                                                       'poss(work-6, their-5)',
                                                       'prep_of(days-3, work-6)',
                                                       'nsubj(leaves-8, B-7)',
                                                       'det(work-11, the-10)',
                                                       'nsubjpass(completed-13, work-11)',
                                                       'auxpass(completed-13, is-12)',
                                                       'conj_and(leaves-8, completed-13)',
                                                       'amod(days-17, next-15)',
                                                       'num(days-17, two-16)',
                                                       'prep_in(completed-13, days-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHPP (IN In)
      (WHNP
        (WHADJP (WRB how) (JJ many))
        (NNS days)))
    (SQ
      (NP (NNP B))
      (VP
        (ADVP (RB alone))
        (VBZ completes)
        (NP (DT the) (NN work))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'advmod(many-3, how-2)',
                                                       'amod(days-4, many-3)',
                                                       'prep_in(completes-7, days-4)',
                                                       'nsubj(completes-7, B-5)',
                                                       'advmod(completes-7, alone-6)',
                                                       'det(work-9, the-8)',
                                                       'dobj(completes-7, work-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (NNP A)
      (CC and)
      (NNP B))
    (ADVP (RB together))
    (VP (VB complete)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP (CD 3) (NNS days)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (PP (IN After)
        (NP
          (NP (CD two) (NNS days))
          (PP (IN of)
            (NP (PRP$ their) (NN work)))))
      (NP (NNP B))
      (VP (VBZ leaves)))
    (CC and)
    (S
      (NP (DT the) (NN work))
      (VP (VBZ is)
        (VP (VBN completed)
          (PP (IN in)
            (NP (JJ next) (CD two) (NNS days))))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHPP (IN In)
      (WHNP
        (WHADJP (WRB how) (JJ many))
        (NNS days)))
    (SQ
      (NP (NNP B))
      (VP
        (ADVP (RB alone))
        (VBZ completes)
        (NP (DT the) (NN work))))
    (\\. ?)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP A)
      (CC and)
      (NNP B))
    (ADVP (RB together))
    (VP (VB complete)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP (CD 3) (NNS days)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP A)
      (CC and)
      (NNP B))
    (ADVP (RB together))
    (VP (VB complete)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP (CD 3) (NNS days))))))))
'
        };
Submitting expect

(A AND B TOGETHER COMPLETE A WORK IN 3 DAYS)

 AN A_AND_B[PERSON??] MAY COMPLETE WORK.
 WORK CAN BE IN SOME_NUMBER_OF DAYS.

((:I (:Q DET A_AND_B.NAME) COMPLETE.V (:Q A{N} WORK.N)) (:I (:Q A{N} WORK.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(A AND B TOGETHER COMPLETE A WORK IN 3 DAYS)

 AN A_AND_B[PERSON??] MAY COMPLETE WORK.
 WORK CAN BE IN SOME_NUMBER_OF DAYS.

((:I (:Q DET A_AND_B.NAME) COMPLETE.V (:Q A{N} WORK.N)) (:I (:Q A{N} WORK.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (PP (IN After)
        (NP
          (NP (CD two) (NNS days))
          (PP (IN of)
            (NP (PRP$ their) (NN work)))))
      (NP (NNP B))
      (VP (VBZ leaves)))
    (CC and)
    (S
      (NP (DT the) (NN work))
      (VP (VBZ is)
        (VP (VBN completed)
          (PP (IN in)
            (NP (JJ next) (CD two) (NNS days))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (PP (IN After)
        (NP
          (NP (CD two) (NNS days))
          (PP (IN of)
            (NP (PRP$ their) (NN work)))))
      (NP (NNP B))
      (VP (VBZ leaves)))
    (CC and)
    (S
      (NP (DT the) (NN work))
      (VP (VBZ is)
        (VP (VBN completed)
          (PP (IN in)
            (NP (JJ next) (CD two) (NNS days)))))))))
'
        };
Submitting expect

(AFTER TWO DAYS OF THEIR WORK B LEAVES AND THE WORK IS COMPLETED IN NEXT TWO DAYS)

 A B[PERSON??] MAY LEAVE.
 INDIVIDUAL -S MAY HAVE WORK.
 WORK MAY BE COMPLETE -ED IN SOME_NUMBER_OF DAYS.

((:I (:Q DET B.NAME) LEAVE.V) NIL (:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET WORK.N))
 (:I (:Q THE WORK.N) (:F BE.PASV COMPLETE.V) (:P IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N)))))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(AFTER TWO DAYS OF THEIR WORK B LEAVES AND THE WORK IS COMPLETED IN NEXT TWO DAYS)

 A B[PERSON??] MAY LEAVE.
 INDIVIDUAL -S MAY HAVE WORK.
 WORK MAY BE COMPLETE -ED IN SOME_NUMBER_OF DAYS.

((:I (:Q DET B.NAME) LEAVE.V) NIL (:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET WORK.N))
 (:I (:Q THE WORK.N) (:F BE.PASV COMPLETE.V) (:P IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N)))))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHPP (IN In)
      (WHNP
        (WHADJP (WRB how) (JJ many))
        (NNS days)))
    (SQ
      (NP (NNP B))
      (VP
        (ADVP (RB alone))
        (VBZ completes)
        (NP (DT the) (NN work))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHPP (IN In)
      (WHNP
        (WHADJP (WRB how) (JJ many))
        (NNS days)))
    (SQ
      (NP (NNP B))
      (VP
        (ADVP (RB alone))
        (VBZ completes)
        (NP (DT the) (NN work))))
    (\\. ?))))))
'
        };
Submitting expect

(IN HOW MANY DAYS B ALONE COMPLETES THE WORK ?)


NIL
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'Batch' => [
                       '(a) 5 days (b) 6 days (c) 7 days (d) 8 days . 19.',
                       'Simplify: (a) .5 .8 3 ÷ 7.5 ..',
                       '2.3 21 −.0 98 .'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 21]: [-LRB-, a, -RRB-, 5, days, -LRB-, b, -RRB-, 6, days, -LRB-, c, -RRB-, 7, days, -LRB-, d, -RRB-, 8, days, .]
Parsing [sent. 2 len. 2]: [19, .]
Parsing [sent. 3 len. 12]: [Simplify, :, -LRB-, a, -RRB-, .5, .8, 3, ÷, 7.5, ., .]
Parsing [sent. 4 len. 6]: [2.3, 21, −, .0, 98, .]
Parsed file: /tmp/stanfordparser.txt [4 sentences].
Parsed 41 words in 4 sentences (16.73 wds/sec; 1.63 sents/sec).
$VAR1 = {
          'Tree' => '((NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP (CD 5) (NNS days)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 6) (NNS days)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 7) (NNS days)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 8) (NNS days)))))'
        };
$VAR1 = {
          'Tree' => '((FRAG
    (NP (CD 19))))'
        };
$VAR1 = {
          'Tree' => '(number(\\.8-7\\, \\.5-6)
num(÷-9\\, \\.8-7)
number(÷-9\\, 3-8)
npadvmod(7\\.5-10\\, ÷-9)
amod(a-4\\, 7\\.5-10)))'
        };
$VAR1 = {
          'Tree' => '(nsubj(−-3\\, 21-2)
number(98-5\\, \\.0-4)
dobj(−-3\\, 98-5)))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP (CD 5) (NNS days)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 6) (NNS days)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 7) (NNS days)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 8) (NNS days)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
    (NP
      (NP (CD 5) (NNS days)
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (NP (CD 6) (NNS days)
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-))))
    (NP
      (NP (CD 7) (NNS days)
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (NP (CD 8) (NNS days))))))
'
        };
Submitting expect

(-LRB- A -RRB- 5 DAYS -LRB- B -RRB- 6 DAYS -LRB- C -RRB- 7 DAYS -LRB- D -RRB- 8 DAYS)


NIL
______________________________________________________________________
[6]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (CD 19))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (CD 19)))))
'
        };
Submitting expect

(19)


NIL
______________________________________________________________________
[7]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '(number(\\.8-7\\, \\.5-6)
num(÷-9\\, \\.8-7)
number(÷-9\\, 3-8)
npadvmod(7\\.5-10\\, ÷-9)
amod(a-4\\, 7\\.5-10)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'(number(\\.8-7\\, \\.5-6)
num(÷-9\\, \\.8-7)
number(÷-9\\, 3-8)
npadvmod(7\\.5-10\\, ÷-9)
amod(a-4\\, 7\\.5-10))))
'
        };
Submitting expect

(.5-6 NUM .8-7 NUMBER 3-8 NPADVMOD ÷-9 AMOD 7.5-10)


NIL
______________________________________________________________________
[8]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '(nsubj(−-3\\, 21-2)
number(98-5\\, \\.0-4)
dobj(−-3\\, 98-5)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'(nsubj(−-3\\, 21-2)
number(98-5\\, \\.0-4)
dobj(−-3\\, 98-5))))
'
        };
Submitting expect

(21-2 NUMBER .0-4 DOBJ 98-5)


NIL
______________________________________________________________________
[9]> Got result
$VAR1 = {
          'Batch' => [
                       '(b) . 5 (c) .05 (d) 5.05 20.',
                       'The ratio of boys and girls of a school with 504 students is 13 : 11.',
                       'What will be the new ratio if 12 girls leave?'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 4]: [-LRB-, b, -RRB-, .]
Parsing [sent. 2 len. 11]: [5, -LRB-, c, -RRB-, .05, -LRB-, d, -RRB-, 5.05, 20, .]
Parsing [sent. 3 len. 17]: [The, ratio, of, boys, and, girls, of, a, school, with, 504, students, is, 13, :, 11, .]
Parsing [sent. 4 len. 11]: [What, will, be, the, new, ratio, if, 12, girls, leave, ?]
Parsed file: /tmp/stanfordparser.txt [4 sentences].
Parsed 43 words in 4 sentences (17.61 wds/sec; 1.64 sents/sec).
$VAR1 = {
          'Tree' => '((S (-LRB- -LRB-)
    (NP (SYM b))
    (VP (VBZ -RRB-))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (CD 5))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ \\.05)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 5\\.05) (CD 20)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NNS boys)
            (CC and)
            (NNS girls))
          (PP (IN of)
            (NP
              (NP (DT a) (NN school))
              (PP (IN with)
                (NP (CD 504) (NNS students))))))))
    (VP (VBZ is)
      (NP
        (NP (CD 13))
        (\\: \\:)
        (NP (CD 11))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHNP (WP What))
    (SQ
      (VP (MD will)
        (VP (VB be)
          (NP (DT the) (JJ new) (NN ratio))
          (SBAR (IN if)
            (S
              (NP (CD 12) (NNS girls))
              (VP (VBP leave)))))))
    (\\. ?)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S (-LRB- -LRB-)
    (NP (SYM b))
    (VP (VBZ -RRB-))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S (-LRB- -LRB-)
    (NP (SYM b))
    (VP (VBZ -RRB-)))))
'
        };
Submitting expect

(-LRB- B -RRB-)


NIL
______________________________________________________________________
[10]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (CD 5))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ \\.05)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 5\\.05) (CD 20)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (CD 5))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ \\.05)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 5\\.05) (CD 20))))))
'
        };
Submitting expect

(5 -LRB- C -RRB- .05 -LRB- D -RRB- 5.05 20)

 SOME NUMBER_OR_PORTION MAY .0 SOME NUMBER_OR_PORTION.

((:I (:Q SOME NUMBER-OR-PORTION.N) |\|.0\|.V| (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[11]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(5 -LRB- C -RRB- .05 -LRB- D -RRB- 5.05 20)

 SOME NUMBER_OR_PORTION MAY .0 SOME NUMBER_OR_PORTION.

((:I (:Q SOME NUMBER-OR-PORTION.N) |\\|.0\\|.V| (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[11]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NNS boys)
            (CC and)
            (NNS girls))
          (PP (IN of)
            (NP
              (NP (DT a) (NN school))
              (PP (IN with)
                (NP (CD 504) (NNS students))))))))
    (VP (VBZ is)
      (NP
        (NP (CD 13))
        (\\: \\:)
        (NP (CD 11))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NNS boys)
            (CC and)
            (NNS girls))
          (PP (IN of)
            (NP
              (NP (DT a) (NN school))
              (PP (IN with)
                (NP (CD 504) (NNS students))))))))
    (VP (VBZ is)
      (NP
        (NP (CD 13))
        (\\: \\:)
        (NP (CD 11)))))))
'
        };
Submitting expect

(THE RATIO OF BOYS AND GIRLS OF A SCHOOL WITH 504 STUDENTS IS 13 : 11)

 A RATIO OF BOYS OF A SCHOOL CAN BE A NUMBER_OR_PORTION.
 A SCHOOL CAN BE WITH SOME_NUMBER_OF STUDENTS.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:A (:F K (:F PLUR BOY.N)) (:P OF.P (:Q A{N} SCHOOL.N))))) NUMBER-OR-PORTION.N) NIL
 (:I (:Q A{N} SCHOOL.N) WITH.P (:Q SOME-NUMBER-OF (:F PLUR STUDENT.N))))
______________________________________________________________________
[12]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE RATIO OF BOYS AND GIRLS OF A SCHOOL WITH 504 STUDENTS IS 13 : 11)

 A RATIO OF BOYS OF A SCHOOL CAN BE A NUMBER_OR_PORTION.
 A SCHOOL CAN BE WITH SOME_NUMBER_OF STUDENTS.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:A (:F K (:F PLUR BOY.N)) (:P OF.P (:Q A{N} SCHOOL.N))))) NUMBER-OR-PORTION.N) NIL
 (:I (:Q A{N} SCHOOL.N) WITH.P (:Q SOME-NUMBER-OF (:F PLUR STUDENT.N))))
______________________________________________________________________
[12]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHNP (WP What))
    (SQ
      (VP (MD will)
        (VP (VB be)
          (NP (DT the) (JJ new) (NN ratio))
          (SBAR (IN if)
            (S
              (NP (CD 12) (NNS girls))
              (VP (VBP leave)))))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHNP (WP What))
    (SQ
      (VP (MD will)
        (VP (VB be)
          (NP (DT the) (JJ new) (NN ratio))
          (SBAR (IN if)
            (S
              (NP (CD 12) (NNS girls))
              (VP (VBP leave)))))))
    (\\. ?))))))
'
        };
Submitting expect

(WHAT WILL BE THE NEW RATIO IF 12 GIRLS LEAVE ?)

 SOME_NUMBER_OF GIRLS MAY LEAVE.

((:I (:Q SOME-NUMBER-OF (:F PLUR GIRL.N)) LEAVE.V))
______________________________________________________________________
[13]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(WHAT WILL BE THE NEW RATIO IF 12 GIRLS LEAVE ?)

 SOME_NUMBER_OF GIRLS MAY LEAVE.

((:I (:Q SOME-NUMBER-OF (:F PLUR GIRL.N)) LEAVE.V))
______________________________________________________________________
[13]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) 91 : 73 (b) 91 : 81 (c) 73 : 91 (d) 81 : 91 21.',
                       'Divide Rs 350 among A, B and C so that A’s share : B’s share = 2 : 3 and B’s share : C’s share = 4 : 5.',
                       '(a) A Rs 80, B Rs 120, C Rs 150 (b) A Rs 40, B Rs 60, C Rs 75 (c) A Rs 160, B Rs 240, C Rs 300 (d) A Rs 16, B Rs 24, C Rs 30 22.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 26]: [-LRB-, a, -RRB-, 91, :, 73, -LRB-, b, -RRB-, 91, :, 81, -LRB-, c, -RRB-, 73, :, 91, -LRB-, d, -RRB-, 81, :, 91, 21, .]
Parsing [sent. 2 len. 35]: [Divide, Rs, 350, among, A, ,, B, and, C, so, that, A, 's, share, :, B, 's, share, =, 2, :, 3, and, B, 's, share, :, C, 's, share, =, 4, :, 5, .]
Parsing [sent. 3 len. 58]: [-LRB-, a, -RRB-, A, Rs, 80, ,, B, Rs, 120, ,, C, Rs, 150, -LRB-, b, -RRB-, A, Rs, 40, ,, B, Rs, 60, ,, C, Rs, 75, -LRB-, c, -RRB-, A, Rs, 160, ,, B, Rs, 240, ,, C, Rs, 300, -LRB-, d, -RRB-, A, Rs, 16, ,, B, Rs, 24, ,, C, Rs, 30, 22, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 119 words in 3 sentences (6.57 wds/sec; 0.17 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 91) (: :) (CD 73))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP (CD 91) (: :) (CD 81))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 73) (: :) (CD 91))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (VP (VBN 81))))
      (: :))
    (VP (VBZ 91)
      (NP (CD 21)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'num(73-6, 91-4)',
                                                       'nsubj(91-24, 73-6)',
                                                       'dep(73-6, b-8)',
                                                       'num(81-12, 91-10)',
                                                       'prep(73-6, 81-12)',
                                                       'dep(81-12, c-14)',
                                                       'num(91-18, 73-16)',
                                                       'dep(81-12, 91-18)',
                                                       'appos(91-18, d-20)',
                                                       'partmod(91-18, 81-22)',
                                                       'dobj(91-24, 21-25)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Divide)
      (NP
        (NP (NNP Rs) (CD 350))
        (PP (IN among)
          (NP (NNP A) (, ,) (NNP B)
            (CC and)
            (NNP C))))
      (SBAR (RB so) (IN that)
        (S
          (NP (NNP A))
          (VP (VBZ \'s)
            (NP
              (NP
                (NP (NN share))
                (: :)
                (S
                  (NP (NNP B) (POS \'s))
                  (VP (VBP share)
                    (S
                      (VP (SYM =)
                        (NP (CD 2)))))))
              (: :)
              (NP
                (NP (CD 3))
                (CC and)
                (NP
                  (NP (NNP B) (POS \'s))
                  (NN share)))
              (: :)
              (NP
                (NP (NNP C) (POS \'s))
                (NN share) (NN =))
              (NP (CD 4) (: :) (CD 5)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dobj(Divide-1, Rs-2)',
                                                       'num(Rs-2, 350-3)',
                                                       'prep_among(Rs-2, A-5)',
                                                       'prep_among(Rs-2, B-7)',
                                                       'conj_and(A-5, B-7)',
                                                       'prep_among(Rs-2, C-9)',
                                                       'conj_and(A-5, C-9)',
                                                       'advmod(share-14, so-10)',
                                                       'dep(share-14, that-11)',
                                                       'nsubj(share-14, A-12)',
                                                       'cop(share-14, \'s-13)',
                                                       'advcl(Divide-1, share-14)',
                                                       'nsubj(share-18, B-16)',
                                                       'possessive(B-16, \'s-17)',
                                                       'dep(share-14, share-18)',
                                                       'dep(2-20, =-19)',
                                                       'ccomp(share-18, 2-20)',
                                                       'dep(share-14, 3-22)',
                                                       'poss(share-26, B-24)',
                                                       'dep(share-14, share-26)',
                                                       'conj_and(3-22, share-26)',
                                                       'poss(=-31, C-28)',
                                                       'nn(=-31, share-30)',
                                                       'dep(share-14, =-31)',
                                                       'num(5-34, 4-32)',
                                                       'dep(share-14, 5-34)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP Rs) (CD 80))
    (, ,)
    (S
      (NP
        (NP (NNP B) (NNP Rs) (CD 120))
        (, ,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 150)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 40)))
        (, ,)
        (NP (NNP B) (NNP Rs) (NNP 60))
        (, ,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 75)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 160)))
        (, ,)
        (NP (NNP B) (NNP Rs) (NNP 240))
        (, ,)))
    (NP (NNP C) (NNP Rs))
    (VP (VBZ 300)
      (NP
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (DT A)
          (ADJP
            (ADJP
              (QP (CD Rs) (CD 16)))
            (PRN (, ,)
              (NP (NNP B) (NNP Rs))
              (NP (CD 24))
              (, ,)))
          (NNP C) (NN Rs))
        (ADJP (CD 30) (CD 22))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'det(Rs-5, A-4)',
                                                       'nsubj(300-42, Rs-5)',
                                                       'num(Rs-5, 80-6)',
                                                       'nn(Rs-9, B-8)',
                                                       'dep(300-42, Rs-9)',
                                                       'num(Rs-9, 120-10)',
                                                       'appos(Rs-9, C-12)',
                                                       'number(C-12, Rs-13)',
                                                       'number(C-12, 150-14)',
                                                       'dep(C-12, b-16)',
                                                       'det(Rs-19, A-18)',
                                                       'dep(C-12, Rs-19)',
                                                       'num(Rs-19, 40-20)',
                                                       'nn(60-24, B-22)',
                                                       'nn(60-24, Rs-23)',
                                                       'appos(Rs-9, 60-24)',
                                                       'appos(Rs-9, C-26)',
                                                       'number(C-26, Rs-27)',
                                                       'number(C-26, 75-28)',
                                                       'dep(C-26, c-30)',
                                                       'det(Rs-33, A-32)',
                                                       'dep(C-26, Rs-33)',
                                                       'num(Rs-33, 160-34)',
                                                       'nn(240-38, B-36)',
                                                       'nn(240-38, Rs-37)',
                                                       'appos(Rs-9, 240-38)',
                                                       'nn(Rs-41, C-40)',
                                                       'nsubj(300-42, Rs-41)',
                                                       'dep(Rs-55, d-44)',
                                                       'det(Rs-55, A-46)',
                                                       'number(16-48, Rs-47)',
                                                       'amod(Rs-55, 16-48)',
                                                       'nn(Rs-51, B-50)',
                                                       'dep(16-48, Rs-51)',
                                                       'dep(Rs-51, 24-52)',
                                                       'nn(Rs-55, C-54)',
                                                       'dobj(300-42, Rs-55)',
                                                       'number(22-57, 30-56)',
                                                       'amod(Rs-55, 22-57)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 91) (\\: \\:) (CD 73))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP (CD 91) (\\: \\:) (CD 81))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 73) (\\: \\:) (CD 91))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (VP (VBN 81))))
      (\\: \\:))
    (VP (VBZ 91)
      (NP (CD 21)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Divide)
      (NP
        (NP (NNP Rs) (CD 350))
        (PP (IN among)
          (NP (NNP A) (\\, \\,) (NNP B)
            (CC and)
            (NNP C))))
      (SBAR (RB so) (IN that)
        (S
          (NP (NNP A))
          (VP (VBZ \\\'s)
            (NP
              (NP
                (NP (NN share))
                (\\: \\:)
                (S
                  (NP (NNP B) (POS \\\'s))
                  (VP (VBP share)
                    (S
                      (VP (SYM =)
                        (NP (CD 2)))))))
              (\\: \\:)
              (NP
                (NP (CD 3))
                (CC and)
                (NP
                  (NP (NNP B) (POS \\\'s))
                  (NN share)))
              (\\: \\:)
              (NP
                (NP (NNP C) (POS \\\'s))
                (NN share) (NN =))
              (NP (CD 4) (\\: \\:) (CD 5)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP Rs) (CD 80))
    (\\, \\,)
    (S
      (NP
        (NP (NNP B) (NNP Rs) (CD 120))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 150)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 40)))
        (\\, \\,)
        (NP (NNP B) (NNP Rs) (NNP 60))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 75)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 160)))
        (\\, \\,)
        (NP (NNP B) (NNP Rs) (NNP 240))
        (\\, \\,)))
    (NP (NNP C) (NNP Rs))
    (VP (VBZ 300)
      (NP
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (DT A)
          (ADJP
            (ADJP
              (QP (CD Rs) (CD 16)))
            (PRN (\\, \\,)
              (NP (NNP B) (NNP Rs))
              (NP (CD 24))
              (\\, \\,)))
          (NNP C) (NN Rs))
        (ADJP (CD 30) (CD 22))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 91) (\\: \\:) (CD 73))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP (CD 91) (\\: \\:) (CD 81))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 73) (\\: \\:) (CD 91))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (VP (VBN 81))))
      (\\: \\:))
    (VP (VBZ 91)
      (NP (CD 21)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP (CD 91) (\\: \\:) (CD 73))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-))
      (PP
        (NP
          (NP (CD 91) (\\: \\:) (CD 81))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 73) (\\: \\:) (CD 91))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (VP (VBN 81))))
      (\\: \\:))
    (VP (VBZ 91)
      (NP (CD 21))))))
'
        };
Submitting expect

*** - STRING: argument 81 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [14]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 81 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [14]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Divide)
      (NP
        (NP (NNP Rs) (CD 350))
        (PP (IN among)
          (NP (NNP A) (\\, \\,) (NNP B)
            (CC and)
            (NNP C))))
      (SBAR (RB so) (IN that)
        (S
          (NP (NNP A))
          (VP (VBZ \\\'s)
            (NP
              (NP
                (NP (NN share))
                (\\: \\:)
                (S
                  (NP (NNP B) (POS \\\'s))
                  (VP (VBP share)
                    (S
                      (VP (SYM =)
                        (NP (CD 2)))))))
              (\\: \\:)
              (NP
                (NP (CD 3))
                (CC and)
                (NP
                  (NP (NNP B) (POS \\\'s))
                  (NN share)))
              (\\: \\:)
              (NP
                (NP (NNP C) (POS \\\'s))
                (NN share) (NN =))
              (NP (CD 4) (\\: \\:) (CD 5)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Divide)
      (NP
        (NP (NNP Rs) (CD 350))
        (PP (IN among)
          (NP (NNP A) (\\, \\,) (NNP B)
            (CC and)
            (NNP C))))
      (SBAR (RB so) (IN that)
        (S
          (NP (NNP A))
          (VP (VBZ \\\'s)
            (NP
              (NP
                (NP (NN share))
                (\\: \\:)
                (S
                  (NP (NNP B) (POS \\\'s))
                  (VP (VBP share)
                    (S
                      (VP (SYM =)
                        (NP (CD 2)))))))
              (\\: \\:)
              (NP
                (NP (CD 3))
                (CC and)
                (NP
                  (NP (NNP B) (POS \\\'s))
                  (NN share)))
              (\\: \\:)
              (NP
                (NP (NNP C) (POS \\\'s))
                (NN share) (NN =))
              (NP (CD 4) (\\: \\:) (CD 5))))))))))
'
        };
Submitting expect

(DIVIDE RS 350 AMONG A , B AND C SO THAT A 'S SHARE : B 'S SHARE = 2 : 3 AND B 'S SHARE : C 'S SHARE = 4 : 5)

 A RS[PERSON??] CAN BE AMONG AN |\|A_\\\|,\\\|_B_AND_C\||[PERSON??].
 AN A[PERSON??] CAN BE A SHARE.
 A B[PERSON??] MAY HAVE A SHARE.
 A C[PERSON??] MAY HAVE A SHARE =.

((:I (:Q DET RS.NAME) AMONG.P (:Q DET |\|A_\\\|,\\\|_B_AND_C\|.NAME|)) (:I (:Q DET A.NAME) (:F K SHARE.N))
 (:I (:Q DET B.NAME) HAVE.V (:Q DET SHARE.N)) (:I (:Q DET C.NAME) HAVE.V (:Q DET (:F NN SHARE.N =.N))))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(DIVIDE RS 350 AMONG A , B AND C SO THAT A \'S SHARE : B \'S SHARE = 2 : 3 AND B \'S SHARE : C \'S SHARE = 4 : 5)

 A RS[PERSON??] CAN BE AMONG AN |\\|A_\\\\\\|,\\\\\\|_B_AND_C\\||[PERSON??].
 AN A[PERSON??] CAN BE A SHARE.
 A B[PERSON??] MAY HAVE A SHARE.
 A C[PERSON??] MAY HAVE A SHARE =.

((:I (:Q DET RS.NAME) AMONG.P (:Q DET |\\|A_\\\\\\|,\\\\\\|_B_AND_C\\|.NAME|)) (:I (:Q DET A.NAME) (:F K SHARE.N))
 (:I (:Q DET B.NAME) HAVE.V (:Q DET SHARE.N)) (:I (:Q DET C.NAME) HAVE.V (:Q DET (:F NN SHARE.N =.N))))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP Rs) (CD 80))
    (\\, \\,)
    (S
      (NP
        (NP (NNP B) (NNP Rs) (CD 120))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 150)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 40)))
        (\\, \\,)
        (NP (NNP B) (NNP Rs) (NNP 60))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 75)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 160)))
        (\\, \\,)
        (NP (NNP B) (NNP Rs) (NNP 240))
        (\\, \\,)))
    (NP (NNP C) (NNP Rs))
    (VP (VBZ 300)
      (NP
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (DT A)
          (ADJP
            (ADJP
              (QP (CD Rs) (CD 16)))
            (PRN (\\, \\,)
              (NP (NNP B) (NNP Rs))
              (NP (CD 24))
              (\\, \\,)))
          (NNP C) (NN Rs))
        (ADJP (CD 30) (CD 22))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (DT A) (NNP Rs) (CD 80))
    (\\, \\,)
    (S
      (NP
        (NP (NNP B) (NNP Rs) (CD 120))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 150)))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 40)))
        (\\, \\,)
        (NP (NNP B) (NNP Rs) (NNP 60))
        (\\, \\,)
        (NP
          (NP
            (NP
              (QP ($ C) (CD Rs) (CD 75)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (DT A) (NNP Rs) (CD 160)))
        (\\, \\,)
        (NP (NNP B) (NNP Rs) (NNP 240))
        (\\, \\,)))
    (NP (NNP C) (NNP Rs))
    (VP (VBZ 300)
      (NP
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (DT A)
          (ADJP
            (ADJP
              (QP (CD Rs) (CD 16)))
            (PRN (\\, \\,)
              (NP (NNP B) (NNP Rs))
              (NP (CD 24))
              (\\, \\,)))
          (NNP C) (NN Rs))
        (ADJP (CD 30) (CD 22)))))))
'
        };
Submitting expect

*** - STRING: argument 300 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 300 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]>'
        };
$VAR1 = {
          'Batch' => [
                       'The mixture of water and sugar in a glass has a ratio sugar : water = 2 : 7 and the ratio in another glass of same mixture is 3 : 11.',
                       'Which is sweeter?',
                       '(a) First mixture (b) Second mixture (c) Both the same (d) Is not clear 23.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 33]: [The, mixture, of, water, and, sugar, in, a, glass, has, a, ratio, sugar, :, water, =, 2, :, 7, and, the, ratio, in, another, glass, of, same, mixture, is, 3, :, 11, .]
Parsing [sent. 2 len. 4]: [Which, is, sweeter, ?]
Parsing [sent. 3 len. 24]: [-LRB-, a, -RRB-, First, mixture, -LRB-, b, -RRB-, Second, mixture, -LRB-, c, -RRB-, Both, the, same, -LRB-, d, -RRB-, Is, not, clear, 23, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 61 words in 3 sentences (11.53 wds/sec; 0.57 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP
        (NP (DT The) (NN mixture))
        (PP (IN of)
          (NP
            (NP (NN water)
              (CC and)
              (NN sugar))
            (PP (IN in)
              (NP (DT a) (NN glass))))))
      (VP (VBZ has)
        (NP
          (NP (DT a) (NN ratio) (NN sugar))
          (: :)
          (NP
            (NP (NN water))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2)))))))))
    (: :)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN in)
            (NP
              (NP (DT another) (NN glass))
              (PP (IN of)
                (NP (JJ same) (NN mixture)))))))
      (VP (VBZ is)
        (NP
          (NP (CD 3))
          (: :)
          (NP (CD 11)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(mixture-2, The-1)',
                                                       'nsubj(has-10, mixture-2)',
                                                       'prep_of(mixture-2, water-4)',
                                                       'prep_of(mixture-2, sugar-6)',
                                                       'conj_and(water-4, sugar-6)',
                                                       'det(glass-9, a-8)',
                                                       'prep_in(water-4, glass-9)',
                                                       'det(sugar-13, a-11)',
                                                       'nn(sugar-13, ratio-12)',
                                                       'dobj(has-10, sugar-13)',
                                                       'dep(sugar-13, water-15)',
                                                       'dep(2-17, =-16)',
                                                       'rcmod(water-15, 2-17)',
                                                       'nsubj(3-30, 7-19)',
                                                       'det(ratio-22, the-21)',
                                                       'conj_and(7-19, ratio-22)',
                                                       'nsubj(3-30, ratio-22)',
                                                       'det(glass-25, another-24)',
                                                       'prep_in(ratio-22, glass-25)',
                                                       'amod(mixture-28, same-27)',
                                                       'prep_of(glass-25, mixture-28)',
                                                       'cop(3-30, is-29)',
                                                       'parataxis(has-10, 3-30)',
                                                       'dep(3-30, 11-32)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHNP (WP Which))
    (SQ (VBZ is)
      (NP (NN sweeter)))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'attr(is-2, Which-1)',
                                                       'nsubj(is-2, sweeter-3)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (NNP First))
    (VP (VBZ mixture)
      (NP
        (NP
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (VBN Second) (NN mixture))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (NP
        (NP (PDT Both) (DT the) (JJ same) (-LRB- -LRB-) (NNS d) (-RRB- -RRB-))
        (SBAR
          (S
            (VP (VBZ Is) (RB not)
              (ADJP (JJ clear)
                (NP (CD 23))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(mixture-5, First-4)',
                                                       'dep(-RRB--8, b-7)',
                                                       'amod(mixture-10, Second-9)',
                                                       'iobj(mixture-5, mixture-10)',
                                                       'dep(mixture-10, c-12)',
                                                       'predet(d-18, Both-14)',
                                                       'det(d-18, the-15)',
                                                       'amod(d-18, same-16)',
                                                       'dobj(mixture-5, d-18)',
                                                       'cop(clear-22, Is-20)',
                                                       'neg(clear-22, not-21)',
                                                       'rcmod(d-18, clear-22)',
                                                       'dep(clear-22, 23-23)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (S
      (NP
        (NP (DT The) (NN mixture))
        (PP (IN of)
          (NP
            (NP (NN water)
              (CC and)
              (NN sugar))
            (PP (IN in)
              (NP (DT a) (NN glass))))))
      (VP (VBZ has)
        (NP
          (NP (DT a) (NN ratio) (NN sugar))
          (\\: \\:)
          (NP
            (NP (NN water))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2)))))))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN in)
            (NP
              (NP (DT another) (NN glass))
              (PP (IN of)
                (NP (JJ same) (NN mixture)))))))
      (VP (VBZ is)
        (NP
          (NP (CD 3))
          (\\: \\:)
          (NP (CD 11)))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHNP (WP Which))
    (SQ (VBZ is)
      (NP (NN sweeter)))
    (\\. ?)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (NNP First))
    (VP (VBZ mixture)
      (NP
        (NP
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (VBN Second) (NN mixture))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (NP
        (NP (PDT Both) (DT the) (JJ same) (-LRB- -LRB-) (NNS d) (-RRB- -RRB-))
        (SBAR
          (S
            (VP (VBZ Is) (RB not)
              (ADJP (JJ clear)
                (NP (CD 23))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP
        (NP (DT The) (NN mixture))
        (PP (IN of)
          (NP
            (NP (NN water)
              (CC and)
              (NN sugar))
            (PP (IN in)
              (NP (DT a) (NN glass))))))
      (VP (VBZ has)
        (NP
          (NP (DT a) (NN ratio) (NN sugar))
          (\\: \\:)
          (NP
            (NP (NN water))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2)))))))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN in)
            (NP
              (NP (DT another) (NN glass))
              (PP (IN of)
                (NP (JJ same) (NN mixture)))))))
      (VP (VBZ is)
        (NP
          (NP (CD 3))
          (\\: \\:)
          (NP (CD 11)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP
        (NP (DT The) (NN mixture))
        (PP (IN of)
          (NP
            (NP (NN water)
              (CC and)
              (NN sugar))
            (PP (IN in)
              (NP (DT a) (NN glass))))))
      (VP (VBZ has)
        (NP
          (NP (DT a) (NN ratio) (NN sugar))
          (\\: \\:)
          (NP
            (NP (NN water))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2)))))))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 7))
        (CC and)
        (NP
          (NP (DT the) (NN ratio))
          (PP (IN in)
            (NP
              (NP (DT another) (NN glass))
              (PP (IN of)
                (NP (JJ same) (NN mixture)))))))
      (VP (VBZ is)
        (NP
          (NP (CD 3))
          (\\: \\:)
          (NP (CD 11))))))))
'
        };
Submitting expect

(THE MIXTURE OF WATER AND SUGAR IN A GLASS HAS A RATIO SUGAR : WATER = 2 : 7 AND THE RATIO IN ANOTHER GLASS OF SAME MIXTURE IS 3 : 11)

 A MIXTURE OF WATER MAY HAVE A RATIO SUGAR.
 WATER CAN BE IN A GLASS.
 SOME NUMBER_OR_PORTION CAN BE A NUMBER_OR_PORTION.
 A RATIO CAN BE IN SOME_NUMBER_OF GLASS OF MIXTURE.
 SOME_NUMBER_OF GLASS CAN BE CONSTITUTED_OF_OR_FILLED_WITH MIXTURE.

((:I (:A (:Q THE MIXTURE.N) (:P OF.P (:F K WATER.N))) HAVE.V (:Q A{N} (:F NN RATIO.N SUGAR.N))) NIL (:I (:F K WATER.N) IN.P (:Q A{N} GLASS.N))
 (:I (:Q SOME NUMBER-OR-PORTION.N) NUMBER-OR-PORTION.N) (:I (:Q THE RATIO.N) IN.P (:A (:Q SOME-NUMBER-OF GLASS.N) (:P OF.P (:F K MIXTURE.N))))
 (:I (:Q SOME-NUMBER-OF GLASS.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K MIXTURE.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(THE MIXTURE OF WATER AND SUGAR IN A GLASS HAS A RATIO SUGAR : WATER = 2 : 7 AND THE RATIO IN ANOTHER GLASS OF SAME MIXTURE IS 3 : 11)

 A MIXTURE OF WATER MAY HAVE A RATIO SUGAR.
 WATER CAN BE IN A GLASS.
 SOME NUMBER_OR_PORTION CAN BE A NUMBER_OR_PORTION.
 A RATIO CAN BE IN SOME_NUMBER_OF GLASS OF MIXTURE.
 SOME_NUMBER_OF GLASS CAN BE CONSTITUTED_OF_OR_FILLED_WITH MIXTURE.

((:I (:A (:Q THE MIXTURE.N) (:P OF.P (:F K WATER.N))) HAVE.V (:Q A{N} (:F NN RATIO.N SUGAR.N))) NIL (:I (:F K WATER.N) IN.P (:Q A{N} GLASS.N))
 (:I (:Q SOME NUMBER-OR-PORTION.N) NUMBER-OR-PORTION.N) (:I (:Q THE RATIO.N) IN.P (:A (:Q SOME-NUMBER-OF GLASS.N) (:P OF.P (:F K MIXTURE.N))))
 (:I (:Q SOME-NUMBER-OF GLASS.N) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K MIXTURE.N)))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHNP (WP Which))
    (SQ (VBZ is)
      (NP (NN sweeter)))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHNP (WP Which))
    (SQ (VBZ is)
      (NP (NN sweeter)))
    (\\. ?))))))
'
        };
Submitting expect

(WHICH IS SWEETER ?)


NIL
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (NNP First))
    (VP (VBZ mixture)
      (NP
        (NP
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (VBN Second) (NN mixture))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (NP
        (NP (PDT Both) (DT the) (JJ same) (-LRB- -LRB-) (NNS d) (-RRB- -RRB-))
        (SBAR
          (S
            (VP (VBZ Is) (RB not)
              (ADJP (JJ clear)
                (NP (CD 23))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (NNP First))
    (VP (VBZ mixture)
      (NP
        (NP
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (VBN Second) (NN mixture))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (NP
        (NP (PDT Both) (DT the) (JJ same) (-LRB- -LRB-) (NNS d) (-RRB- -RRB-))
        (SBAR
          (S
            (VP (VBZ Is) (RB not)
              (ADJP (JJ clear)
                (NP (CD 23)))))))))))
'
        };
Submitting expect

(-LRB- A -RRB- FIRST MIXTURE -LRB- B -RRB- SECOND MIXTURE -LRB- C -RRB- BOTH THE SAME -LRB- D -RRB- IS NOT CLEAR 23)


NIL
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'Batch' => [
                       'A number when decreased by 10% becomes 30.',
                       'Find the number.',
                       '(a) 300 (b) 3 1 (c) 33 3 24.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 10]: [A, number, when, decreased, by, 10, %, becomes, 30, .]
Parsing [sent. 2 len. 4]: [Find, the, number, .]
Parsing [sent. 3 len. 16]: [-LRB-, a, -RRB-, 300, -LRB-, b, -RRB-, 3, 1, -LRB-, c, -RRB-, 33, 3, 24, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 30 words in 3 sentences (12.50 wds/sec; 1.25 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT A) (NN number))
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBD decreased)
            (PP (IN by)
              (NP (CD 10) (NN %)))))))
    (VP (VBZ becomes)
      (NP (CD 30)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(number-2, A-1)',
                                                       'nsubj(30-9, number-2)',
                                                       'advmod(decreased-4, when-3)',
                                                       'dep(number-2, decreased-4)',
                                                       'num(%-7, 10-6)',
                                                       'prep_by(decreased-4, %-7)',
                                                       'cop(30-9, becomes-8)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP (DT the) (NN number)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(number-3, the-2)',
                                                       'dobj(Find-1, number-3)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 300))
    (PRN (-LRB- -LRB-)
      (X (SYM b))
      (-RRB- -RRB-))
    (PP
      (NP
        (NP
          (QP (CD 3) (CD 1)))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (IN 33)
      (NP (CD 3) (CD 24)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dep(300-4, b-6)',
                                                       'number(1-9, 3-8)',
                                                       'npadvmod(300-4, 1-9)',
                                                       'dep(1-9, c-11)',
                                                       'num(24-15, 3-14)',
                                                       'prep_33(300-4, 24-15)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT A) (NN number))
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBD decreased)
            (PP (IN by)
              (NP (CD 10) (NN %)))))))
    (VP (VBZ becomes)
      (NP (CD 30)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP (DT the) (NN number)))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 300))
    (PRN (-LRB- -LRB-)
      (X (SYM b))
      (-RRB- -RRB-))
    (PP
      (NP
        (NP
          (QP (CD 3) (CD 1)))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (IN 33)
      (NP (CD 3) (CD 24)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT A) (NN number))
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBD decreased)
            (PP (IN by)
              (NP (CD 10) (NN %)))))))
    (VP (VBZ becomes)
      (NP (CD 30)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT A) (NN number))
      (SBAR
        (WHADVP (WRB when))
        (S
          (VP (VBD decreased)
            (PP (IN by)
              (NP (CD 10) (NN %)))))))
    (VP (VBZ becomes)
      (NP (CD 30))))))
'
        };
Submitting expect

(A NUMBER WHEN DECREASED BY 10 % BECOMES 30)

 A NUMBER MAY BECOME SOME NUMBER_OR_PORTION.

((:I (:Q A{N} NUMBER.N) BECOME.V (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A NUMBER WHEN DECREASED BY 10 % BECOMES 30)

 A NUMBER MAY BECOME SOME NUMBER_OR_PORTION.

((:I (:Q A{N} NUMBER.N) BECOME.V (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP (DT the) (NN number)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP (DT the) (NN number))))))
'
        };
Submitting expect

(FIND THE NUMBER)


NIL
______________________________________________________________________
[7]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 300))
    (PRN (-LRB- -LRB-)
      (X (SYM b))
      (-RRB- -RRB-))
    (PP
      (NP
        (NP
          (QP (CD 3) (CD 1)))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (IN 33)
      (NP (CD 3) (CD 24)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 300))
    (PRN (-LRB- -LRB-)
      (X (SYM b))
      (-RRB- -RRB-))
    (PP
      (NP
        (NP
          (QP (CD 3) (CD 1)))
        (PRN (-LRB- -LRB-)
          (X (SYM c))
          (-RRB- -RRB-)))
      (IN 33)
      (NP (CD 3) (CD 24))))))
'
        };
Submitting expect

(-LRB- A -RRB- 300 -LRB- B -RRB- 3 1 -LRB- C -RRB- 33 3 24)


NIL
______________________________________________________________________
[8]> Got result
$VAR1 = {
          'Batch' => [
                       '(a) (c) 25.',
                       '(a) (c) 26.',
                       '(c) 15 5 3 and 4 . Find their product.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 8]: [-LRB-, a, -RRB-, -LRB-, c, -RRB-, 25, .]
Parsing [sent. 2 len. 8]: [-LRB-, a, -RRB-, -LRB-, c, -RRB-, 26, .]
Parsing [sent. 3 len. 9]: [-LRB-, c, -RRB-, 15, 5, 3, and, 4, .]
Parsing [sent. 4 len. 4]: [Find, their, product, .]
Parsed file: /tmp/stanfordparser.txt [4 sentences].
Parsed 29 words in 4 sentences (14.97 wds/sec; 2.07 sents/sec).
$VAR1 = {
          'Tree' => '((NP
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (ADJP (CD 25))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 26))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 15) (CD 5)))
      (NP (CD 3)
        (CC and)
        (CD 4)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP (PRP$ their) (NN product)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (ADJP (CD 25))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (ADJP (CD 25)))))
'
        };
Submitting expect

(-LRB- A -RRB- -LRB- C -RRB- 25)


NIL
______________________________________________________________________
[9]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 26))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 26)))))
'
        };
Submitting expect

*** - STRING: argument 26 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [10]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 26 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [10]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 15) (CD 5)))
      (NP (CD 3)
        (CC and)
        (CD 4)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
    (NP
      (NP
        (QP (CD 15) (CD 5)))
      (NP (CD 3)
        (CC and)
        (CD 4))))))
'
        };
Submitting expect

(-LRB- C -RRB- 15 5 3 AND 4)


NIL
______________________________________________________________________
[3]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP (PRP$ their) (NN product)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP (PRP$ their) (NN product))))))
'
        };
Submitting expect

(FIND THEIR PRODUCT)

 INDIVIDUAL -S MAY HAVE A PRODUCT.

((:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET PRODUCT.N)))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THEIR PRODUCT)

 INDIVIDUAL -S MAY HAVE A PRODUCT.

((:I (:Q DET (:F PLUR INDIVIDUAL*.N)) HAVE.V (:Q DET PRODUCT.N)))
______________________________________________________________________
[4]>'
        };
$VAR1 = {
          'Batch' => [
                       '8 8 (b) 18 (a) 18 3 8 (b) 6 (c) 21 3 5 3 8 (d) 17 3 8 27.',
                       '50 men do a work in 12 days working 6 hours per day.',
                       '2 3 (d) 9 (a) 15 3 5 28.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 32]: [8, 8, -LRB-, b, -RRB-, 18, -LRB-, a, -RRB-, 18, 3, 8, -LRB-, b, -RRB-, 6, -LRB-, c, -RRB-, 21, 3, 5, 3, 8, -LRB-, d, -RRB-, 17, 3, 8, 27, .]
Parsing [sent. 2 len. 14]: [50, men, do, a, work, in, 12, days, working, 6, hours, per, day, .]
Parsing [sent. 3 len. 14]: [2, 3, -LRB-, d, -RRB-, 9, -LRB-, a, -RRB-, 15, 3, 5, 28, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 60 words in 3 sentences (18.38 wds/sec; 0.92 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP
      (NP
        (QP (CD 8) (CD 8)))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-)))
    (NP
      (NP (CD 18))
      (PRN (-LRB- -LRB-)
        (X (SYM a))
        (-RRB- -RRB-))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (QP (CD 18) (CD 3))
                (CD 8))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBD 21)
            (NP
              (NP
                (NP
                  (QP (CD 3) (CD 5))
                  (QP (CD 3) (CD 8)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (ADJP (CD 17) (CD 3)))
            (NP
              (QP (CD 8) (CD 27)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'number(8-2, 8-1)',
                                                       'dep(8-2, b-4)',
                                                       'dep(8-2, 18-6)',
                                                       'dep(18-6, a-8)',
                                                       'number(3-11, 18-10)',
                                                       'num(8-12, 3-11)',
                                                       'nsubj(21-20, 8-12)',
                                                       'dep(8-12, b-14)',
                                                       'dep(8-12, 6-16)',
                                                       'dep(8-12, c-18)',
                                                       'rcmod(18-6, 21-20)',
                                                       'number(5-22, 3-21)',
                                                       'num(8-24, 5-22)',
                                                       'number(8-24, 3-23)',
                                                       'iobj(21-20, 8-24)',
                                                       'appos(8-24, d-26)',
                                                       'number(3-29, 17-28)',
                                                       'amod(8-24, 3-29)',
                                                       'number(27-31, 8-30)',
                                                       'dobj(21-20, 27-31)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (CD 50) (NNS men))
    (VP (VBP do)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP
            (NP (CD 12) (NNS days))
            (VP (VBG working)
              (NP
                (NP (CD 6) (NNS hours))
                (PP (IN per)
                  (NP (NN day)))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(men-2, 50-1)',
                                                       'nsubj(do-3, men-2)',
                                                       'det(work-5, a-4)',
                                                       'dobj(do-3, work-5)',
                                                       'num(days-8, 12-7)',
                                                       'prep_in(work-5, days-8)',
                                                       'partmod(days-8, working-9)',
                                                       'num(hours-11, 6-10)',
                                                       'dobj(working-9, hours-11)',
                                                       'prep_per(hours-11, day-13)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP
      (NP
        (QP (CD 2) (CD 3)))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (NP
      (NP
        (NP (CD 9))
        (PRN (-LRB- -LRB-)
          (X (SYM a))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 15) (CD 3))
        (QP (CD 5) (CD 28))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'number(3-2, 2-1)',
                                                       'appos(3-2, d-4)',
                                                       'dep(3-2, 9-6)',
                                                       'dep(9-6, a-8)',
                                                       'number(3-11, 15-10)',
                                                       'num(28-13, 3-11)',
                                                       'number(28-13, 5-12)',
                                                       'dep(9-6, 28-13)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((NP
    (NP
      (NP
        (QP (CD 8) (CD 8)))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-)))
    (NP
      (NP (CD 18))
      (PRN (-LRB- -LRB-)
        (X (SYM a))
        (-RRB- -RRB-))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (QP (CD 18) (CD 3))
                (CD 8))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBD 21)
            (NP
              (NP
                (NP
                  (QP (CD 3) (CD 5))
                  (QP (CD 3) (CD 8)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (ADJP (CD 17) (CD 3)))
            (NP
              (QP (CD 8) (CD 27)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (CD 50) (NNS men))
    (VP (VBP do)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP
            (NP (CD 12) (NNS days))
            (VP (VBG working)
              (NP
                (NP (CD 6) (NNS hours))
                (PP (IN per)
                  (NP (NN day)))))))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP
      (NP
        (QP (CD 2) (CD 3)))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (NP
      (NP
        (NP (CD 9))
        (PRN (-LRB- -LRB-)
          (X (SYM a))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 15) (CD 3))
        (QP (CD 5) (CD 28))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (NP
        (QP (CD 8) (CD 8)))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-)))
    (NP
      (NP (CD 18))
      (PRN (-LRB- -LRB-)
        (X (SYM a))
        (-RRB- -RRB-))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (QP (CD 18) (CD 3))
                (CD 8))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBD 21)
            (NP
              (NP
                (NP
                  (QP (CD 3) (CD 5))
                  (QP (CD 3) (CD 8)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (ADJP (CD 17) (CD 3)))
            (NP
              (QP (CD 8) (CD 27)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (NP
        (QP (CD 8) (CD 8)))
      (PRN (-LRB- -LRB-)
        (X (SYM b))
        (-RRB- -RRB-)))
    (NP
      (NP (CD 18))
      (PRN (-LRB- -LRB-)
        (X (SYM a))
        (-RRB- -RRB-))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (QP (CD 18) (CD 3))
                (CD 8))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (VP (VBD 21)
            (NP
              (NP
                (NP
                  (QP (CD 3) (CD 5))
                  (QP (CD 3) (CD 8)))
                (PRN (-LRB- -LRB-)
                  (NP (NNP d))
                  (-RRB- -RRB-)))
              (ADJP (CD 17) (CD 3)))
            (NP
              (QP (CD 8) (CD 27))))))))))
'
        };
Submitting expect

*** - STRING: argument 21 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 21 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 50) (NNS men))
    (VP (VBP do)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP
            (NP (CD 12) (NNS days))
            (VP (VBG working)
              (NP
                (NP (CD 6) (NNS hours))
                (PP (IN per)
                  (NP (NN day)))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 50) (NNS men))
    (VP (VBP do)
      (NP
        (NP (DT a) (NN work))
        (PP (IN in)
          (NP
            (NP (CD 12) (NNS days))
            (VP (VBG working)
              (NP
                (NP (CD 6) (NNS hours))
                (PP (IN per)
                  (NP (NN day))))))))))))
'
        };
Submitting expect

(50 MEN DO A WORK IN 12 DAYS WORKING 6 HOURS PER DAY)

 SOME_NUMBER_OF MEN MAY DO WORK.
 WORK CAN BE IN SOME_NUMBER_OF DAYS.
 SOME_NUMBER_OF DAYS MAY WORK SOME_NUMBER_OF HOURS.

((:I (:Q SOME-NUMBER-OF (:F PLUR MAN.N)) DO.V (:Q A{N} WORK.N)) (:I (:Q A{N} WORK.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N)))
 (:I (:Q SOME-NUMBER-OF (:F PLUR DAY.N)) WORK.V (:Q SOME-NUMBER-OF (:F PLUR HOUR.N))))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(50 MEN DO A WORK IN 12 DAYS WORKING 6 HOURS PER DAY)

 SOME_NUMBER_OF MEN MAY DO WORK.
 WORK CAN BE IN SOME_NUMBER_OF DAYS.
 SOME_NUMBER_OF DAYS MAY WORK SOME_NUMBER_OF HOURS.

((:I (:Q SOME-NUMBER-OF (:F PLUR MAN.N)) DO.V (:Q A{N} WORK.N)) (:I (:Q A{N} WORK.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N)))
 (:I (:Q SOME-NUMBER-OF (:F PLUR DAY.N)) WORK.V (:Q SOME-NUMBER-OF (:F PLUR HOUR.N))))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (NP
        (QP (CD 2) (CD 3)))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (NP
      (NP
        (NP (CD 9))
        (PRN (-LRB- -LRB-)
          (X (SYM a))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 15) (CD 3))
        (QP (CD 5) (CD 28))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (NP
        (QP (CD 2) (CD 3)))
      (PRN (-LRB- -LRB-)
        (NP (NNP d))
        (-RRB- -RRB-)))
    (NP
      (NP
        (NP (CD 9))
        (PRN (-LRB- -LRB-)
          (X (SYM a))
          (-RRB- -RRB-)))
      (NP
        (QP (CD 15) (CD 3))
        (QP (CD 5) (CD 28)))))))
'
        };
Submitting expect

(2 3 -LRB- D -RRB- 9 -LRB- A -RRB- 15 3 5 28)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       'A, B and C started a partnership business paying the capital amounts of Rs 6500, Rs 9100 and Rs 5200 respectively.',
                       'They equally distributed amongst themselves the two-third of the total sum of profit Rs 14400 and each took the share of the remaining amount of profit in the ratio of the capital amount each had paid.',
                       'What was the sum of money each partner received?'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 24]: [A, ,, B, and, C, started, a, partnership, business, paying, the, capital, amounts, of, Rs, 6500, ,, Rs, 9100, and, Rs, 5200, respectively, .]
Parsing [sent. 2 len. 37]: [They, equally, distributed, amongst, themselves, the, two-third, of, the, total, sum, of, profit, Rs, 14400, and, each, took, the, share, of, the, remaining, amount, of, profit, in, the, ratio, of, the, capital, amount, each, had, paid, .]
Parsing [sent. 3 len. 10]: [What, was, the, sum, of, money, each, partner, received, ?]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 71 words in 3 sentences (13.99 wds/sec; 0.59 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP A) (, ,) (NNP B)
      (CC and)
      (NNP C))
    (VP (VBD started)
      (NP
        (NP (DT a) (NN partnership) (NN business))
        (VP (VBG paying)
          (NP
            (NP (DT the) (NN capital) (NNS amounts))
            (PP (IN of)
              (NP
                (NP (NNP Rs) (CD 6500))
                (, ,)
                (NP (NNP Rs) (CD 9100))
                (CC and)
                (NP (NNP Rs) (CD 5200)))))
          (ADVP (RB respectively)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(started-6, A-1)',
                                                       'conj_and(A-1, B-3)',
                                                       'nsubj(started-6, B-3)',
                                                       'conj_and(A-1, C-5)',
                                                       'nsubj(started-6, C-5)',
                                                       'det(business-9, a-7)',
                                                       'nn(business-9, partnership-8)',
                                                       'dobj(started-6, business-9)',
                                                       'partmod(business-9, paying-10)',
                                                       'det(amounts-13, the-11)',
                                                       'nn(amounts-13, capital-12)',
                                                       'dobj(paying-10, amounts-13)',
                                                       'prep_of(amounts-13, Rs-15)',
                                                       'num(Rs-15, 6500-16)',
                                                       'prep_of(amounts-13, Rs-18)',
                                                       'conj_and(Rs-15, Rs-18)',
                                                       'num(Rs-18, 9100-19)',
                                                       'prep_of(amounts-13, Rs-21)',
                                                       'conj_and(Rs-15, Rs-21)',
                                                       'num(Rs-21, 5200-22)',
                                                       'advmod(paying-10, respectively-23)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP (PRP They))
      (VP
        (ADVP (RB equally))
        (VBN distributed)
        (PP (IN amongst)
          (NP (PRP themselves)))
        (NP
          (NP (DT the) (NN two-third))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ total) (NN sum))
              (PP (IN of)
                (NP (NN profit) (NNP Rs) (CD 14400))))))))
    (CC and)
    (S
      (NP (DT each))
      (VP (VBD took)
        (SBAR
          (S
            (NP
              (NP (DT the) (NN share))
              (PP (IN of)
                (NP
                  (NP (DT the) (VBG remaining) (NN amount))
                  (PP (IN of)
                    (NP
                      (NP (NN profit))
                      (PP (IN in)
                        (NP
                          (NP (DT the) (NN ratio))
                          (PP (IN of)
                            (NP
                              (NP (DT the) (NN capital) (NN amount))
                              (NP (DT each)))))))))))
            (VP (VBD had)
              (VP (VBN paid)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(distributed-3, They-1)',
                                                       'advmod(distributed-3, equally-2)',
                                                       'prep_amongst(distributed-3, themselves-5)',
                                                       'det(two-third-7, the-6)',
                                                       'dobj(distributed-3, two-third-7)',
                                                       'det(sum-11, the-9)',
                                                       'amod(sum-11, total-10)',
                                                       'prep_of(two-third-7, sum-11)',
                                                       'nn(Rs-14, profit-13)',
                                                       'prep_of(sum-11, Rs-14)',
                                                       'num(Rs-14, 14400-15)',
                                                       'nsubj(took-18, each-17)',
                                                       'conj_and(distributed-3, took-18)',
                                                       'det(share-20, the-19)',
                                                       'nsubj(paid-36, share-20)',
                                                       'det(amount-24, the-22)',
                                                       'amod(amount-24, remaining-23)',
                                                       'prep_of(share-20, amount-24)',
                                                       'prep_of(amount-24, profit-26)',
                                                       'det(ratio-29, the-28)',
                                                       'prep_in(profit-26, ratio-29)',
                                                       'det(amount-33, the-31)',
                                                       'nn(amount-33, capital-32)',
                                                       'prep_of(ratio-29, amount-33)',
                                                       'dep(amount-33, each-34)',
                                                       'aux(paid-36, had-35)',
                                                       'ccomp(took-18, paid-36)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SBARQ
    (WHNP (WP What))
    (SQ (VBD was)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (NN money)))
        (SBAR
          (S
            (NP (DT each) (NN partner))
            (VP (VBD received))))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'attr(was-2, What-1)',
                                                       'det(sum-4, the-3)',
                                                       'nsubj(was-2, sum-4)',
                                                       'dobj(received-9, sum-4)',
                                                       'prep_of(sum-4, money-6)',
                                                       'det(partner-8, each-7)',
                                                       'nsubj(received-9, partner-8)',
                                                       'rcmod(sum-4, received-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (NNP A) (\\, \\,) (NNP B)
      (CC and)
      (NNP C))
    (VP (VBD started)
      (NP
        (NP (DT a) (NN partnership) (NN business))
        (VP (VBG paying)
          (NP
            (NP (DT the) (NN capital) (NNS amounts))
            (PP (IN of)
              (NP
                (NP (NNP Rs) (CD 6500))
                (\\, \\,)
                (NP (NNP Rs) (CD 9100))
                (CC and)
                (NP (NNP Rs) (CD 5200)))))
          (ADVP (RB respectively)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (NP (PRP They))
      (VP
        (ADVP (RB equally))
        (VBN distributed)
        (PP (IN amongst)
          (NP (PRP themselves)))
        (NP
          (NP (DT the) (NN two-third))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ total) (NN sum))
              (PP (IN of)
                (NP (NN profit) (NNP Rs) (CD 14400))))))))
    (CC and)
    (S
      (NP (DT each))
      (VP (VBD took)
        (SBAR
          (S
            (NP
              (NP (DT the) (NN share))
              (PP (IN of)
                (NP
                  (NP (DT the) (VBG remaining) (NN amount))
                  (PP (IN of)
                    (NP
                      (NP (NN profit))
                      (PP (IN in)
                        (NP
                          (NP (DT the) (NN ratio))
                          (PP (IN of)
                            (NP
                              (NP (DT the) (NN capital) (NN amount))
                              (NP (DT each)))))))))))
            (VP (VBD had)
              (VP (VBN paid)))))))))'
        };
$VAR1 = {
          'Tree' => '((SBARQ
    (WHNP (WP What))
    (SQ (VBD was)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (NN money)))
        (SBAR
          (S
            (NP (DT each) (NN partner))
            (VP (VBD received))))))
    (\\. ?)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP A) (\\, \\,) (NNP B)
      (CC and)
      (NNP C))
    (VP (VBD started)
      (NP
        (NP (DT a) (NN partnership) (NN business))
        (VP (VBG paying)
          (NP
            (NP (DT the) (NN capital) (NNS amounts))
            (PP (IN of)
              (NP
                (NP (NNP Rs) (CD 6500))
                (\\, \\,)
                (NP (NNP Rs) (CD 9100))
                (CC and)
                (NP (NNP Rs) (CD 5200)))))
          (ADVP (RB respectively)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP A) (\\, \\,) (NNP B)
      (CC and)
      (NNP C))
    (VP (VBD started)
      (NP
        (NP (DT a) (NN partnership) (NN business))
        (VP (VBG paying)
          (NP
            (NP (DT the) (NN capital) (NNS amounts))
            (PP (IN of)
              (NP
                (NP (NNP Rs) (CD 6500))
                (\\, \\,)
                (NP (NNP Rs) (CD 9100))
                (CC and)
                (NP (NNP Rs) (CD 5200)))))
          (ADVP (RB respectively))))))))
'
        };
Submitting expect

(A , B AND C STARTED A PARTNERSHIP BUSINESS PAYING THE CAPITAL AMOUNTS OF RS 6500 , RS 9100 AND RS 5200 RESPECTIVELY)

 AN |\|A_\\\|,\\\|_B_AND_C\||[PERSON??] MAY START A PARTNERSHIP BUSINESS.
 A PARTNERSHIP BUSINESS MAY PAY CAPITAL AMOUNTS OF A RS[PERSON??].
 A RS[PERSON??] MAY UNDERGO CAPITAL AMOUNTS.

((:I (:Q DET |\|A_\\\|,\\\|_B_AND_C\|.NAME|) START.V (:Q A{N} (:F NN PARTNERSHIP.N BUSINESS.N)))
 (:I (:Q A{N} (:F NN PARTNERSHIP.N BUSINESS.N)) PAY.V (:A (:Q THE (:F NN CAPITAL.N (:F PLUR AMOUNT.N))) (:P OF.P (:Q DET RS.NAME))))
 (:I (:Q DET RS.NAME) UNDERGO.V (:Q DET (:F NN CAPITAL.N (:F PLUR AMOUNT.N)))))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A , B AND C STARTED A PARTNERSHIP BUSINESS PAYING THE CAPITAL AMOUNTS OF RS 6500 , RS 9100 AND RS 5200 RESPECTIVELY)

 AN |\\|A_\\\\\\|,\\\\\\|_B_AND_C\\||[PERSON??] MAY START A PARTNERSHIP BUSINESS.
 A PARTNERSHIP BUSINESS MAY PAY CAPITAL AMOUNTS OF A RS[PERSON??].
 A RS[PERSON??] MAY UNDERGO CAPITAL AMOUNTS.

((:I (:Q DET |\\|A_\\\\\\|,\\\\\\|_B_AND_C\\|.NAME|) START.V (:Q A{N} (:F NN PARTNERSHIP.N BUSINESS.N)))
 (:I (:Q A{N} (:F NN PARTNERSHIP.N BUSINESS.N)) PAY.V (:A (:Q THE (:F NN CAPITAL.N (:F PLUR AMOUNT.N))) (:P OF.P (:Q DET RS.NAME))))
 (:I (:Q DET RS.NAME) UNDERGO.V (:Q DET (:F NN CAPITAL.N (:F PLUR AMOUNT.N)))))
______________________________________________________________________
[5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP (PRP They))
      (VP
        (ADVP (RB equally))
        (VBN distributed)
        (PP (IN amongst)
          (NP (PRP themselves)))
        (NP
          (NP (DT the) (NN two-third))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ total) (NN sum))
              (PP (IN of)
                (NP (NN profit) (NNP Rs) (CD 14400))))))))
    (CC and)
    (S
      (NP (DT each))
      (VP (VBD took)
        (SBAR
          (S
            (NP
              (NP (DT the) (NN share))
              (PP (IN of)
                (NP
                  (NP (DT the) (VBG remaining) (NN amount))
                  (PP (IN of)
                    (NP
                      (NP (NN profit))
                      (PP (IN in)
                        (NP
                          (NP (DT the) (NN ratio))
                          (PP (IN of)
                            (NP
                              (NP (DT the) (NN capital) (NN amount))
                              (NP (DT each)))))))))))
            (VP (VBD had)
              (VP (VBN paid)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP (PRP They))
      (VP
        (ADVP (RB equally))
        (VBN distributed)
        (PP (IN amongst)
          (NP (PRP themselves)))
        (NP
          (NP (DT the) (NN two-third))
          (PP (IN of)
            (NP
              (NP (DT the) (JJ total) (NN sum))
              (PP (IN of)
                (NP (NN profit) (NNP Rs) (CD 14400))))))))
    (CC and)
    (S
      (NP (DT each))
      (VP (VBD took)
        (SBAR
          (S
            (NP
              (NP (DT the) (NN share))
              (PP (IN of)
                (NP
                  (NP (DT the) (VBG remaining) (NN amount))
                  (PP (IN of)
                    (NP
                      (NP (NN profit))
                      (PP (IN in)
                        (NP
                          (NP (DT the) (NN ratio))
                          (PP (IN of)
                            (NP
                              (NP (DT the) (NN capital) (NN amount))
                              (NP (DT each)))))))))))
            (VP (VBD had)
              (VP (VBN paid))))))))))
'
        };
Submitting expect

(THEY EQUALLY DISTRIBUTED AMONGST THEMSELVES THE TWO-THIRD OF THE TOTAL SUM OF PROFIT RS 14400 AND EACH TOOK THE SHARE OF THE REMAINING AMOUNT OF
 PROFIT IN THE RATIO OF THE CAPITAL AMOUNT EACH HAD PAID)

 INDIVIDUAL -S MAY BE DISTRIBUTE -ED.
 SOME_NUMBER_OF THING MAY TAKE.
 A SHARE OF AN AMOUNT OF PROFIT MAY PAY.
 AN AMOUNT CAN BE REMAINING.
 PROFIT CAN BE IN A RATIO OF A CAPITAL AMOUNT.
 A CAPITAL AMOUNT MAY HAVE A RATIO.

((:I (:Q DET (:F PLUR INDIVIDUAL*.N)) (:F BE.PASV DISTRIBUTE.V)) (:I (:Q SOME-NUMBER-OF THING-REFERRED-TO.N) TAKE.V)
 (:I (:A (:Q THE SHARE.N) (:P OF.P (:A (:Q THE AMOUNT.N) (:P OF.P (:F K PROFIT.N))))) PAY.V) NIL (:I (:Q DET AMOUNT.N) REMAINING.A)
 (:I (:F K PROFIT.N) IN.P (:A (:Q THE RATIO.N) (:P OF.P (:Q THE (:F NN CAPITAL.N AMOUNT.N)))))
 (:I (:Q DET (:F NN CAPITAL.N AMOUNT.N)) HAVE.V (:Q DET RATIO.N)))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THEY EQUALLY DISTRIBUTED AMONGST THEMSELVES THE TWO-THIRD OF THE TOTAL SUM OF PROFIT RS 14400 AND EACH TOOK THE SHARE OF THE REMAINING AMOUNT OF
 PROFIT IN THE RATIO OF THE CAPITAL AMOUNT EACH HAD PAID)

 INDIVIDUAL -S MAY BE DISTRIBUTE -ED.
 SOME_NUMBER_OF THING MAY TAKE.
 A SHARE OF AN AMOUNT OF PROFIT MAY PAY.
 AN AMOUNT CAN BE REMAINING.
 PROFIT CAN BE IN A RATIO OF A CAPITAL AMOUNT.
 A CAPITAL AMOUNT MAY HAVE A RATIO.

((:I (:Q DET (:F PLUR INDIVIDUAL*.N)) (:F BE.PASV DISTRIBUTE.V)) (:I (:Q SOME-NUMBER-OF THING-REFERRED-TO.N) TAKE.V)
 (:I (:A (:Q THE SHARE.N) (:P OF.P (:A (:Q THE AMOUNT.N) (:P OF.P (:F K PROFIT.N))))) PAY.V) NIL (:I (:Q DET AMOUNT.N) REMAINING.A)
 (:I (:F K PROFIT.N) IN.P (:A (:Q THE RATIO.N) (:P OF.P (:Q THE (:F NN CAPITAL.N AMOUNT.N)))))
 (:I (:Q DET (:F NN CAPITAL.N AMOUNT.N)) HAVE.V (:Q DET RATIO.N)))
______________________________________________________________________
[6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SBARQ
    (WHNP (WP What))
    (SQ (VBD was)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (NN money)))
        (SBAR
          (S
            (NP (DT each) (NN partner))
            (VP (VBD received))))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SBARQ
    (WHNP (WP What))
    (SQ (VBD was)
      (NP
        (NP (DT the) (NN sum))
        (PP (IN of)
          (NP (NN money)))
        (SBAR
          (S
            (NP (DT each) (NN partner))
            (VP (VBD received))))))
    (\\. ?))))))
'
        };
Submitting expect

(WHAT WAS THE SUM OF MONEY EACH PARTNER RECEIVED ?)

 SOME_NUMBER_OF PARTNER MAY RECEIVE.

(NIL (:I (:Q SOME-NUMBER-OF PARTNER.N) RECEIVE.V))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(WHAT WAS THE SUM OF MONEY EACH PARTNER RECEIVED ?)

 SOME_NUMBER_OF PARTNER MAY RECEIVE.

(NIL (:I (:Q SOME-NUMBER-OF PARTNER.N) RECEIVE.V))
______________________________________________________________________
[7]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) A—Rs 4700, B—Rs 5300, C—Rs 4400 (b) A—Rs 5300, B—Rs 4700, C—Rs 4400 (c) A—Rs 4400, B—Rs 4700, C—Rs 5300 (d) A—Rs 4700, B—Rs 5300, C—Rs 2400 29.',
                       'Find the greatest and least of 6 + 5, 3 +2 2, 2 + 3 (a) Greatest— 6 + 5 , Least— 2 + 3 (b) Greatest— 3 + 2 2 , Least— 2 + 3 (c) Greatest— 2 + 3 , Least— 3 + 2 2 (d) Greatest— 2 + 3 , Least— 6 + 5 30.',
                       'Find the least integer when added to 512 makes it a perfect square.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 70]: [-LRB-, a, -RRB-, A, --, Rs, 4700, ,, B, --, Rs, 5300, ,, C, --, Rs, 4400, -LRB-, b, -RRB-, A, --, Rs, 5300, ,, B, --, Rs, 4700, ,, C, --, Rs, 4400, -LRB-, c, -RRB-, A, --, Rs, 4400, ,, B, --, Rs, 4700, ,, C, --, Rs, 5300, -LRB-, d, -RRB-, A, --, Rs, 4700, ,, B, --, Rs, 5300, ,, C, --, Rs, 2400, 29, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 2 len. 77]: [Find, the, greatest, and, least, of, 6, +, 5, ,, 3, +2, 2, ,, 2, +, 3, -LRB-, a, -RRB-, Greatest, --, 6, +, 5, ,, Least, --, 2, +, 3, -LRB-, b, -RRB-, Greatest, --, 3, +, 2, 2, ,, Least, --, 2, +, 3, -LRB-, c, -RRB-, Greatest, --, 2, +, 3, ,, Least, --, 3, +, 2, 2, -LRB-, d, -RRB-, Greatest, --, 2, +, 3, ,, Least, --, 6, +, 5, 30, .]
Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsing [sent. 3 len. 14]: [Find, the, least, integer, when, added, to, 512, makes, it, a, perfect, square, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 161 words in 3 sentences (43.62 wds/sec; 0.81 sents/sec).
  2 sentences were not parsed:
    2 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
Sentence skipped: no PCFG fallback.
SENTENCE_SKIPPED_OR_UNPARSABLE
(ROOT
  (S
    (VP (VB Find)
      (NP
        (NP (DT the) (JJS least) (NN integer))
        (SBAR
          (WHADVP (WRB when))
          (S
            (S
              (VP (VBN added)
                (PP (TO to)
                  (NP (CD 512)))))
            (VP (VBZ makes)
              (S
                (NP (PRP it))
                (NP (DT a) (JJ perfect) (NN square))))))))
    (. .)))'
        };
$VAR1 = {
          'Batch' => [
                       '(a) 511 (b) 31 (c) 17 (d) 28 31.',
                       'The ratio of the sides of a triangle is 3 : 4 : 5 and its perimeter is 96 metres.',
                       'Find the area of the triangle in sq metres.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 18]: [-LRB-, a, -RRB-, 511, -LRB-, b, -RRB-, 31, -LRB-, c, -RRB-, 17, -LRB-, d, -RRB-, 28, 31, .]
Parsing [sent. 2 len. 21]: [The, ratio, of, the, sides, of, a, triangle, is, 3, :, 4, :, 5, and, its, perimeter, is, 96, metres, .]
Parsing [sent. 3 len. 10]: [Find, the, area, of, the, triangle, in, sq, metres, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 49 words in 3 sentences (16.78 wds/sec; 1.03 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 511)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 17)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 28) (CD 31)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dep(31-8, b-6)',
                                                       'dep(511-4, 31-8)',
                                                       'dep(31-8, c-10)',
                                                       'dep(31-8, 17-12)',
                                                       'dep(31-8, d-14)',
                                                       'num(31-17, 28-16)',
                                                       'dep(31-8, 31-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP
            (NP (DT the) (NNS sides))
            (PP (IN of)
              (NP (DT a) (NN triangle))))))
      (VP (VBZ is)
        (NP (CD 3))))
    (: :)
    (S
      (NP
        (NP (CD 4) (: :) (CD 5))
        (CC and)
        (NP (PRP$ its) (NN perimeter)))
      (VP (VBZ is)
        (NP (CD 96) (NNS metres))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(ratio-2, The-1)',
                                                       'nsubj(3-10, ratio-2)',
                                                       'det(sides-5, the-4)',
                                                       'prep_of(ratio-2, sides-5)',
                                                       'det(triangle-8, a-7)',
                                                       'prep_of(sides-5, triangle-8)',
                                                       'cop(3-10, is-9)',
                                                       'num(5-14, 4-12)',
                                                       'nsubj(metres-20, 5-14)',
                                                       'poss(perimeter-17, its-16)',
                                                       'conj_and(5-14, perimeter-17)',
                                                       'nsubj(metres-20, perimeter-17)',
                                                       'cop(metres-20, is-18)',
                                                       'num(metres-20, 96-19)',
                                                       'parataxis(3-10, metres-20)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN area))
        (PP (IN of)
          (NP
            (NP (DT the) (NN triangle))
            (PP (IN in)
              (NP (NN sq) (NNS metres)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(area-3, the-2)',
                                                       'dobj(Find-1, area-3)',
                                                       'det(triangle-6, the-5)',
                                                       'prep_of(area-3, triangle-6)',
                                                       'nn(metres-9, sq-8)',
                                                       'prep_in(triangle-6, metres-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 511)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 17)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 28) (CD 31)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP
            (NP (DT the) (NNS sides))
            (PP (IN of)
              (NP (DT a) (NN triangle))))))
      (VP (VBZ is)
        (NP (CD 3))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 4) (\\: \\:) (CD 5))
        (CC and)
        (NP (PRP$ its) (NN perimeter)))
      (VP (VBZ is)
        (NP (CD 96) (NNS metres))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN area))
        (PP (IN of)
          (NP
            (NP (DT the) (NN triangle))
            (PP (IN in)
              (NP (NN sq) (NNS metres)))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 511)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 17)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 28) (CD 31)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB 511)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP (CD 31))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 17)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 28) (CD 31))))))))
'
        };
Submitting expect

(-LRB- A -RRB- 511 -LRB- B -RRB- 31 -LRB- C -RRB- 17 -LRB- D -RRB- 28 31)


NIL
______________________________________________________________________
[8]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP
            (NP (DT the) (NNS sides))
            (PP (IN of)
              (NP (DT a) (NN triangle))))))
      (VP (VBZ is)
        (NP (CD 3))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 4) (\\: \\:) (CD 5))
        (CC and)
        (NP (PRP$ its) (NN perimeter)))
      (VP (VBZ is)
        (NP (CD 96) (NNS metres))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP
        (NP (DT The) (NN ratio))
        (PP (IN of)
          (NP
            (NP (DT the) (NNS sides))
            (PP (IN of)
              (NP (DT a) (NN triangle))))))
      (VP (VBZ is)
        (NP (CD 3))))
    (\\: \\:)
    (S
      (NP
        (NP (CD 4) (\\: \\:) (CD 5))
        (CC and)
        (NP (PRP$ its) (NN perimeter)))
      (VP (VBZ is)
        (NP (CD 96) (NNS metres)))))))
'
        };
Submitting expect

(THE RATIO OF THE SIDES OF A TRIANGLE IS 3 : 4 : 5 AND ITS PERIMETER IS 96 METRES)

 A RATIO OF SIDES OF A TRIANGLE CAN BE A NUMBER_OR_PORTION.
 A THING-REFERRED-TO MAY HAVE A PERIMETER.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:A (:Q THE (:F PLUR SIDE.N)) (:P OF.P (:Q A{N} TRIANGLE.N))))) NUMBER-OR-PORTION.N) NIL
 (:I (:Q DET THING-REFERRED-TO*.N) HAVE.V (:Q DET PERIMETER.N)))
______________________________________________________________________
[9]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE RATIO OF THE SIDES OF A TRIANGLE IS 3 : 4 : 5 AND ITS PERIMETER IS 96 METRES)

 A RATIO OF SIDES OF A TRIANGLE CAN BE A NUMBER_OR_PORTION.
 A THING-REFERRED-TO MAY HAVE A PERIMETER.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:A (:Q THE (:F PLUR SIDE.N)) (:P OF.P (:Q A{N} TRIANGLE.N))))) NUMBER-OR-PORTION.N) NIL
 (:I (:Q DET THING-REFERRED-TO*.N) HAVE.V (:Q DET PERIMETER.N)))
______________________________________________________________________
[9]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN area))
        (PP (IN of)
          (NP
            (NP (DT the) (NN triangle))
            (PP (IN in)
              (NP (NN sq) (NNS metres)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (NN area))
        (PP (IN of)
          (NP
            (NP (DT the) (NN triangle))
            (PP (IN in)
              (NP (NN sq) (NNS metres))))))))))
'
        };
Submitting expect

(FIND THE AREA OF THE TRIANGLE IN SQ METRES)

 A TRIANGLE MAY HAVE AN AREA.
 A TRIANGLE CAN BE IN SQ METRES.

((:I (:Q DET TRIANGLE.N) HAVE.V (:Q DET AREA.N)) (:I (:Q THE TRIANGLE.N) IN.P (:F K (:F NN SQ.N (:F PLUR METRE.N)))))
______________________________________________________________________
[10]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(FIND THE AREA OF THE TRIANGLE IN SQ METRES)

 A TRIANGLE MAY HAVE AN AREA.
 A TRIANGLE CAN BE IN SQ METRES.

((:I (:Q DET TRIANGLE.N) HAVE.V (:Q DET AREA.N)) (:I (:Q THE TRIANGLE.N) IN.P (:F K (:F NN SQ.N (:F PLUR METRE.N)))))
______________________________________________________________________
[10]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) 384 (b) 640 (c) 300 (d) 500 32.',
                       'Find the square root of (d) 305 The simplified value of 1.1 + (1.1)2 + (1.1)3 is: 3.431 (b) 3.641 3.111 (d) 4.641 Find the greatest prime factor of 2431.',
                       '29 (b) 23 37 (d) 17 The sum and difference of two numbers are respectively 9 If 60 men want to complete the double of the above work in 8 days, how many hours per day is to be worked by each man?'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 18]: [-LRB-, a, -RRB-, 384, -LRB-, b, -RRB-, 640, -LRB-, c, -RRB-, 300, -LRB-, d, -RRB-, 500, 32, .]
Parsing [sent. 2 len. 44]: [Find, the, square, root, of, -LRB-, d, -RRB-, 305, The, simplified, value, of, 1.1, +, -LRB-, 1.1, -RRB-, 2, +, -LRB-, 1.1, -RRB-, 3, is, :, 3.431, -LRB-, b, -RRB-, 3.641, 3.111, -LRB-, d, -RRB-, 4.641, Find, the, greatest, prime, factor, of, 2431, .]
Parsing [sent. 3 len. 49]: [29, -LRB-, b, -RRB-, 23, 37, -LRB-, d, -RRB-, 17, The, sum, and, difference, of, two, numbers, are, respectively, 9, If, 60, men, want, to, complete, the, double, of, the, above, work, in, 8, days, ,, how, many, hours, per, day, is, to, be, worked, by, each, man, ?]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 111 words in 3 sentences (12.60 wds/sec; 0.34 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 384))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 640)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 300)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 500) (CD 32)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(300-12, 384-4)',
                                                       'dep(384-4, b-6)',
                                                       'partmod(384-4, 640-8)',
                                                       'dep(384-4, c-10)',
                                                       'dep(300-12, d-14)',
                                                       'num(32-17, 500-16)',
                                                       'dobj(300-12, 32-17)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (VP (VB Find)
      (NP
        (NP (DT the) (JJ square) (NN root))
        (PP (IN of)
          (NP
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 305))
                (PP
                  (NP (DT The) (VBN simplified) (NN value))
                  (PP (IN of)
                    (NP
                      (NP
                        (QP (CD 1.1) (CD +)))
                      (PRN (-LRB- -LRB-)
                        (NP (CD 1.1))
                        (-RRB- -RRB-))))))
              (NP
                (NP (CD 2) (NNS +))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1.1))
                  (-RRB- -RRB-))
                (SBAR
                  (S
                    (NP (CD 3))
                    (VP (VBZ is))))))
            (: :)
            (NP
              (NP (CD 3.431))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (SBAR
                (S
                  (NP
                    (NP
                      (QP (CD 3.641) (CD 3.111)))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP d))
                      (-RRB- -RRB-)))
                  (ADVP (RB 4.641))
                  (VP (VBP Find)
                    (NP
                      (NP (DT the) (JJS greatest) (JJ prime) (NN factor))
                      (PP (IN of)
                        (NP (CD 2431))))))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(root-4, the-2)',
                                                       'amod(root-4, square-3)',
                                                       'dobj(Find-1, root-4)',
                                                       'dep(305-9, d-7)',
                                                       'prep_of(root-4, 305-9)',
                                                       'det(value-12, The-10)',
                                                       'amod(value-12, simplified-11)',
                                                       'dep(305-9, value-12)',
                                                       'number(+-15, 1.1-14)',
                                                       'prep_of(305-9, +-15)',
                                                       'appos(+-15, 1.1-17)',
                                                       'num(+-20, 2-19)',
                                                       'dep(305-9, +-20)',
                                                       'appos(+-20, 1.1-22)',
                                                       'nsubj(is-25, 3-24)',
                                                       'rcmod(+-20, is-25)',
                                                       'dep(305-9, 3.431-27)',
                                                       'dep(3.431-27, b-29)',
                                                       'number(3.111-32, 3.641-31)',
                                                       'nsubj(Find-37, 3.111-32)',
                                                       'appos(3.111-32, d-34)',
                                                       'advmod(Find-37, 4.641-36)',
                                                       'rcmod(3.431-27, Find-37)',
                                                       'det(factor-41, the-38)',
                                                       'amod(factor-41, greatest-39)',
                                                       'amod(factor-41, prime-40)',
                                                       'dobj(Find-37, factor-41)',
                                                       'prep_of(factor-41, 2431-43)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP
      (NP
        (NP (CD 29))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (QP (CD 23) (CD 37)))
    (NP
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (CD 17))
      (PP
        (NP (DT The) (NN sum)
          (CC and)
          (NN difference))
        (IN of)
        (NP
          (NP (CD two) (NNS numbers))
          (SBAR
            (S
              (VP (VBP are)
                (ADVP (RB respectively))
                (NP
                  (NP (CD 9))
                  (SBAR
                    (SBAR (IN If)
                      (S
                        (NP (CD 60) (NNS men))
                        (VP (VBP want)
                          (S
                            (VP (TO to)
                              (VP (VB complete)
                                (NP
                                  (NP (DT the) (JJ double))
                                  (PP (IN of)
                                    (NP
                                      (NP (DT the) (JJ above) (NN work))
                                      (PP (IN in)
                                        (NP (CD 8) (NNS days))))))))))))
                    (, ,)
                    (SBAR
                      (WHADJP (WRB how) (JJ many))
                      (S
                        (NP
                          (NP (NNS hours))
                          (PP (IN per)
                            (NP (NN day))))
                        (VP (VBZ is)
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (VP (VBN worked)
                                  (PP (IN by)
                                    (NP (DT each) (NN man))))))))))))))))))
    (. ?)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(29-1, b-3)',
                                                       'number(37-6, 23-5)',
                                                       'num(29-1, 37-6)',
                                                       'dep(17-10, d-8)',
                                                       'dep(29-1, 17-10)',
                                                       'det(sum-12, The-11)',
                                                       'npadvmod(17-10, sum-12)',
                                                       'npadvmod(17-10, difference-14)',
                                                       'conj_and(sum-12, difference-14)',
                                                       'num(numbers-17, two-16)',
                                                       'prep_of(17-10, numbers-17)',
                                                       'cop(9-20, are-18)',
                                                       'advmod(9-20, respectively-19)',
                                                       'rcmod(numbers-17, 9-20)',
                                                       'mark(want-24, If-21)',
                                                       'num(men-23, 60-22)',
                                                       'nsubj(want-24, men-23)',
                                                       'xsubj(complete-26, men-23)',
                                                       'dep(9-20, want-24)',
                                                       'aux(complete-26, to-25)',
                                                       'xcomp(want-24, complete-26)',
                                                       'det(double-28, the-27)',
                                                       'dobj(complete-26, double-28)',
                                                       'det(work-32, the-30)',
                                                       'amod(work-32, above-31)',
                                                       'prep_of(double-28, work-32)',
                                                       'num(days-35, 8-34)',
                                                       'prep_in(work-32, days-35)',
                                                       'advmod(many-38, how-37)',
                                                       'dep(is-42, many-38)',
                                                       'nsubj(is-42, hours-39)',
                                                       'xsubj(worked-45, hours-39)',
                                                       'prep_per(hours-39, day-41)',
                                                       'dep(want-24, is-42)',
                                                       'aux(worked-45, to-43)',
                                                       'auxpass(worked-45, be-44)',
                                                       'xcomp(is-42, worked-45)',
                                                       'det(man-48, each-47)',
                                                       'agent(worked-45, man-48)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 384))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 640)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 300)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 500) (CD 32)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (JJ square) (NN root))
        (PP (IN of)
          (NP
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 305))
                (PP
                  (NP (DT The) (VBN simplified) (NN value))
                  (PP (IN of)
                    (NP
                      (NP
                        (QP (CD 1\\.1) (CD +)))
                      (PRN (-LRB- -LRB-)
                        (NP (CD 1\\.1))
                        (-RRB- -RRB-))))))
              (NP
                (NP (CD 2) (NNS +))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1\\.1))
                  (-RRB- -RRB-))
                (SBAR
                  (S
                    (NP (CD 3))
                    (VP (VBZ is))))))
            (\\: \\:)
            (NP
              (NP (CD 3\\.431))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (SBAR
                (S
                  (NP
                    (NP
                      (QP (CD 3\\.641) (CD 3\\.111)))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP d))
                      (-RRB- -RRB-)))
                  (ADVP (RB 4\\.641))
                  (VP (VBP Find)
                    (NP
                      (NP (DT the) (JJS greatest) (JJ prime) (NN factor))
                      (PP (IN of)
                        (NP (CD 2431))))))))))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP
      (NP
        (NP (CD 29))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (QP (CD 23) (CD 37)))
    (NP
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (CD 17))
      (PP
        (NP (DT The) (NN sum)
          (CC and)
          (NN difference))
        (IN of)
        (NP
          (NP (CD two) (NNS numbers))
          (SBAR
            (S
              (VP (VBP are)
                (ADVP (RB respectively))
                (NP
                  (NP (CD 9))
                  (SBAR
                    (SBAR (IN If)
                      (S
                        (NP (CD 60) (NNS men))
                        (VP (VBP want)
                          (S
                            (VP (TO to)
                              (VP (VB complete)
                                (NP
                                  (NP (DT the) (JJ double))
                                  (PP (IN of)
                                    (NP
                                      (NP (DT the) (JJ above) (NN work))
                                      (PP (IN in)
                                        (NP (CD 8) (NNS days))))))))))))
                    (\\, \\,)
                    (SBAR
                      (WHADJP (WRB how) (JJ many))
                      (S
                        (NP
                          (NP (NNS hours))
                          (PP (IN per)
                            (NP (NN day))))
                        (VP (VBZ is)
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (VP (VBN worked)
                                  (PP (IN by)
                                    (NP (DT each) (NN man))))))))))))))))))
    (\\. ?)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 384))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 640)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 300)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 500) (CD 32)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP
      (NP
        (NP
          (NP (CD 384))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (VP (VBN 640)))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 300)
      (PRN (-LRB- -LRB-) (VB d) (-RRB- -RRB-))
      (NP (CD 500) (CD 32))))))
'
        };
Submitting expect

*** - STRING: argument 640 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [11]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 640 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [11]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (VP (VB Find)
      (NP
        (NP (DT the) (JJ square) (NN root))
        (PP (IN of)
          (NP
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 305))
                (PP
                  (NP (DT The) (VBN simplified) (NN value))
                  (PP (IN of)
                    (NP
                      (NP
                        (QP (CD 1\\.1) (CD +)))
                      (PRN (-LRB- -LRB-)
                        (NP (CD 1\\.1))
                        (-RRB- -RRB-))))))
              (NP
                (NP (CD 2) (NNS +))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1\\.1))
                  (-RRB- -RRB-))
                (SBAR
                  (S
                    (NP (CD 3))
                    (VP (VBZ is))))))
            (\\: \\:)
            (NP
              (NP (CD 3\\.431))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (SBAR
                (S
                  (NP
                    (NP
                      (QP (CD 3\\.641) (CD 3\\.111)))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP d))
                      (-RRB- -RRB-)))
                  (ADVP (RB 4\\.641))
                  (VP (VBP Find)
                    (NP
                      (NP (DT the) (JJS greatest) (JJ prime) (NN factor))
                      (PP (IN of)
                        (NP (CD 2431))))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (VP (VB Find)
      (NP
        (NP (DT the) (JJ square) (NN root))
        (PP (IN of)
          (NP
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 305))
                (PP
                  (NP (DT The) (VBN simplified) (NN value))
                  (PP (IN of)
                    (NP
                      (NP
                        (QP (CD 1\\.1) (CD +)))
                      (PRN (-LRB- -LRB-)
                        (NP (CD 1\\.1))
                        (-RRB- -RRB-))))))
              (NP
                (NP (CD 2) (NNS +))
                (PRN (-LRB- -LRB-)
                  (NP (CD 1\\.1))
                  (-RRB- -RRB-))
                (SBAR
                  (S
                    (NP (CD 3))
                    (VP (VBZ is))))))
            (\\: \\:)
            (NP
              (NP (CD 3\\.431))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (SBAR
                (S
                  (NP
                    (NP
                      (QP (CD 3\\.641) (CD 3\\.111)))
                    (PRN (-LRB- -LRB-)
                      (NP (NNP d))
                      (-RRB- -RRB-)))
                  (ADVP (RB 4\\.641))
                  (VP (VBP Find)
                    (NP
                      (NP (DT the) (JJS greatest) (JJ prime) (NN factor))
                      (PP (IN of)
                        (NP (CD 2431)))))))))))))))
'
        };
Submitting expect

(FIND THE SQUARE ROOT OF -LRB- D -RRB- 305 THE SIMPLIFIED VALUE OF 1.1 + -LRB- 1.1 -RRB- 2 + -LRB- 1.1 -RRB- 3 IS : 3.431 -LRB- B -RRB- 3.641 3.111
 -LRB- D -RRB- 4.641 FIND THE GREATEST PRIME FACTOR OF 2431)

 A ROOT CAN BE SQUARE.
 A VALUE CAN BE SIMPLIFIED.
 SOME NUMBER_OR_PORTION MAY BE.
 A FACTOR CAN BE GREATEST.
 A FACTOR CAN BE PRIME.

((:I (:Q DET ROOT.N) SQUARE.A) (:I (:Q DET VALUE.N) SIMPLIFIED.A) (:I (:Q SOME NUMBER-OR-PORTION.N) BE.V) NIL (:I (:Q DET FACTOR.N) GREATEST.A)
 (:I (:Q DET FACTOR.N) PRIME.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(FIND THE SQUARE ROOT OF -LRB- D -RRB- 305 THE SIMPLIFIED VALUE OF 1.1 + -LRB- 1.1 -RRB- 2 + -LRB- 1.1 -RRB- 3 IS : 3.431 -LRB- B -RRB- 3.641 3.111
 -LRB- D -RRB- 4.641 FIND THE GREATEST PRIME FACTOR OF 2431)

 A ROOT CAN BE SQUARE.
 A VALUE CAN BE SIMPLIFIED.
 SOME NUMBER_OR_PORTION MAY BE.
 A FACTOR CAN BE GREATEST.
 A FACTOR CAN BE PRIME.

((:I (:Q DET ROOT.N) SQUARE.A) (:I (:Q DET VALUE.N) SIMPLIFIED.A) (:I (:Q SOME NUMBER-OR-PORTION.N) BE.V) NIL (:I (:Q DET FACTOR.N) GREATEST.A)
 (:I (:Q DET FACTOR.N) PRIME.A))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (NP
        (NP (CD 29))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (QP (CD 23) (CD 37)))
    (NP
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (CD 17))
      (PP
        (NP (DT The) (NN sum)
          (CC and)
          (NN difference))
        (IN of)
        (NP
          (NP (CD two) (NNS numbers))
          (SBAR
            (S
              (VP (VBP are)
                (ADVP (RB respectively))
                (NP
                  (NP (CD 9))
                  (SBAR
                    (SBAR (IN If)
                      (S
                        (NP (CD 60) (NNS men))
                        (VP (VBP want)
                          (S
                            (VP (TO to)
                              (VP (VB complete)
                                (NP
                                  (NP (DT the) (JJ double))
                                  (PP (IN of)
                                    (NP
                                      (NP (DT the) (JJ above) (NN work))
                                      (PP (IN in)
                                        (NP (CD 8) (NNS days))))))))))))
                    (\\, \\,)
                    (SBAR
                      (WHADJP (WRB how) (JJ many))
                      (S
                        (NP
                          (NP (NNS hours))
                          (PP (IN per)
                            (NP (NN day))))
                        (VP (VBZ is)
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (VP (VBN worked)
                                  (PP (IN by)
                                    (NP (DT each) (NN man))))))))))))))))))
    (\\. ?)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (NP
        (NP (CD 29))
        (PRN (-LRB- -LRB-)
          (X (SYM b))
          (-RRB- -RRB-)))
      (QP (CD 23) (CD 37)))
    (NP
      (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
      (NP (CD 17))
      (PP
        (NP (DT The) (NN sum)
          (CC and)
          (NN difference))
        (IN of)
        (NP
          (NP (CD two) (NNS numbers))
          (SBAR
            (S
              (VP (VBP are)
                (ADVP (RB respectively))
                (NP
                  (NP (CD 9))
                  (SBAR
                    (SBAR (IN If)
                      (S
                        (NP (CD 60) (NNS men))
                        (VP (VBP want)
                          (S
                            (VP (TO to)
                              (VP (VB complete)
                                (NP
                                  (NP (DT the) (JJ double))
                                  (PP (IN of)
                                    (NP
                                      (NP (DT the) (JJ above) (NN work))
                                      (PP (IN in)
                                        (NP (CD 8) (NNS days))))))))))))
                    (\\, \\,)
                    (SBAR
                      (WHADJP (WRB how) (JJ many))
                      (S
                        (NP
                          (NP (NNS hours))
                          (PP (IN per)
                            (NP (NN day))))
                        (VP (VBZ is)
                          (S
                            (VP (TO to)
                              (VP (VB be)
                                (VP (VBN worked)
                                  (PP (IN by)
                                    (NP (DT each) (NN man))))))))))))))))))
    (\\. ?))))))
'
        };
Submitting expect

(29 -LRB- B -RRB- 23 37 -LRB- D -RRB- 17 THE SUM AND DIFFERENCE OF TWO NUMBERS ARE RESPECTIVELY 9 IF 60 MEN WANT TO COMPLETE THE DOUBLE OF THE
 ABOVE WORK IN 8 DAYS , HOW MANY HOURS PER DAY IS TO BE WORKED BY EACH MAN ?)

 WORK CAN BE IN SOME_NUMBER_OF DAYS.
 WORK CAN BE ABOVE.

(NIL (:I (:Q THE WORK.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))) (:I (:Q DET WORK.N) ABOVE.A))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(29 -LRB- B -RRB- 23 37 -LRB- D -RRB- 17 THE SUM AND DIFFERENCE OF TWO NUMBERS ARE RESPECTIVELY 9 IF 60 MEN WANT TO COMPLETE THE DOUBLE OF THE
 ABOVE WORK IN 8 DAYS , HOW MANY HOURS PER DAY IS TO BE WORKED BY EACH MAN ?)

 WORK CAN BE IN SOME_NUMBER_OF DAYS.
 WORK CAN BE ABOVE.

(NIL (:I (:Q THE WORK.N) IN.P (:Q SOME-NUMBER-OF (:F PLUR DAY.N))) (:I (:Q DET WORK.N) ABOVE.A))
______________________________________________________________________
[4]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) .5 (b) .05 (c) 1 6 5 : 80 (d) .25 33.',
                       'The value of 0.',
                       '12 % of Rs 180 is: (a) 18 paise (b) 22 paise (c) 24 paise (d) None of the above 34.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 22]: [-LRB-, a, -RRB-, .5, -LRB-, b, -RRB-, .05, -LRB-, c, -RRB-, 1, 6, 5, :, 80, -LRB-, d, -RRB-, .25, 33, .]
Parsing [sent. 2 len. 5]: [The, value, of, 0, .]
Parsing [sent. 3 len. 31]: [12, %, of, Rs, 180, is, :, -LRB-, a, -RRB-, 18, paise, -LRB-, b, -RRB-, 22, paise, -LRB-, c, -RRB-, 24, paise, -LRB-, d, -RRB-, None, of, the, above, 34, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 58 words in 3 sentences (17.39 wds/sec; 0.90 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB .5)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD .05))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (QP (CD 1) (CD 6)))
            (NP (CD 5) (: :) (CD 80)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD .25) (CD 33)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dep(.05-8, b-6)',
                                                       'dep(.5-4, .05-8)',
                                                       'dep(.05-8, c-10)',
                                                       'number(6-13, 1-12)',
                                                       'num(.05-8, 6-13)',
                                                       'num(80-16, 5-14)',
                                                       'dep(.05-8, 80-16)',
                                                       'dep(.05-8, d-18)',
                                                       'num(33-21, .25-20)',
                                                       'dep(.05-8, 33-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (DT The) (NN value))
    (PP (IN of)
      (NP (CD 0)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(value-2, The-1)',
                                                       'prep_of(value-2, 0-4)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (CD 12) (NN %))
      (PP (IN of)
        (NP (NNP Rs) (CD 180))))
    (VP (VBZ is)
      (S (: :)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 18))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 22))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
          (NP (CD 24))
          (VP (VBP paise)
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the))))
              (PP (IN above)
                (NP (CD 34))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(%-2, 12-1)',
                                                       'nsubj(is-6, %-2)',
                                                       'prep_of(%-2, Rs-4)',
                                                       'num(Rs-4, 180-5)',
                                                       'dep(-RRB--10, a-9)',
                                                       'nsubj(paise-12, 18-11)',
                                                       'dep(is-6, paise-12)',
                                                       'dep(-RRB--15, b-14)',
                                                       'nsubj(paise-17, 22-16)',
                                                       'dep(paise-12, paise-17)',
                                                       'dep(-RRB--20, c-19)',
                                                       'nsubj(paise-22, 24-21)',
                                                       'dep(paise-12, paise-22)',
                                                       'dep(None-26, d-24)',
                                                       'dobj(paise-22, None-26)',
                                                       'prep_of(None-26, the-28)',
                                                       'prep_above(None-26, 34-30)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB \\.5)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD \\.05))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (QP (CD 1) (CD 6)))
            (NP (CD 5) (\\: \\:) (CD 80)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD \\.25) (CD 33)))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (DT The) (NN value))
    (PP (IN of)
      (NP (CD 0)))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (CD 12) (NN %))
      (PP (IN of)
        (NP (NNP Rs) (CD 180))))
    (VP (VBZ is)
      (S (\\: \\:)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 18))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 22))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
          (NP (CD 24))
          (VP (VBP paise)
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the))))
              (PP (IN above)
                (NP (CD 34))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB \\.5)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD \\.05))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (QP (CD 1) (CD 6)))
            (NP (CD 5) (\\: \\:) (CD 80)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD \\.25) (CD 33)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (VP (VB \\.5)
      (S (-LRB- -LRB-)
        (NP (SYM b))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD \\.05))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (QP (CD 1) (CD 6)))
            (NP (CD 5) (\\: \\:) (CD 80)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD \\.25) (CD 33))))))))
'
        };
Submitting expect

(-LRB- A -RRB- .5 -LRB- B -RRB- .05 -LRB- C -RRB- 1 6 5 : 80 -LRB- D -RRB- .25 33)


NIL
______________________________________________________________________
[5]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (DT The) (NN value))
    (PP (IN of)
      (NP (CD 0)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (DT The) (NN value))
    (PP (IN of)
      (NP (CD 0))))))
'
        };
Submitting expect

(THE VALUE OF 0)


(NIL)
______________________________________________________________________
[6]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (CD 12) (NN %))
      (PP (IN of)
        (NP (NNP Rs) (CD 180))))
    (VP (VBZ is)
      (S (\\: \\:)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 18))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 22))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
          (NP (CD 24))
          (VP (VBP paise)
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the))))
              (PP (IN above)
                (NP (CD 34))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (CD 12) (NN %))
      (PP (IN of)
        (NP (NNP Rs) (CD 180))))
    (VP (VBZ is)
      (S (\\: \\:)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 18))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 22))
          (VP (VBP paise)))
        (S
          (LST (-LRB- -LRB-) (NN c) (-RRB- -RRB-))
          (NP (CD 24))
          (VP (VBP paise)
            (NP
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the))))
              (PP (IN above)
                (NP (CD 34)))))))))))
'
        };
Submitting expect

(12 % OF RS 180 IS : -LRB- A -RRB- 18 PAISE -LRB- B -RRB- 22 PAISE -LRB- C -RRB- 24 PAISE -LRB- D -RRB- NONE OF THE ABOVE 34)

 SOME NUMBER_OR_PORTION MAY PAISE.

(NIL (:I (:Q SOME NUMBER-OR-PORTION.N) PAISE.V) (:I NIL ABOVE.P (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(12 % OF RS 180 IS : -LRB- A -RRB- 18 PAISE -LRB- B -RRB- 22 PAISE -LRB- C -RRB- 24 PAISE -LRB- D -RRB- NONE OF THE ABOVE 34)

 SOME NUMBER_OR_PORTION MAY PAISE.

(NIL (:I (:Q SOME NUMBER-OR-PORTION.N) PAISE.V) (:I NIL ABOVE.P (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[7]>'
        };
$VAR1 = {
          'Batch' => [
                       'The ratio of the purchase price and selling price is 4 : 5.',
                       'The net profit is: (a) 20% (b) 5% (c) 25% (d) None of these 35.',
                       'The volume is increased by 10% when water is freezed to ice.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 14]: [The, ratio, of, the, purchase, price, and, selling, price, is, 4, :, 5, .]
Parsing [sent. 2 len. 28]: [The, net, profit, is, :, -LRB-, a, -RRB-, 20, %, -LRB-, b, -RRB-, 5, %, -LRB-, c, -RRB-, 25, %, -LRB-, d, -RRB-, None, of, these, 35, .]
Parsing [sent. 3 len. 14]: [The, volume, is, increased, by, 10, %, when, water, is, freezed, to, ice, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 56 words in 3 sentences (17.86 wds/sec; 0.96 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP (DT the) (NN purchase) (NN price)
          (CC and)
          (NN selling) (NN price))))
    (VP (VBZ is)
      (NP
        (NP (CD 4))
        (: :)
        (NP (CD 5))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(ratio-2, The-1)',
                                                       'nsubj(4-11, ratio-2)',
                                                       'det(price-6, the-4)',
                                                       'nn(price-6, purchase-5)',
                                                       'prep_of(ratio-2, price-6)',
                                                       'nn(price-9, selling-8)',
                                                       'prep_of(ratio-2, price-9)',
                                                       'conj_and(price-6, price-9)',
                                                       'cop(4-11, is-10)',
                                                       'dep(4-11, 5-13)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT The) (JJ net) (NN profit))
    (VP (VBZ is) (: :)
      (NP
        (NP
          (NP
            (NP
              (NP
                (NP
                  (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
                  (ADJP (CD 20) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (ADJP (CD 5) (NN %)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (ADJP (CD 25) (NN %)))
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (NN None))
          (PP (IN of)
            (NP (DT these) (CD 35))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(profit-3, The-1)',
                                                       'amod(profit-3, net-2)',
                                                       'nsubj(a-7, profit-3)',
                                                       'cop(a-7, is-4)',
                                                       'number(%-10, 20-9)',
                                                       'amod(a-7, %-10)',
                                                       'dep(a-7, b-12)',
                                                       'number(%-15, 5-14)',
                                                       'amod(a-7, %-15)',
                                                       'dep(a-7, c-17)',
                                                       'number(%-20, 25-19)',
                                                       'amod(a-7, %-20)',
                                                       'dep(None-24, d-22)',
                                                       'dep(a-7, None-24)',
                                                       'det(35-27, these-26)',
                                                       'prep_of(None-24, 35-27)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT The) (NN volume))
    (VP (VBZ is)
      (VP (VBN increased)
        (PP (IN by)
          (NP
            (NP (CD 10) (NN %))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN water))
                (VP (VBZ is)
                  (VP (VBN freezed)
                    (PP (TO to)
                      (NP (NN ice)))))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(volume-2, The-1)',
                                                       'nsubjpass(increased-4, volume-2)',
                                                       'auxpass(increased-4, is-3)',
                                                       'num(%-7, 10-6)',
                                                       'agent(increased-4, %-7)',
                                                       'tmod(freezed-11, %-7)',
                                                       'advmod(freezed-11, when-8)',
                                                       'nsubjpass(freezed-11, water-9)',
                                                       'auxpass(freezed-11, is-10)',
                                                       'dep(%-7, freezed-11)',
                                                       'prep_to(freezed-11, ice-13)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP (DT the) (NN purchase) (NN price)
          (CC and)
          (NN selling) (NN price))))
    (VP (VBZ is)
      (NP
        (NP (CD 4))
        (\\: \\:)
        (NP (CD 5))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (DT The) (JJ net) (NN profit))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP
              (NP
                (NP
                  (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
                  (ADJP (CD 20) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (ADJP (CD 5) (NN %)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (ADJP (CD 25) (NN %)))
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (NN None))
          (PP (IN of)
            (NP (DT these) (CD 35))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (DT The) (NN volume))
    (VP (VBZ is)
      (VP (VBN increased)
        (PP (IN by)
          (NP
            (NP (CD 10) (NN %))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN water))
                (VP (VBZ is)
                  (VP (VBN freezed)
                    (PP (TO to)
                      (NP (NN ice)))))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP (DT the) (NN purchase) (NN price)
          (CC and)
          (NN selling) (NN price))))
    (VP (VBZ is)
      (NP
        (NP (CD 4))
        (\\: \\:)
        (NP (CD 5))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (NN ratio))
      (PP (IN of)
        (NP (DT the) (NN purchase) (NN price)
          (CC and)
          (NN selling) (NN price))))
    (VP (VBZ is)
      (NP
        (NP (CD 4))
        (\\: \\:)
        (NP (CD 5)))))))
'
        };
Submitting expect

(THE RATIO OF THE PURCHASE PRICE AND SELLING PRICE IS 4 : 5)

 A RATIO OF A PURCHASE PRICE CAN BE A NUMBER_OR_PORTION.
 A PURCHASE PRICE MAY HAVE A RATIO.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:Q THE (:F NN PURCHASE.N PRICE.N)))) NUMBER-OR-PORTION.N)
 (:I (:Q DET (:F NN PURCHASE.N PRICE.N)) HAVE.V (:Q DET RATIO.N)))
______________________________________________________________________
[8]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE RATIO OF THE PURCHASE PRICE AND SELLING PRICE IS 4 : 5)

 A RATIO OF A PURCHASE PRICE CAN BE A NUMBER_OR_PORTION.
 A PURCHASE PRICE MAY HAVE A RATIO.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:Q THE (:F NN PURCHASE.N PRICE.N)))) NUMBER-OR-PORTION.N)
 (:I (:Q DET (:F NN PURCHASE.N PRICE.N)) HAVE.V (:Q DET RATIO.N)))
______________________________________________________________________
[8]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT The) (JJ net) (NN profit))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP
              (NP
                (NP
                  (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
                  (ADJP (CD 20) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (ADJP (CD 5) (NN %)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (ADJP (CD 25) (NN %)))
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (NN None))
          (PP (IN of)
            (NP (DT these) (CD 35))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT The) (JJ net) (NN profit))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP
              (NP
                (NP
                  (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
                  (ADJP (CD 20) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (ADJP (CD 5) (NN %)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (ADJP (CD 25) (NN %)))
        (NP
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (NN None))
          (PP (IN of)
            (NP (DT these) (CD 35)))))))))
'
        };
Submitting expect

(THE NET PROFIT IS : -LRB- A -RRB- 20 % -LRB- B -RRB- 5 % -LRB- C -RRB- 25 % -LRB- D -RRB- NONE OF THESE 35)

 A PROFIT CAN BE NET.

((:I (:Q DET PROFIT.N) NET.A))
______________________________________________________________________
[9]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE NET PROFIT IS : -LRB- A -RRB- 20 % -LRB- B -RRB- 5 % -LRB- C -RRB- 25 % -LRB- D -RRB- NONE OF THESE 35)

 A PROFIT CAN BE NET.

((:I (:Q DET PROFIT.N) NET.A))
______________________________________________________________________
[9]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT The) (NN volume))
    (VP (VBZ is)
      (VP (VBN increased)
        (PP (IN by)
          (NP
            (NP (CD 10) (NN %))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN water))
                (VP (VBZ is)
                  (VP (VBN freezed)
                    (PP (TO to)
                      (NP (NN ice)))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT The) (NN volume))
    (VP (VBZ is)
      (VP (VBN increased)
        (PP (IN by)
          (NP
            (NP (CD 10) (NN %))
            (SBAR
              (WHADVP (WRB when))
              (S
                (NP (NN water))
                (VP (VBZ is)
                  (VP (VBN freezed)
                    (PP (TO to)
                      (NP (NN ice))))))))))))))
'
        };
Submitting expect

(THE VOLUME IS INCREASED BY 10 % WHEN WATER IS FREEZED TO ICE)

 A VOLUME MAY BE INCREASE -ED BY SOME_NUMBER_OF %.
 WATER MAY BE FREEZE -ED TO ICE.

((:I (:Q THE VOLUME.N) (:F BE.PASV INCREASE.V) (:P BY.P (:Q SOME-NUMBER-OF %.N))) (:I (:F K WATER.N) (:F BE.PASV FREEZE.V) (:P TO.P (:F K ICE.N))))
______________________________________________________________________
[10]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE VOLUME IS INCREASED BY 10 % WHEN WATER IS FREEZED TO ICE)

 A VOLUME MAY BE INCREASE -ED BY SOME_NUMBER_OF %.
 WATER MAY BE FREEZE -ED TO ICE.

((:I (:Q THE VOLUME.N) (:F BE.PASV INCREASE.V) (:P BY.P (:Q SOME-NUMBER-OF %.N))) (:I (:F K WATER.N) (:F BE.PASV FREEZE.V) (:P TO.P (:F K ICE.N))))
______________________________________________________________________
[10]>'
        };
$VAR1 = {
          'Batch' => [
                       'If ice is melted, then its volume is decreased by: (a) 9 1 % 11 (b) 10% (c) 9 10 % 11 (d) 11% 435 s DECEMBER 2001 s THE COMPETITION MASTER OBJECTIVE-TYPE QUESTIONS 36.',
                       '(a) (c) 37.',
                       'The greatest prime number of two digit is: 89 (b) 97 99 (d) 10 The greatest of the numbers 0.16, 0.16 , (0.16)2 and 0.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.9 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 48]: [If, ice, is, melted, ,, then, its, volume, is, decreased, by, :, -LRB-, a, -RRB-, 9, 1, %, 11, -LRB-, b, -RRB-, 10, %, -LRB-, c, -RRB-, 9, 10, %, 11, -LRB-, d, -RRB-, 11, %, 435, s, DECEMBER, 2001, s, THE, COMPETITION, MASTER, OBJECTIVE-TYPE, QUESTIONS, 36, .]
Parsing [sent. 2 len. 8]: [-LRB-, a, -RRB-, -LRB-, c, -RRB-, 37, .]
Parsing [sent. 3 len. 35]: [The, greatest, prime, number, of, two, digit, is, :, 89, -LRB-, b, -RRB-, 97, 99, -LRB-, d, -RRB-, 10, The, greatest, of, the, numbers, 0.16, ,, 0.16, ,, -LRB-, 0.16, -RRB-, 2, and, 0, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 91 words in 3 sentences (12.75 wds/sec; 0.42 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (SBAR (IN If)
        (S
          (NP (NN ice))
          (VP (VBZ is)
            (VP (VBN melted)))))
      (, ,)
      (ADVP (RB then))
      (NP (PRP$ its) (NN volume))
      (VP (VBZ is)
        (VP (VBN decreased)
          (PP (IN by)))))
    (: :)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 9) (CD 1) (NN %))
          (PP
            (NP
              (NP
                (NP
                  (NP
                    (NP (CD 11))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-)))
                  (ADJP (CD 10) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (ADJP (CD 9) (CD 10) (NN %)))
            (NP
              (NP (CD 11))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 11) (NN %))
                (PP (VBG 435)
                  (NP (PRP s)))))))
        (NP (NNP DECEMBER) (CD 2001)))
      (VP (VBZ s)
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
          (SBAR
            (S
              (VP (VBZ QUESTIONS)
                (NP (CD 36))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(melted-4, If-1)',
                                                       'nsubjpass(melted-4, ice-2)',
                                                       'auxpass(melted-4, is-3)',
                                                       'advcl(decreased-10, melted-4)',
                                                       'advmod(decreased-10, then-6)',
                                                       'poss(volume-8, its-7)',
                                                       'nsubjpass(decreased-10, volume-8)',
                                                       'auxpass(decreased-10, is-9)',
                                                       'prep(decreased-10, by-11)',
                                                       'dep(-RRB--15, a-14)',
                                                       'num(%-18, 9-16)',
                                                       'num(%-18, 1-17)',
                                                       'nsubj(OBJECTIVE-TYPE-45, %-18)',
                                                       'prep(%-18, 11-19)',
                                                       'dep(11-19, b-21)',
                                                       'number(%-24, 10-23)',
                                                       'amod(11-19, %-24)',
                                                       'dep(11-19, c-26)',
                                                       'number(%-30, 9-28)',
                                                       'number(%-30, 10-29)',
                                                       'amod(11-19, %-30)',
                                                       'dep(11-19, 11-31)',
                                                       'dep(%-36, d-33)',
                                                       'num(%-36, 11-35)',
                                                       'dep(11-31, %-36)',
                                                       'prep_435(%-36, s-38)',
                                                       'dep(%-18, DECEMBER-39)',
                                                       'num(DECEMBER-39, 2001-40)',
                                                       'cop(OBJECTIVE-TYPE-45, s-41)',
                                                       'det(OBJECTIVE-TYPE-45, THE-42)',
                                                       'nn(OBJECTIVE-TYPE-45, COMPETITION-43)',
                                                       'nn(OBJECTIVE-TYPE-45, MASTER-44)',
                                                       'parataxis(decreased-10, OBJECTIVE-TYPE-45)',
                                                       'rcmod(OBJECTIVE-TYPE-45, QUESTIONS-46)',
                                                       'dobj(QUESTIONS-46, 36-47)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 37))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(37-7, a-2)',
                                                       'dep(a-2, c-5)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT The) (JJS greatest) (JJ prime) (NN number))
      (PP (IN of)
        (NP (CD two) (NN digit))))
    (VP (VBZ is) (: :)
      (NP
        (NP
          (NP
            (NP (CD 89))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (QP (CD 97) (CD 99)))
        (NP
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (CD 10))
            (PP
              (NP (DT The) (JJS greatest))
              (IN of)
              (NP
                (NP
                  (NP (DT the) (NNS numbers) (NN 0.16))
                  (, ,)
                  (NP (CD 0.16))
                  (, ,))
                (PRN (-LRB- -LRB-)
                  (NP (CD 0.16))
                  (-RRB- -RRB-)))))
          (NP (CD 2)
            (CC and)
            (CD 0)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(number-4, The-1)',
                                                       'amod(number-4, greatest-2)',
                                                       'amod(number-4, prime-3)',
                                                       'nsubj(89-10, number-4)',
                                                       'num(digit-7, two-6)',
                                                       'prep_of(number-4, digit-7)',
                                                       'cop(89-10, is-8)',
                                                       'dep(89-10, b-12)',
                                                       'number(99-15, 97-14)',
                                                       'num(89-10, 99-15)',
                                                       'dep(10-19, d-17)',
                                                       'dep(89-10, 10-19)',
                                                       'det(greatest-21, The-20)',
                                                       'npadvmod(10-19, greatest-21)',
                                                       'det(0.16-25, the-23)',
                                                       'nn(0.16-25, numbers-24)',
                                                       'prep_of(10-19, 0.16-25)',
                                                       'appos(0.16-25, 0.16-27)',
                                                       'appos(0.16-25, 0.16-30)',
                                                       'dep(10-19, 2-32)',
                                                       'dep(10-19, 0-34)',
                                                       'conj_and(2-32, 0-34)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (S
      (SBAR (IN If)
        (S
          (NP (NN ice))
          (VP (VBZ is)
            (VP (VBN melted)))))
      (\\, \\,)
      (ADVP (RB then))
      (NP (PRP$ its) (NN volume))
      (VP (VBZ is)
        (VP (VBN decreased)
          (PP (IN by)))))
    (\\: \\:)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 9) (CD 1) (NN %))
          (PP
            (NP
              (NP
                (NP
                  (NP
                    (NP (CD 11))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-)))
                  (ADJP (CD 10) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (ADJP (CD 9) (CD 10) (NN %)))
            (NP
              (NP (CD 11))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 11) (NN %))
                (PP (VBG 435)
                  (NP (PRP s)))))))
        (NP (NNP DECEMBER) (CD 2001)))
      (VP (VBZ s)
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
          (SBAR
            (S
              (VP (VBZ QUESTIONS)
                (NP (CD 36))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 37))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (JJS greatest) (JJ prime) (NN number))
      (PP (IN of)
        (NP (CD two) (NN digit))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP (CD 89))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (QP (CD 97) (CD 99)))
        (NP
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (CD 10))
            (PP
              (NP (DT The) (JJS greatest))
              (IN of)
              (NP
                (NP
                  (NP (DT the) (NNS numbers) (NN 0\\.16))
                  (\\, \\,)
                  (NP (CD 0\\.16))
                  (\\, \\,))
                (PRN (-LRB- -LRB-)
                  (NP (CD 0\\.16))
                  (-RRB- -RRB-)))))
          (NP (CD 2)
            (CC and)
            (CD 0)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (SBAR (IN If)
        (S
          (NP (NN ice))
          (VP (VBZ is)
            (VP (VBN melted)))))
      (\\, \\,)
      (ADVP (RB then))
      (NP (PRP$ its) (NN volume))
      (VP (VBZ is)
        (VP (VBN decreased)
          (PP (IN by)))))
    (\\: \\:)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 9) (CD 1) (NN %))
          (PP
            (NP
              (NP
                (NP
                  (NP
                    (NP (CD 11))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-)))
                  (ADJP (CD 10) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (ADJP (CD 9) (CD 10) (NN %)))
            (NP
              (NP (CD 11))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 11) (NN %))
                (PP (VBG 435)
                  (NP (PRP s)))))))
        (NP (NNP DECEMBER) (CD 2001)))
      (VP (VBZ s)
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
          (SBAR
            (S
              (VP (VBZ QUESTIONS)
                (NP (CD 36))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (SBAR (IN If)
        (S
          (NP (NN ice))
          (VP (VBZ is)
            (VP (VBN melted)))))
      (\\, \\,)
      (ADVP (RB then))
      (NP (PRP$ its) (NN volume))
      (VP (VBZ is)
        (VP (VBN decreased)
          (PP (IN by)))))
    (\\: \\:)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 9) (CD 1) (NN %))
          (PP
            (NP
              (NP
                (NP
                  (NP
                    (NP (CD 11))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-)))
                  (ADJP (CD 10) (NN %)))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (ADJP (CD 9) (CD 10) (NN %)))
            (NP
              (NP (CD 11))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (CD 11) (NN %))
                (PP (VBG 435)
                  (NP (PRP s)))))))
        (NP (NNP DECEMBER) (CD 2001)))
      (VP (VBZ s)
        (NP
          (NP (DT THE) (NNP COMPETITION) (NNP MASTER) (NN OBJECTIVE-TYPE))
          (SBAR
            (S
              (VP (VBZ QUESTIONS)
                (NP (CD 36)))))))))))
'
        };
Submitting expect

*** - STRING: argument 435 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [11]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 435 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [11]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 37))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBZ 37)))))
'
        };
Submitting expect

*** - STRING: argument 37 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - STRING: argument 37 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (JJS greatest) (JJ prime) (NN number))
      (PP (IN of)
        (NP (CD two) (NN digit))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP (CD 89))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (QP (CD 97) (CD 99)))
        (NP
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (CD 10))
            (PP
              (NP (DT The) (JJS greatest))
              (IN of)
              (NP
                (NP
                  (NP (DT the) (NNS numbers) (NN 0\\.16))
                  (\\, \\,)
                  (NP (CD 0\\.16))
                  (\\, \\,))
                (PRN (-LRB- -LRB-)
                  (NP (CD 0\\.16))
                  (-RRB- -RRB-)))))
          (NP (CD 2)
            (CC and)
            (CD 0)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (JJS greatest) (JJ prime) (NN number))
      (PP (IN of)
        (NP (CD two) (NN digit))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP (CD 89))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-)))
          (QP (CD 97) (CD 99)))
        (NP
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (CD 10))
            (PP
              (NP (DT The) (JJS greatest))
              (IN of)
              (NP
                (NP
                  (NP (DT the) (NNS numbers) (NN 0\\.16))
                  (\\, \\,)
                  (NP (CD 0\\.16))
                  (\\, \\,))
                (PRN (-LRB- -LRB-)
                  (NP (CD 0\\.16))
                  (-RRB- -RRB-)))))
          (NP (CD 2)
            (CC and)
            (CD 0))))))))
'
        };
Submitting expect

(THE GREATEST PRIME NUMBER OF TWO DIGIT IS : 89 -LRB- B -RRB- 97 99 -LRB- D -RRB- 10 THE GREATEST OF THE NUMBERS 0.16 , 0.16 , -LRB- 0.16 -RRB- 2
 AND 0)

 A NUMBER CAN BE GREATEST.
 A NUMBER CAN BE PRIME.

(NIL (:I (:Q DET NUMBER.N) GREATEST.A) (:I (:Q DET NUMBER.N) PRIME.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(THE GREATEST PRIME NUMBER OF TWO DIGIT IS : 89 -LRB- B -RRB- 97 99 -LRB- D -RRB- 10 THE GREATEST OF THE NUMBERS 0.16 , 0.16 , -LRB- 0.16 -RRB- 2
 AND 0)

 A NUMBER CAN BE GREATEST.
 A NUMBER CAN BE PRIME.

(NIL (:I (:Q DET NUMBER.N) GREATEST.A) (:I (:Q DET NUMBER.N) PRIME.A))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       '16 is: (a) 0.16 (b) (c) (0.16)2 (d) 0.',
                       '16 0.16 . . 1 38.',
                       'If A : B = 2 : 3, B : C = 5 : 4 and C : D = 7 : 8, then A : D is: (a) 35 : 48 (b) 48 : 35 (c) 7 : 8 (d) 8 : 7 39.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 22]: [16, is, :, -LRB-, a, -RRB-, 0.16, -LRB-, b, -RRB-, -LRB-, c, -RRB-, -LRB-, 0.16, -RRB-, 2, -LRB-, d, -RRB-, 0, .]
Parsing [sent. 2 len. 4]: [16, 0.16, ., .]
Parsing [sent. 3 len. 3]: [1, 38, .]
Parsing [sent. 4 len. 57]: [If, A, :, B, =, 2, :, 3, ,, B, :, C, =, 5, :, 4, and, C, :, D, =, 7, :, 8, ,, then, A, :, D, is, :, -LRB-, a, -RRB-, 35, :, 48, -LRB-, b, -RRB-, 48, :, 35, -LRB-, c, -RRB-, 7, :, 8, -LRB-, d, -RRB-, 8, :, 7, 39, .]
Parsed file: /tmp/stanfordparser.txt [4 sentences].
Parsed 86 words in 4 sentences (5.54 wds/sec; 0.26 sents/sec).
$VAR1 = {
          'Tree' => '((S
    (NP (CD 16))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP
              (NP
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NNS 0\\.16))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (PRN (-LRB- -LRB-)
            (NP (CD 0\\.16))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (NP (CD 0)))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (CD 16))
    (NP (NNP 0\\.16)))'
        };
$VAR1 = {
          'Tree' => '((FRAG
    (NP (CD 1) (CD 38))))'
        };
$VAR1 = {
          'Tree' => '((S
    (FRAG (IN If)
      (NP
        (NP (NNP A))
        (\\: \\:)
        (NP
          (NP
            (NP (NNP B))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2))))))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (\\, \\,)
            (NP (NNP B)))
          (\\: \\:)
          (NP
            (NP (NNP C))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 5))))))
          (\\: \\:)
          (NP
            (NP (CD 4))
            (CC and)
            (NP (NNP C)))
          (\\: \\:)
          (NP
            (NP (NNP D))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 7))))))
          (\\: \\:)
          (NP
            (NP (CD 8))
            (\\, \\,)
            (NP (RB then) (DT A))))))
    (\\: \\:)
    (S
      (NP (NNP D))
      (VP (VBZ is) (\\: \\:)
        (NP
          (NP
            (NP
              (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
              (NP (CD 35)))
            (\\: \\:)
            (NP
              (NP (CD 48))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 48)))
            (\\: \\:)
            (NP
              (NP (CD 35))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 7)))
            (\\: \\:)
            (NP
              (NP (CD 8))
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NP (CD 8))))
          (\\: \\:)
          (NP (CD 7) (CD 39)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 16))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP
              (NP
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NNS 0\\.16))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (PRN (-LRB- -LRB-)
            (NP (CD 0\\.16))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (NP (CD 0)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 16))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (NP
              (NP
                (PRN (-LRB- -LRB-)
                  (X (SYM a))
                  (-RRB- -RRB-))
                (NNS 0\\.16))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (PRN (-LRB- -LRB-)
            (NP (CD 0\\.16))
            (-RRB- -RRB-)))
        (NP
          (NP (CD 2))
          (PRN (-LRB- -LRB-)
            (NP (NNP d))
            (-RRB- -RRB-))
          (NP (CD 0))))))))
'
        };
Submitting expect

(16 IS : -LRB- A -RRB- 0.16 -LRB- B -RRB- -LRB- C -RRB- -LRB- 0.16 -RRB- 2 -LRB- D -RRB- 0)


NIL
______________________________________________________________________
[4]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (CD 16))
    (NP (NNP 0\\.16)))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (CD 16))
    (NP (NNP 0\\.16))))
'
        };
Submitting expect
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((FRAG
    (NP (CD 1) (CD 38))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((FRAG
    (NP (CD 1) (CD 38)))))
'
        };
Submitting expect

(1 38)


NIL
______________________________________________________________________
[3]> Got result
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (FRAG (IN If)
      (NP
        (NP (NNP A))
        (\\: \\:)
        (NP
          (NP
            (NP (NNP B))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2))))))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (\\, \\,)
            (NP (NNP B)))
          (\\: \\:)
          (NP
            (NP (NNP C))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 5))))))
          (\\: \\:)
          (NP
            (NP (CD 4))
            (CC and)
            (NP (NNP C)))
          (\\: \\:)
          (NP
            (NP (NNP D))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 7))))))
          (\\: \\:)
          (NP
            (NP (CD 8))
            (\\, \\,)
            (NP (RB then) (DT A))))))
    (\\: \\:)
    (S
      (NP (NNP D))
      (VP (VBZ is) (\\: \\:)
        (NP
          (NP
            (NP
              (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
              (NP (CD 35)))
            (\\: \\:)
            (NP
              (NP (CD 48))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 48)))
            (\\: \\:)
            (NP
              (NP (CD 35))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 7)))
            (\\: \\:)
            (NP
              (NP (CD 8))
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NP (CD 8))))
          (\\: \\:)
          (NP (CD 7) (CD 39)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (FRAG (IN If)
      (NP
        (NP (NNP A))
        (\\: \\:)
        (NP
          (NP
            (NP (NNP B))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 2))))))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (\\, \\,)
            (NP (NNP B)))
          (\\: \\:)
          (NP
            (NP (NNP C))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 5))))))
          (\\: \\:)
          (NP
            (NP (CD 4))
            (CC and)
            (NP (NNP C)))
          (\\: \\:)
          (NP
            (NP (NNP D))
            (SBAR
              (S
                (VP (SYM =)
                  (NP (CD 7))))))
          (\\: \\:)
          (NP
            (NP (CD 8))
            (\\, \\,)
            (NP (RB then) (DT A))))))
    (\\: \\:)
    (S
      (NP (NNP D))
      (VP (VBZ is) (\\: \\:)
        (NP
          (NP
            (NP
              (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
              (NP (CD 35)))
            (\\: \\:)
            (NP
              (NP (CD 48))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NP (CD 48)))
            (\\: \\:)
            (NP
              (NP (CD 35))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 7)))
            (\\: \\:)
            (NP
              (NP (CD 8))
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NP (CD 8))))
          (\\: \\:)
          (NP (CD 7) (CD 39))))))))
'
        };
Submitting expect

(IF A : B = 2 : 3 , B : C = 5 : 4 AND C : D = 7 : 8 , THEN A : D IS : -LRB- A -RRB- 35 : 48 -LRB- B -RRB- 48 : 35 -LRB- C -RRB- 7 : 8 -LRB- D -RRB-
 8 : 7 39)


NIL
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'Batch' => [
                       'The simplest value of 2+ 3 2− 3 + is: 2− 3 2+ 3 (a) 7 (b) 1 (c) 10 (d) 14 1 40.',
                       '30% of A = .25 of B = th of C, then A : B : C is: 5 (a) 3 : 6 : 5 (b) 6 : 3 : 5 (c) 3 : 5 : 6 (d) none of the above 41.',
                       'A man joined in his service at the age of 24 years and died during his service period.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 38]: [The, simplest, value, of, 2, +, 3, 2, −, 3, +, is, :, 2, −, 3, 2, +, 3, -LRB-, a, -RRB-, 7, -LRB-, b, -RRB-, 1, -LRB-, c, -RRB-, 10, -LRB-, d, -RRB-, 14, 1, 40, .]
Parsing [sent. 2 len. 55]: [30, %, of, A, =, .25, of, B, =, th, of, C, ,, then, A, :, B, :, C, is, :, 5, -LRB-, a, -RRB-, 3, :, 6, :, 5, -LRB-, b, -RRB-, 6, :, 3, :, 5, -LRB-, c, -RRB-, 3, :, 5, :, 6, -LRB-, d, -RRB-, none, of, the, above, 41, .]
Parsing [sent. 3 len. 19]: [A, man, joined, in, his, service, at, the, age, of, 24, years, and, died, during, his, service, period, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 112 words in 3 sentences (11.45 wds/sec; 0.31 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT The) (JJS simplest) (NN value))
      (PP (IN of)
        (NP
          (QP (CD 2) (CD +))
          (QP (CD 3) (CD 2)))))
    (VP (VBD −)
      (SBAR
        (S
          (NP (CD 3) (NNS +))
          (VP
            (VP (VBZ is))
            (: :)
            (NP
              (NP
                (NP
                  (NP (CD 2) (NNS −))
                  (NP
                    (NP
                      (NP
                        (QP (CD 3) (CD 2))
                        (QP (CD +) (CD 3)))
                      (PRN (-LRB- -LRB-)
                        (X (SYM a))
                        (-RRB- -RRB-))
                      (NP (CD 7)))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-))))
                (NP
                  (NP (CD 1))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 10))))
              (PRN (-LRB- -LRB-)
                (VP (VBN d))
                (-RRB- -RRB-))
              (NP
                (NP
                  (QP (CD 14) (CD 1)))
                (NP (CD 40))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(value-3, The-1)',
                                                       'amod(value-3, simplest-2)',
                                                       'nsubj(−-9, value-3)',
                                                       'number(+-6, 2-5)',
                                                       'num(2-8, +-6)',
                                                       'number(2-8, 3-7)',
                                                       'prep_of(value-3, 2-8)',
                                                       'num(+-11, 3-10)',
                                                       'nsubj(is-12, +-11)',
                                                       'ccomp(−-9, is-12)',
                                                       'num(−-15, 2-14)',
                                                       'dobj(is-12, −-15)',
                                                       'iobj(is-12, −-15)',
                                                       'number(2-17, 3-16)',
                                                       'num(3-19, 2-17)',
                                                       'number(3-19, +-18)',
                                                       'dep(−-15, 3-19)',
                                                       'dep(3-19, a-21)',
                                                       'dep(3-19, 7-23)',
                                                       'dep(3-19, b-25)',
                                                       'dep(−-15, 1-27)',
                                                       'dep(1-27, c-29)',
                                                       'dep(1-27, 10-31)',
                                                       'dep(−-15, d-33)',
                                                       'number(1-36, 14-35)',
                                                       'dep(−-15, 1-36)',
                                                       'dep(1-36, 40-37)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP
      (NP (CD 30) (NN %))
      (PP (IN of)
        (NP (DT A) (JJ =) (CD .25)))
      (PP (IN of)
        (NP
          (NP (NNP B) (NNP =) (NNP th))
          (PP (IN of)
            (NP
              (NP (NNP C))
              (, ,)
              (NP (RB then) (DT A)))))))
    (: :)
    (NP
      (NP (NNP B))
      (: :)
      (NP
        (NP (NNP C))
        (VP (VBZ is)))
      (: :)
      (NP
        (NP
          (NP (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (: :)
        (NP
          (NP (CD 6) (: :) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-))
          (NP (CD 6)))
        (: :)
        (NP
          (NP (CD 3) (: :) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (: :)
        (NP
          (NP (CD 5) (: :) (CD 6))
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (NN none))
            (PP (IN of)
              (NP (DT the) (JJ above) (CD 41)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(%-2, 30-1)',
                                                       'det(.25-6, A-4)',
                                                       'amod(.25-6, =-5)',
                                                       'prep_of(%-2, .25-6)',
                                                       'nn(th-10, B-8)',
                                                       'nn(th-10, =-9)',
                                                       'prep_of(%-2, th-10)',
                                                       'prep_of(th-10, C-12)',
                                                       'advmod(A-15, then-14)',
                                                       'appos(C-12, A-15)',
                                                       'dep(%-2, B-17)',
                                                       'dep(B-17, C-19)',
                                                       'dep(C-19, is-20)',
                                                       'dep(B-17, 5-22)',
                                                       'dep(5-22, a-24)',
                                                       'dep(5-22, 3-26)',
                                                       'num(5-30, 6-28)',
                                                       'dep(5-22, 5-30)',
                                                       'dep(5-30, b-32)',
                                                       'dep(5-30, 6-34)',
                                                       'num(5-38, 3-36)',
                                                       'dep(5-22, 5-38)',
                                                       'dep(5-38, c-40)',
                                                       'dep(5-38, 3-42)',
                                                       'num(6-46, 5-44)',
                                                       'dep(5-22, 6-46)',
                                                       'dep(none-50, d-48)',
                                                       'dep(6-46, none-50)',
                                                       'det(41-54, the-52)',
                                                       'amod(41-54, above-53)',
                                                       'prep_of(none-50, 41-54)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT A) (NN man))
    (VP
      (VP (VBD joined)
        (PP (IN in)
          (NP (PRP$ his) (NN service)))
        (PP (IN at)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP (CD 24) (NNS years))))))
      (CC and)
      (VP (VBD died)
        (PP (IN during)
          (NP (PRP$ his) (NN service) (NN period)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(man-2, A-1)',
                                                       'nsubj(joined-3, man-2)',
                                                       'nsubj(died-14, man-2)',
                                                       'poss(service-6, his-5)',
                                                       'prep_in(joined-3, service-6)',
                                                       'det(age-9, the-8)',
                                                       'prep_at(joined-3, age-9)',
                                                       'num(years-12, 24-11)',
                                                       'prep_of(age-9, years-12)',
                                                       'conj_and(joined-3, died-14)',
                                                       'poss(period-18, his-16)',
                                                       'nn(period-18, service-17)',
                                                       'prep_during(died-14, period-18)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (JJS simplest) (NN value))
      (PP (IN of)
        (NP
          (QP (CD 2) (CD +))
          (QP (CD 3) (CD 2)))))
    (VP (VBD −)
      (SBAR
        (S
          (NP (CD 3) (NNS +))
          (VP
            (VP (VBZ is))
            (\\: \\:)
            (NP
              (NP
                (NP
                  (NP (CD 2) (NNS −))
                  (NP
                    (NP
                      (NP
                        (QP (CD 3) (CD 2))
                        (QP (CD +) (CD 3)))
                      (PRN (-LRB- -LRB-)
                        (X (SYM a))
                        (-RRB- -RRB-))
                      (NP (CD 7)))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-))))
                (NP
                  (NP (CD 1))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 10))))
              (PRN (-LRB- -LRB-)
                (VP (VBN d))
                (-RRB- -RRB-))
              (NP
                (NP
                  (QP (CD 14) (CD 1)))
                (NP (CD 40))))))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP
      (NP (CD 30) (NN %))
      (PP (IN of)
        (NP (DT A) (JJ =) (CD \\.25)))
      (PP (IN of)
        (NP
          (NP (NNP B) (NNP =) (NNP th))
          (PP (IN of)
            (NP
              (NP (NNP C))
              (\\, \\,)
              (NP (RB then) (DT A)))))))
    (\\: \\:)
    (NP
      (NP (NNP B))
      (\\: \\:)
      (NP
        (NP (NNP C))
        (VP (VBZ is)))
      (\\: \\:)
      (NP
        (NP
          (NP (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD 6) (\\: \\:) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-))
          (NP (CD 6)))
        (\\: \\:)
        (NP
          (NP (CD 3) (\\: \\:) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD 5) (\\: \\:) (CD 6))
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (NN none))
            (PP (IN of)
              (NP (DT the) (JJ above) (CD 41)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (DT A) (NN man))
    (VP
      (VP (VBD joined)
        (PP (IN in)
          (NP (PRP$ his) (NN service)))
        (PP (IN at)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP (CD 24) (NNS years))))))
      (CC and)
      (VP (VBD died)
        (PP (IN during)
          (NP (PRP$ his) (NN service) (NN period)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (JJS simplest) (NN value))
      (PP (IN of)
        (NP
          (QP (CD 2) (CD +))
          (QP (CD 3) (CD 2)))))
    (VP (VBD −)
      (SBAR
        (S
          (NP (CD 3) (NNS +))
          (VP
            (VP (VBZ is))
            (\\: \\:)
            (NP
              (NP
                (NP
                  (NP (CD 2) (NNS −))
                  (NP
                    (NP
                      (NP
                        (QP (CD 3) (CD 2))
                        (QP (CD +) (CD 3)))
                      (PRN (-LRB- -LRB-)
                        (X (SYM a))
                        (-RRB- -RRB-))
                      (NP (CD 7)))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-))))
                (NP
                  (NP (CD 1))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 10))))
              (PRN (-LRB- -LRB-)
                (VP (VBN d))
                (-RRB- -RRB-))
              (NP
                (NP
                  (QP (CD 14) (CD 1)))
                (NP (CD 40))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (JJS simplest) (NN value))
      (PP (IN of)
        (NP
          (QP (CD 2) (CD +))
          (QP (CD 3) (CD 2)))))
    (VP (VBD −)
      (SBAR
        (S
          (NP (CD 3) (NNS +))
          (VP
            (VP (VBZ is))
            (\\: \\:)
            (NP
              (NP
                (NP
                  (NP (CD 2) (NNS −))
                  (NP
                    (NP
                      (NP
                        (QP (CD 3) (CD 2))
                        (QP (CD +) (CD 3)))
                      (PRN (-LRB- -LRB-)
                        (X (SYM a))
                        (-RRB- -RRB-))
                      (NP (CD 7)))
                    (PRN (-LRB- -LRB-)
                      (X (SYM b))
                      (-RRB- -RRB-))))
                (NP
                  (NP (CD 1))
                  (PRN (-LRB- -LRB-)
                    (X (SYM c))
                    (-RRB- -RRB-))
                  (NP (CD 10))))
              (PRN (-LRB- -LRB-)
                (VP (VBN d))
                (-RRB- -RRB-))
              (NP
                (NP
                  (QP (CD 14) (CD 1)))
                (NP (CD 40)))))))))))
'
        };
Submitting expect

(THE SIMPLEST VALUE OF 2 + 3 2 − 3 + IS : 2 − 3 2 + 3 -LRB- A -RRB- 7 -LRB- B -RRB- 1 -LRB- C -RRB- 10 -LRB- D -RRB- 14 1 40)

 A VALUE CAN BE SIMPLEST.
 SOME_NUMBER_OF + MAY BE.

((:I (:A (:Q THE VALUE.N) (:P OF.P NIL)) −.V) NIL (:I (:Q DET VALUE.N) SIMPLEST.A) (:I (:Q SOME-NUMBER-OF (:F PLUR +.N)) BE.V))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE SIMPLEST VALUE OF 2 + 3 2 − 3 + IS : 2 − 3 2 + 3 -LRB- A -RRB- 7 -LRB- B -RRB- 1 -LRB- C -RRB- 10 -LRB- D -RRB- 14 1 40)

 A VALUE CAN BE SIMPLEST.
 SOME_NUMBER_OF + MAY BE.

((:I (:A (:Q THE VALUE.N) (:P OF.P NIL)) −.V) NIL (:I (:Q DET VALUE.N) SIMPLEST.A) (:I (:Q SOME-NUMBER-OF (:F PLUR +.N)) BE.V))
______________________________________________________________________
[5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP
      (NP (CD 30) (NN %))
      (PP (IN of)
        (NP (DT A) (JJ =) (CD \\.25)))
      (PP (IN of)
        (NP
          (NP (NNP B) (NNP =) (NNP th))
          (PP (IN of)
            (NP
              (NP (NNP C))
              (\\, \\,)
              (NP (RB then) (DT A)))))))
    (\\: \\:)
    (NP
      (NP (NNP B))
      (\\: \\:)
      (NP
        (NP (NNP C))
        (VP (VBZ is)))
      (\\: \\:)
      (NP
        (NP
          (NP (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD 6) (\\: \\:) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-))
          (NP (CD 6)))
        (\\: \\:)
        (NP
          (NP (CD 3) (\\: \\:) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD 5) (\\: \\:) (CD 6))
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (NN none))
            (PP (IN of)
              (NP (DT the) (JJ above) (CD 41)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP
      (NP (CD 30) (NN %))
      (PP (IN of)
        (NP (DT A) (JJ =) (CD \\.25)))
      (PP (IN of)
        (NP
          (NP (NNP B) (NNP =) (NNP th))
          (PP (IN of)
            (NP
              (NP (NNP C))
              (\\, \\,)
              (NP (RB then) (DT A)))))))
    (\\: \\:)
    (NP
      (NP (NNP B))
      (\\: \\:)
      (NP
        (NP (NNP C))
        (VP (VBZ is)))
      (\\: \\:)
      (NP
        (NP
          (NP (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD 6) (\\: \\:) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-))
          (NP (CD 6)))
        (\\: \\:)
        (NP
          (NP (CD 3) (\\: \\:) (CD 5))
          (PRN (-LRB- -LRB-)
            (X (SYM c))
            (-RRB- -RRB-))
          (NP (CD 3)))
        (\\: \\:)
        (NP
          (NP (CD 5) (\\: \\:) (CD 6))
          (NP
            (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
            (NP (NN none))
            (PP (IN of)
              (NP (DT the) (JJ above) (CD 41))))))))))
'
        };
Submitting expect

(30 % OF A = .25 OF B = TH OF C , THEN A : B : C IS : 5 -LRB- A -RRB- 3 : 6 : 5 -LRB- B -RRB- 6 : 3 : 5 -LRB- C -RRB- 3 : 5 : 6 -LRB- D -RRB- NONE
 OF THE ABOVE 41)

 A C[PERSON??] MAY BE.

(NIL (:I (:Q DET C.NAME) BE.V))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(30 % OF A = .25 OF B = TH OF C , THEN A : B : C IS : 5 -LRB- A -RRB- 3 : 6 : 5 -LRB- B -RRB- 6 : 3 : 5 -LRB- C -RRB- 3 : 5 : 6 -LRB- D -RRB- NONE
 OF THE ABOVE 41)

 A C[PERSON??] MAY BE.

(NIL (:I (:Q DET C.NAME) BE.V))
______________________________________________________________________
[6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT A) (NN man))
    (VP
      (VP (VBD joined)
        (PP (IN in)
          (NP (PRP$ his) (NN service)))
        (PP (IN at)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP (CD 24) (NNS years))))))
      (CC and)
      (VP (VBD died)
        (PP (IN during)
          (NP (PRP$ his) (NN service) (NN period)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT A) (NN man))
    (VP
      (VP (VBD joined)
        (PP (IN in)
          (NP (PRP$ his) (NN service)))
        (PP (IN at)
          (NP
            (NP (DT the) (NN age))
            (PP (IN of)
              (NP (CD 24) (NNS years))))))
      (CC and)
      (VP (VBD died)
        (PP (IN during)
          (NP (PRP$ his) (NN service) (NN period))))))))
'
        };
Submitting expect

(A MAN JOINED IN HIS SERVICE AT THE AGE OF 24 YEARS AND DIED DURING HIS SERVICE PERIOD)

 A MAN MAY JOIN IN A SERVICE.
 A MALE MAY HAVE A SERVICE.
 A MALE MAY HAVE A SERVICE PERIOD.

((:I (:Q A{N} MAN.N) JOIN.V (:P IN.P (:Q THE SERVICE.N))) (:I (:Q DET MALE*.N) HAVE.V (:Q DET SERVICE.N)) NIL
 (:I (:Q DET MALE*.N) HAVE.V (:Q DET (:F NN SERVICE.N PERIOD.N))))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A MAN JOINED IN HIS SERVICE AT THE AGE OF 24 YEARS AND DIED DURING HIS SERVICE PERIOD)

 A MAN MAY JOIN IN A SERVICE.
 A MALE MAY HAVE A SERVICE.
 A MALE MAY HAVE A SERVICE PERIOD.

((:I (:Q A{N} MAN.N) JOIN.V (:P IN.P (:Q THE SERVICE.N))) (:I (:Q DET MALE*.N) HAVE.V (:Q DET SERVICE.N)) NIL
 (:I (:Q DET MALE*.N) HAVE.V (:Q DET (:F NN SERVICE.N PERIOD.N))))
______________________________________________________________________
[7]>'
        };
$VAR1 = {
          'Batch' => [
                       'If he served for time, then he lived: (a) 32 years (c) 56 years 42.',
                       'If 4 th of his life 7 (b) 42 years (d) None of the above b c a b + c a = = then the value of is: 5 8 b 2 (a) 1 (b) 0 (c) 5 (d) 15 43.',
                       'If n is an integer, then (n – 3)2 – n2 is always divisible by: (a) 3 – 2n (c) n + 3 44.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 22]: [If, he, served, for, time, ,, then, he, lived, :, -LRB-, a, -RRB-, 32, years, -LRB-, c, -RRB-, 56, years, 42, .]
Parsing [sent. 2 len. 56]: [If, 4, th, of, his, life, 7, -LRB-, b, -RRB-, 42, years, -LRB-, d, -RRB-, None, of, the, above, b, c, a, b, +, c, a, =, =, then, the, value, of, is, :, 5, 8, b, 2, -LRB-, a, -RRB-, 1, -LRB-, b, -RRB-, 0, -LRB-, c, -RRB-, 5, -LRB-, d, -RRB-, 15, 43, .]
Parsing [sent. 3 len. 34]: [If, n, is, an, integer, ,, then, -LRB-, n, --, 3, -RRB-, 2, --, n2, is, always, divisible, by, :, -LRB-, a, -RRB-, 3, --, 2n, -LRB-, c, -RRB-, n, +, 3, 44, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 112 words in 3 sentences (8.54 wds/sec; 0.23 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBD served)
          (PP (IN for)
            (NP (NN time)))
          (, ,)
          (ADVP (RB then)))))
    (NP (PRP he))
    (VP (VBD lived) (: :)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP (CD 32) (NNS years)
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (CD 56) (NNS years))
          (S
            (VP (VBG 42))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(served-3, If-1)',
                                                       'nsubj(served-3, he-2)',
                                                       'advcl(lived-9, served-3)',
                                                       'prep_for(served-3, time-5)',
                                                       'advmod(served-3, then-7)',
                                                       'nsubj(lived-9, he-8)',
                                                       'dep(years-15, a-12)',
                                                       'num(years-15, 32-14)',
                                                       'parataxis(lived-9, years-15)',
                                                       'dep(years-15, c-17)',
                                                       'num(years-20, 56-19)',
                                                       'dep(years-15, years-20)',
                                                       'dep(years-15, 42-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD 4) (NN th))
          (PP (IN of)
            (NP
              (NP
                (NP
                  (NP (PRP$ his) (NN life))
                  (ADJP (CD 7)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 42) (NNS years)))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the) (JJ above))
                  (X
                    (X
                      (X
                        (X (SYM b))
                        (NP (SYM c)))
                      (NP (SYM a)))
                    (NP (SYM b))))))))
        (VP (VBD +)
          (X (SYM c))
          (NP (DT a) (NN =)
            (S
              (VP (SYM =)
                (NP (RB then))))))))
    (NP
      (NP (DT the) (NN value))
      (PP (IN of)))
    (VP
      (VP (VBZ is))
      (: :)
      (NP
        (QP (CD 5) (CD 8))
        (NP
          (NP
            (QP (CD b) (CD 2)))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (PP
            (NP
              (NP (CD 1))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP (CD 0))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (NP
                (NP (CD 5))
                (NP
                  (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                  (VBN 15) (NN 43))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(+-24, If-1)',
                                                       'num(th-3, 4-2)',
                                                       'nsubj(+-24, th-3)',
                                                       'poss(life-6, his-5)',
                                                       'prep_of(th-3, life-6)',
                                                       'amod(life-6, 7-7)',
                                                       'dep(life-6, b-9)',
                                                       'num(years-12, 42-11)',
                                                       'dep(life-6, years-12)',
                                                       'dep(None-16, d-14)',
                                                       'dep(life-6, None-16)',
                                                       'det(above-19, the-18)',
                                                       'prep_of(None-16, above-19)',
                                                       'dep(c-21, b-20)',
                                                       'dep(a-22, c-21)',
                                                       'dep(b-23, a-22)',
                                                       'dep(None-16, b-23)',
                                                       'advcl(is-33, +-24)',
                                                       'dep(+-24, c-25)',
                                                       'det(=-27, a-26)',
                                                       'dobj(+-24, =-27)',
                                                       'dep(then-29, =-28)',
                                                       'dep(=-27, then-29)',
                                                       'det(value-31, the-30)',
                                                       'nsubj(is-33, value-31)',
                                                       'prep(value-31, of-32)',
                                                       'number(8-36, 5-35)',
                                                       'num(2-38, 8-36)',
                                                       'number(2-38, b-37)',
                                                       'dobj(is-33, 2-38)',
                                                       'dep(2-38, a-40)',
                                                       'prep(2-38, 1-42)',
                                                       'dep(1-42, b-44)',
                                                       'dep(1-42, 0-46)',
                                                       'dep(0-46, c-48)',
                                                       'dep(0-46, 5-50)',
                                                       'dep(43-55, d-52)',
                                                       'amod(43-55, 15-54)',
                                                       'dep(5-50, 43-55)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR (IN If)
      (S
        (NP (NN n))
        (VP (VBZ is)
          (NP
            (NP
              (NP (DT an) (NN integer))
              (, ,)
              (NP
                (NP (RB then))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NN n))
                    (: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-))
                (NP (CD 2)))
              (PRN (: --)
                (S
                  (NP (NNS n2))
                  (VP (VBZ is)
                    (ADVP (RB always))
                    (ADJP (JJ divisible)
                      (PP (IN by)))))
                (: :)))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))))))
    (NP
      (NP (CD 3) (: --) (CD 2n))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP n)
      (S
        (VP (VBG +)
          (NP (CD 3) (CD 44)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(integer-5, If-1)',
                                                       'nsubj(integer-5, n-2)',
                                                       'cop(integer-5, is-3)',
                                                       'det(integer-5, an-4)',
                                                       'advcl(n-30, integer-5)',
                                                       'appos(integer-5, then-7)',
                                                       'dep(then-7, n-9)',
                                                       'dep(n-9, 3-11)',
                                                       'dep(then-7, 2-13)',
                                                       'nsubj(divisible-18, n2-15)',
                                                       'cop(divisible-18, is-16)',
                                                       'advmod(divisible-18, always-17)',
                                                       'dep(integer-5, divisible-18)',
                                                       'prep(divisible-18, by-19)',
                                                       'dep(integer-5, a-22)',
                                                       'num(2n-26, 3-24)',
                                                       'nsubj(n-30, 2n-26)',
                                                       'dep(2n-26, c-28)',
                                                       'xcomp(n-30, +-31)',
                                                       'num(44-33, 3-32)',
                                                       'dobj(+-31, 44-33)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBD served)
          (PP (IN for)
            (NP (NN time)))
          (\\, \\,)
          (ADVP (RB then)))))
    (NP (PRP he))
    (VP (VBD lived) (\\: \\:)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP (CD 32) (NNS years)
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (CD 56) (NNS years))
          (S
            (VP (VBG 42))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD 4) (NN th))
          (PP (IN of)
            (NP
              (NP
                (NP
                  (NP (PRP$ his) (NN life))
                  (ADJP (CD 7)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 42) (NNS years)))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the) (JJ above))
                  (X
                    (X
                      (X
                        (X (SYM b))
                        (NP (SYM c)))
                      (NP (SYM a)))
                    (NP (SYM b))))))))
        (VP (VBD +)
          (X (SYM c))
          (NP (DT a) (NN =)
            (S
              (VP (SYM =)
                (NP (RB then))))))))
    (NP
      (NP (DT the) (NN value))
      (PP (IN of)))
    (VP
      (VP (VBZ is))
      (\\: \\:)
      (NP
        (QP (CD 5) (CD 8))
        (NP
          (NP
            (QP (CD b) (CD 2)))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (PP
            (NP
              (NP (CD 1))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP (CD 0))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (NP
                (NP (CD 5))
                (NP
                  (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                  (VBN 15) (NN 43))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (SBAR (IN If)
      (S
        (NP (NN n))
        (VP (VBZ is)
          (NP
            (NP
              (NP (DT an) (NN integer))
              (\\, \\,)
              (NP
                (NP (RB then))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NN n))
                    (\\: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-))
                (NP (CD 2)))
              (PRN (\\: --)
                (S
                  (NP (NNS n2))
                  (VP (VBZ is)
                    (ADVP (RB always))
                    (ADJP (JJ divisible)
                      (PP (IN by)))))
                (\\: \\:)))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))))))
    (NP
      (NP (CD 3) (\\: --) (CD 2n))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP n)
      (S
        (VP (VBG +)
          (NP (CD 3) (CD 44)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBD served)
          (PP (IN for)
            (NP (NN time)))
          (\\, \\,)
          (ADVP (RB then)))))
    (NP (PRP he))
    (VP (VBD lived) (\\: \\:)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP (CD 32) (NNS years)
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (CD 56) (NNS years))
          (S
            (VP (VBG 42))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR (IN If)
      (S
        (NP (PRP he))
        (VP (VBD served)
          (PP (IN for)
            (NP (NN time)))
          (\\, \\,)
          (ADVP (RB then)))))
    (NP (PRP he))
    (VP (VBD lived) (\\: \\:)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP (CD 32) (NNS years)
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP (CD 56) (NNS years))
          (S
            (VP (VBG 42)))))))))
'
        };
Submitting expect

*** - STRING: argument 42 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 42 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [8]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD 4) (NN th))
          (PP (IN of)
            (NP
              (NP
                (NP
                  (NP (PRP$ his) (NN life))
                  (ADJP (CD 7)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 42) (NNS years)))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the) (JJ above))
                  (X
                    (X
                      (X
                        (X (SYM b))
                        (NP (SYM c)))
                      (NP (SYM a)))
                    (NP (SYM b))))))))
        (VP (VBD +)
          (X (SYM c))
          (NP (DT a) (NN =)
            (S
              (VP (SYM =)
                (NP (RB then))))))))
    (NP
      (NP (DT the) (NN value))
      (PP (IN of)))
    (VP
      (VP (VBZ is))
      (\\: \\:)
      (NP
        (QP (CD 5) (CD 8))
        (NP
          (NP
            (QP (CD b) (CD 2)))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (PP
            (NP
              (NP (CD 1))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP (CD 0))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (NP
                (NP (CD 5))
                (NP
                  (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                  (VBN 15) (NN 43))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD 4) (NN th))
          (PP (IN of)
            (NP
              (NP
                (NP
                  (NP (PRP$ his) (NN life))
                  (ADJP (CD 7)))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 42) (NNS years)))
              (NP
                (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                (NP (NN None))
                (PP (IN of)
                  (NP (DT the) (JJ above))
                  (X
                    (X
                      (X
                        (X (SYM b))
                        (NP (SYM c)))
                      (NP (SYM a)))
                    (NP (SYM b))))))))
        (VP (VBD +)
          (X (SYM c))
          (NP (DT a) (NN =)
            (S
              (VP (SYM =)
                (NP (RB then))))))))
    (NP
      (NP (DT the) (NN value))
      (PP (IN of)))
    (VP
      (VP (VBZ is))
      (\\: \\:)
      (NP
        (QP (CD 5) (CD 8))
        (NP
          (NP
            (QP (CD b) (CD 2)))
          (PRN (-LRB- -LRB-)
            (X (SYM a))
            (-RRB- -RRB-))
          (PP
            (NP
              (NP (CD 1))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP (CD 0))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (NP
                (NP (CD 5))
                (NP
                  (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
                  (VBN 15) (NN 43)))))))))))
'
        };
Submitting expect

*** - GET: 43 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - GET: 43 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR (IN If)
      (S
        (NP (NN n))
        (VP (VBZ is)
          (NP
            (NP
              (NP (DT an) (NN integer))
              (\\, \\,)
              (NP
                (NP (RB then))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NN n))
                    (\\: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-))
                (NP (CD 2)))
              (PRN (\\: --)
                (S
                  (NP (NNS n2))
                  (VP (VBZ is)
                    (ADVP (RB always))
                    (ADJP (JJ divisible)
                      (PP (IN by)))))
                (\\: \\:)))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))))))
    (NP
      (NP (CD 3) (\\: --) (CD 2n))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP n)
      (S
        (VP (VBG +)
          (NP (CD 3) (CD 44)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR (IN If)
      (S
        (NP (NN n))
        (VP (VBZ is)
          (NP
            (NP
              (NP (DT an) (NN integer))
              (\\, \\,)
              (NP
                (NP (RB then))
                (PRN (-LRB- -LRB-)
                  (NP
                    (NP (NN n))
                    (\\: --)
                    (NP (CD 3)))
                  (-RRB- -RRB-))
                (NP (CD 2)))
              (PRN (\\: --)
                (S
                  (NP (NNS n2))
                  (VP (VBZ is)
                    (ADVP (RB always))
                    (ADJP (JJ divisible)
                      (PP (IN by)))))
                (\\: \\:)))
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))))))
    (NP
      (NP (CD 3) (\\: --) (CD 2n))
      (PRN (-LRB- -LRB-)
        (X (SYM c))
        (-RRB- -RRB-)))
    (VP (VBP n)
      (S
        (VP (VBG +)
          (NP (CD 3) (CD 44))))))))
'
        };
Submitting expect

(IF N IS AN INTEGER , THEN -LRB- N -- 3 -RRB- 2 -- N2 IS ALWAYS DIVISIBLE BY : -LRB- A -RRB- 3 -- 2N -LRB- C -RRB- N + 3 44)

 N CAN BE AN INTEGER.

((:I (:F K N.N) INTEGER.N))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(IF N IS AN INTEGER , THEN -LRB- N -- 3 -RRB- 2 -- N2 IS ALWAYS DIVISIBLE BY : -LRB- A -RRB- 3 -- 2N -LRB- C -RRB- N + 3 44)

 N CAN BE AN INTEGER.

((:I (:F K N.N) INTEGER.N))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       'The value of (1 + the ratio will be 2 : 1 is: (a) 2 kg (b) 3 kg (c) 5 kg (d) 8 kg 49.',
                       'A bag contains some 5 Re coins and 10 Re coins.',
                       'If the total number of coins is 80 and the total value is Rs 600, the number of 10 Re coins is: (a) 80 (b) 50 (c) 40 (d) 10 (b) 3 + 2n (d) None of the above 2 2 + 3 ) – 2 3 − 2 6 − 2 2 is: (a) 1 (b) 6 (c) 2 (d) 3 45.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 37]: [The, value, of, -LRB-, 1, +, the, ratio, will, be, 2, :, 1, is, :, -LRB-, a, -RRB-, 2, kg, -LRB-, b, -RRB-, 3, kg, -LRB-, c, -RRB-, 5, kg, -LRB-, d, -RRB-, 8, kg, 49, .]
Parsing [sent. 2 len. 12]: [A, bag, contains, some, 5, Re, coins, and, 10, Re, coins, .]
Parsing [sent. 3 len. 87]: [If, the, total, number, of, coins, is, 80, and, the, total, value, is, Rs, 600, ,, the, number, of, 10, Re, coins, is, :, -LRB-, a, -RRB-, 80, -LRB-, b, -RRB-, 50, -LRB-, c, -RRB-, 40, -LRB-, d, -RRB-, 10, -LRB-, b, -RRB-, 3, +, 2n, -LRB-, d, -RRB-, None, of, the, above, 2, 2, +, 3, -RRB-, --, 2, 3, −, 2, 6, −, 2, 2, is, :, -LRB-, a, -RRB-, 1, -LRB-, b, -RRB-, 6, -LRB-, c, -RRB-, 2, -LRB-, d, -RRB-, 3, 45, .]

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...
Parsed file: /tmp/stanfordparser.txt [3 sentences].

*******************************************************
***  WARNING!! OUT OF MEMORY! THERE WAS NOT ENOUGH  ***
***  MEMORY TO RUN ALL PARSERS.  EITHER GIVE THE    ***
***  JVM MORE MEMORY, SET THE MAXIMUM SENTENCE      ***
***  LENGTH WITH -maxLength, OR PERHAPS YOU ARE     ***
***  HAPPY TO HAVE THE PARSER FALL BACK TO USING    ***
***  A SIMPLER PARSER FOR VERY LONG SENTENCES.      ***
*******************************************************

Parsed 136 words in 3 sentences (25.70 wds/sec; 0.57 sents/sec).
  1 sentences were not parsed:
    1 were skipped as length 0 or greater than 559038737
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT The) (NN value))
      (PP (IN of)
        (SBAR
          (S (-LRB- -LRB-)
            (NP (CD 1))
            (VP (VBD +)
              (SBAR
                (S
                  (NP (DT the) (NN ratio))
                  (VP (MD will)
                    (VP (VB be)
                      (NP
                        (NP (CD 2))
                        (: :)
                        (NP (CD 1))))))))))))
    (VP (VBZ is)
      (S (: :)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 2))
          (VP (VBP kg)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 3))
          (VP (VBP kg)
            (S (-LRB- -LRB-)
              (NP (SYM c))
              (-RRB- -RRB-)
              (NP (CD 5) (NN kg)))))
        (S
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (CD 8))
          (VP (VBP kg)
            (NP (CD 49))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(value-2, The-1)',
                                                       'nsubj(is-14, value-2)',
                                                       'nsubj(+-6, 1-5)',
                                                       'prepc_of(value-2, +-6)',
                                                       'det(ratio-8, the-7)',
                                                       'nsubj(2-11, ratio-8)',
                                                       'aux(2-11, will-9)',
                                                       'cop(2-11, be-10)',
                                                       'ccomp(+-6, 2-11)',
                                                       'dep(2-11, 1-13)',
                                                       'dep(-RRB--18, a-17)',
                                                       'nsubj(kg-20, 2-19)',
                                                       'dep(is-14, kg-20)',
                                                       'dep(-RRB--23, b-22)',
                                                       'nsubj(kg-25, 3-24)',
                                                       'dep(kg-20, kg-25)',
                                                       'dep(kg-30, c-27)',
                                                       'num(kg-30, 5-29)',
                                                       'dep(kg-25, kg-30)',
                                                       'dep(kg-35, d-32)',
                                                       'nsubj(kg-35, 8-34)',
                                                       'dep(kg-20, kg-35)',
                                                       'dobj(kg-35, 49-36)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT A) (NN bag))
    (VP (VBZ contains)
      (NP
        (NP (DT some) (CD 5) (NNP Re) (NNS coins))
        (CC and)
        (NP (CD 10) (NNP Re) (NNS coins))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(bag-2, A-1)',
                                                       'nsubj(contains-3, bag-2)',
                                                       'det(coins-7, some-4)',
                                                       'num(coins-7, 5-5)',
                                                       'nn(coins-7, Re-6)',
                                                       'dobj(contains-3, coins-7)',
                                                       'num(coins-11, 10-9)',
                                                       'nn(coins-11, Re-10)',
                                                       'dobj(contains-3, coins-11)',
                                                       'conj_and(coins-7, coins-11)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
',
                                            'Sent' => 'Sentence skipped: no PCFG fallback.',
                                            'Rel' => []
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (NN value))
      (PP (IN of)
        (SBAR
          (S (-LRB- -LRB-)
            (NP (CD 1))
            (VP (VBD +)
              (SBAR
                (S
                  (NP (DT the) (NN ratio))
                  (VP (MD will)
                    (VP (VB be)
                      (NP
                        (NP (CD 2))
                        (\\: \\:)
                        (NP (CD 1))))))))))))
    (VP (VBZ is)
      (S (\\: \\:)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 2))
          (VP (VBP kg)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 3))
          (VP (VBP kg)
            (S (-LRB- -LRB-)
              (NP (SYM c))
              (-RRB- -RRB-)
              (NP (CD 5) (NN kg)))))
        (S
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (CD 8))
          (VP (VBP kg)
            (NP (CD 49))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (DT A) (NN bag))
    (VP (VBZ contains)
      (NP
        (NP (DT some) (CD 5) (NNP Re) (NNS coins))
        (CC and)
        (NP (CD 10) (NNP Re) (NNS coins))))))'
        };
$VAR1 = {
          'Tree' => 'SENTENCE_SKIPPED_OR_UNPARSABLE
'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (NN value))
      (PP (IN of)
        (SBAR
          (S (-LRB- -LRB-)
            (NP (CD 1))
            (VP (VBD +)
              (SBAR
                (S
                  (NP (DT the) (NN ratio))
                  (VP (MD will)
                    (VP (VB be)
                      (NP
                        (NP (CD 2))
                        (\\: \\:)
                        (NP (CD 1))))))))))))
    (VP (VBZ is)
      (S (\\: \\:)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 2))
          (VP (VBP kg)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 3))
          (VP (VBP kg)
            (S (-LRB- -LRB-)
              (NP (SYM c))
              (-RRB- -RRB-)
              (NP (CD 5) (NN kg)))))
        (S
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (CD 8))
          (VP (VBP kg)
            (NP (CD 49))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (NN value))
      (PP (IN of)
        (SBAR
          (S (-LRB- -LRB-)
            (NP (CD 1))
            (VP (VBD +)
              (SBAR
                (S
                  (NP (DT the) (NN ratio))
                  (VP (MD will)
                    (VP (VB be)
                      (NP
                        (NP (CD 2))
                        (\\: \\:)
                        (NP (CD 1))))))))))))
    (VP (VBZ is)
      (S (\\: \\:)
        (S
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 2))
          (VP (VBP kg)))
        (S
          (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
          (NP (CD 3))
          (VP (VBP kg)
            (S (-LRB- -LRB-)
              (NP (SYM c))
              (-RRB- -RRB-)
              (NP (CD 5) (NN kg)))))
        (S
          (LST (-LRB- -LRB-) (LS d) (-RRB- -RRB-))
          (NP (CD 8))
          (VP (VBP kg)
            (NP (CD 49)))))))))
'
        };
Submitting expect

(THE VALUE OF -LRB- 1 + THE RATIO WILL BE 2 : 1 IS : -LRB- A -RRB- 2 KG -LRB- B -RRB- 3 KG -LRB- C -RRB- 5 KG -LRB- D -RRB- 8 KG 49)

 SOME NUMBER_OR_PORTION MAY +.
 A RATIO CAN BE A NUMBER_OR_PORTION.
 SOME NUMBER_OR_PORTION MAY KG.
 SOME NUMBER_OR_PORTION MAY KG SOME NUMBER_OR_PORTION.

((:I (:Q SOME NUMBER-OR-PORTION.N) +.V) (:I (:Q THE RATIO.N) NUMBER-OR-PORTION.N) (:I (:Q SOME NUMBER-OR-PORTION.N) KG.V)
 (:I (:Q SOME NUMBER-OR-PORTION.N) KG.V (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE VALUE OF -LRB- 1 + THE RATIO WILL BE 2 : 1 IS : -LRB- A -RRB- 2 KG -LRB- B -RRB- 3 KG -LRB- C -RRB- 5 KG -LRB- D -RRB- 8 KG 49)

 SOME NUMBER_OR_PORTION MAY +.
 A RATIO CAN BE A NUMBER_OR_PORTION.
 SOME NUMBER_OR_PORTION MAY KG.
 SOME NUMBER_OR_PORTION MAY KG SOME NUMBER_OR_PORTION.

((:I (:Q SOME NUMBER-OR-PORTION.N) +.V) (:I (:Q THE RATIO.N) NUMBER-OR-PORTION.N) (:I (:Q SOME NUMBER-OR-PORTION.N) KG.V)
 (:I (:Q SOME NUMBER-OR-PORTION.N) KG.V (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT A) (NN bag))
    (VP (VBZ contains)
      (NP
        (NP (DT some) (CD 5) (NNP Re) (NNS coins))
        (CC and)
        (NP (CD 10) (NNP Re) (NNS coins))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT A) (NN bag))
    (VP (VBZ contains)
      (NP
        (NP (DT some) (CD 5) (NNP Re) (NNS coins))
        (CC and)
        (NP (CD 10) (NNP Re) (NNS coins)))))))
'
        };
Submitting expect

(A BAG CONTAINS SOME 5 RE COINS AND 10 RE COINS)

 A BAG MAY CONTAIN SOME_NUMBER_OF COINS.
 A RE[PERSON??] MAY HAVE COINS.

((:I (:Q A{N} BAG.N) CONTAIN.V (:Q SOME-NUMBER-OF (:F PLUR COIN.N))) (:I (:Q DET RE.NAME) HAVE.V (:Q DET (:F PLUR COIN.N))))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A BAG CONTAINS SOME 5 RE COINS AND 10 RE COINS)

 A BAG MAY CONTAIN SOME_NUMBER_OF COINS.
 A RE[PERSON??] MAY HAVE COINS.

((:I (:Q A{N} BAG.N) CONTAIN.V (:Q SOME-NUMBER-OF (:F PLUR COIN.N))) (:I (:Q DET RE.NAME) HAVE.V (:Q DET (:F PLUR COIN.N))))
______________________________________________________________________
[5]>'
        };
$VAR1 = {
          'Batch' => [
                       'Ram, Rahim and Ratan invested Rs 5000, Rs 4000 and Rs 3000 respectively in a business.',
                       'Ratan earns Rs 200 p.m. for its supervision.',
                       'If the total profit is Rs 8400, then the total income of Ratan is: (a) Rs 4500 (b) Rs 3900 (c) Rs 9300 (d) Rs 5400 46.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 19]: [Ram, ,, Rahim, and, Ratan, invested, Rs, 5000, ,, Rs, 4000, and, Rs, 3000, respectively, in, a, business, .]
Parsing [sent. 2 len. 9]: [Ratan, earns, Rs, 200, p.m., for, its, supervision, .]
Parsing [sent. 3 len. 38]: [If, the, total, profit, is, Rs, 8400, ,, then, the, total, income, of, Ratan, is, :, -LRB-, a, -RRB-, Rs, 4500, -LRB-, b, -RRB-, Rs, 3900, -LRB-, c, -RRB-, Rs, 9300, -LRB-, d, -RRB-, Rs, 5400, 46, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 66 words in 3 sentences (17.05 wds/sec; 0.78 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP Ram) (, ,) (NNP Rahim)
      (CC and)
      (NNP Ratan))
    (VP (VBD invested)
      (NP
        (NP (NNP Rs) (NNP 5000))
        (, ,)
        (NP (NNP Rs) (CD 4000))
        (CC and)
        (NP (NNP Rs) (CD 3000)))
      (PP
        (ADVP (RB respectively))
        (IN in)
        (NP (DT a) (NN business))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(invested-6, Ram-1)',
                                                       'conj_and(Ram-1, Rahim-3)',
                                                       'nsubj(invested-6, Rahim-3)',
                                                       'conj_and(Ram-1, Ratan-5)',
                                                       'nsubj(invested-6, Ratan-5)',
                                                       'nn(5000-8, Rs-7)',
                                                       'dobj(invested-6, 5000-8)',
                                                       'dobj(invested-6, Rs-10)',
                                                       'conj_and(5000-8, Rs-10)',
                                                       'num(Rs-10, 4000-11)',
                                                       'dobj(invested-6, Rs-13)',
                                                       'conj_and(5000-8, Rs-13)',
                                                       'num(Rs-13, 3000-14)',
                                                       'advmod(invested-6, respectively-15)',
                                                       'det(business-18, a-17)',
                                                       'prep_in(invested-6, business-18)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (NNP Ratan))
    (VP (VBZ earns)
      (NP (NNP Rs))
      (NP
        (NP (CD 200) (NN p.m.))
        (PP (IN for)
          (NP (PRP$ its) (NN supervision)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(earns-2, Ratan-1)',
                                                       'iobj(earns-2, Rs-3)',
                                                       'num(p.m.-5, 200-4)',
                                                       'dobj(earns-2, p.m.-5)',
                                                       'poss(supervision-8, its-7)',
                                                       'prep_for(p.m.-5, supervision-8)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR (IN If)
      (S
        (NP (DT the) (JJ total) (NN profit))
        (VP (VBZ is)
          (NP (NNP Rs) (CD 8400)))))
    (, ,)
    (NP
      (NP (RB then) (DT the) (JJ total) (NN income))
      (PP (IN of)
        (NP (NNP Ratan))))
    (VP (VBZ is) (: :)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNP Rs) (NNP 4500))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (NNP Rs) (CD 3900))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 9300)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (QP (CD 5400) (CD 46))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(Rs-6, If-1)',
                                                       'det(profit-4, the-2)',
                                                       'amod(profit-4, total-3)',
                                                       'nsubj(Rs-6, profit-4)',
                                                       'cop(Rs-6, is-5)',
                                                       'advcl(4500-21, Rs-6)',
                                                       'num(Rs-6, 8400-7)',
                                                       'advmod(income-12, then-9)',
                                                       'det(income-12, the-10)',
                                                       'amod(income-12, total-11)',
                                                       'nsubj(4500-21, income-12)',
                                                       'prep_of(income-12, Ratan-14)',
                                                       'cop(4500-21, is-15)',
                                                       'dep(4500-21, a-18)',
                                                       'nn(4500-21, Rs-20)',
                                                       'dep(4500-21, b-23)',
                                                       'dep(4500-21, Rs-25)',
                                                       'num(Rs-25, 3900-26)',
                                                       'dep(Rs-25, c-28)',
                                                       'nn(Rs-35, Rs-30)',
                                                       'nn(Rs-35, 9300-31)',
                                                       'appos(Rs-35, d-33)',
                                                       'dep(Rs-25, Rs-35)',
                                                       'number(46-37, 5400-36)',
                                                       'num(Rs-35, 46-37)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (NNP Ram) (\\, \\,) (NNP Rahim)
      (CC and)
      (NNP Ratan))
    (VP (VBD invested)
      (NP
        (NP (NNP Rs) (NNP 5000))
        (\\, \\,)
        (NP (NNP Rs) (CD 4000))
        (CC and)
        (NP (NNP Rs) (CD 3000)))
      (PP
        (ADVP (RB respectively))
        (IN in)
        (NP (DT a) (NN business))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (NNP Ratan))
    (VP (VBZ earns)
      (NP (NNP Rs))
      (NP
        (NP (CD 200) (NN p\\.m\\.))
        (PP (IN for)
          (NP (PRP$ its) (NN supervision)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (SBAR (IN If)
      (S
        (NP (DT the) (JJ total) (NN profit))
        (VP (VBZ is)
          (NP (NNP Rs) (CD 8400)))))
    (\\, \\,)
    (NP
      (NP (RB then) (DT the) (JJ total) (NN income))
      (PP (IN of)
        (NP (NNP Ratan))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNP Rs) (NNP 4500))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (NNP Rs) (CD 3900))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 9300)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (QP (CD 5400) (CD 46))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP Ram) (\\, \\,) (NNP Rahim)
      (CC and)
      (NNP Ratan))
    (VP (VBD invested)
      (NP
        (NP (NNP Rs) (NNP 5000))
        (\\, \\,)
        (NP (NNP Rs) (CD 4000))
        (CC and)
        (NP (NNP Rs) (CD 3000)))
      (PP
        (ADVP (RB respectively))
        (IN in)
        (NP (DT a) (NN business))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP Ram) (\\, \\,) (NNP Rahim)
      (CC and)
      (NNP Ratan))
    (VP (VBD invested)
      (NP
        (NP (NNP Rs) (NNP 5000))
        (\\, \\,)
        (NP (NNP Rs) (CD 4000))
        (CC and)
        (NP (NNP Rs) (CD 3000)))
      (PP
        (ADVP (RB respectively))
        (IN in)
        (NP (DT a) (NN business)))))))
'
        };
Submitting expect

*** - GET: 5000 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [6]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 5000 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (NNP Ratan))
    (VP (VBZ earns)
      (NP (NNP Rs))
      (NP
        (NP (CD 200) (NN p\\.m\\.))
        (PP (IN for)
          (NP (PRP$ its) (NN supervision)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (NNP Ratan))
    (VP (VBZ earns)
      (NP (NNP Rs))
      (NP
        (NP (CD 200) (NN p\\.m\\.))
        (PP (IN for)
          (NP (PRP$ its) (NN supervision))))))))
'
        };
Submitting expect

(RATAN EARNS RS 200 P.M. FOR ITS SUPERVISION)

 A RATAN[PERSON??] MAY EARN A RS[PERSON??] SOME_NUMBER_OF P.M..
 SOME_NUMBER_OF P.M. CAN BE FOR A SUPERVISION.
 A THING-REFERRED-TO MAY HAVE A SUPERVISION.

((:I (:Q DET RATAN.NAME) EARN.V (:Q DET RS.NAME) (:Q SOME-NUMBER-OF P.M..N)) (:I (:Q SOME-NUMBER-OF P.M..N) FOR.P (:Q THE SUPERVISION.N))
 (:I (:Q DET THING-REFERRED-TO*.N) HAVE.V (:Q DET SUPERVISION.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(RATAN EARNS RS 200 P.M. FOR ITS SUPERVISION)

 A RATAN[PERSON??] MAY EARN A RS[PERSON??] SOME_NUMBER_OF P.M..
 SOME_NUMBER_OF P.M. CAN BE FOR A SUPERVISION.
 A THING-REFERRED-TO MAY HAVE A SUPERVISION.

((:I (:Q DET RATAN.NAME) EARN.V (:Q DET RS.NAME) (:Q SOME-NUMBER-OF P.M..N)) (:I (:Q SOME-NUMBER-OF P.M..N) FOR.P (:Q THE SUPERVISION.N))
 (:I (:Q DET THING-REFERRED-TO*.N) HAVE.V (:Q DET SUPERVISION.N)))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR (IN If)
      (S
        (NP (DT the) (JJ total) (NN profit))
        (VP (VBZ is)
          (NP (NNP Rs) (CD 8400)))))
    (\\, \\,)
    (NP
      (NP (RB then) (DT the) (JJ total) (NN income))
      (PP (IN of)
        (NP (NNP Ratan))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNP Rs) (NNP 4500))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (NNP Rs) (CD 3900))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 9300)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (QP (CD 5400) (CD 46))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR (IN If)
      (S
        (NP (DT the) (JJ total) (NN profit))
        (VP (VBZ is)
          (NP (NNP Rs) (CD 8400)))))
    (\\, \\,)
    (NP
      (NP (RB then) (DT the) (JJ total) (NN income))
      (PP (IN of)
        (NP (NNP Ratan))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNP Rs) (NNP 4500))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (NNP Rs) (CD 3900))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 9300)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (QP (CD 5400) (CD 46)))))))))
'
        };
Submitting expect

*** - GET: 4500 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - GET: 4500 is not a symbol
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [4]>'
        };
$VAR1 = {
          'Batch' => [
                       'The square root of the square root of 0.00000001 is: (a) 0.01 (b) 0.001 (c) 0.0001 (d) 0.00001 47.',
                       '42 oranges are distributed among some boys and girls.',
                       'If each boy gets 3 then each girl gets 6 while each boy gets 5 then each girl gets 3.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 29]: [The, square, root, of, the, square, root, of, 0.00000001, is, :, -LRB-, a, -RRB-, 0.01, -LRB-, b, -RRB-, 0.001, -LRB-, c, -RRB-, 0.0001, -LRB-, d, -RRB-, 0.00001, 47, .]
Parsing [sent. 2 len. 10]: [42, oranges, are, distributed, among, some, boys, and, girls, .]
Parsing [sent. 3 len. 21]: [If, each, boy, gets, 3, then, each, girl, gets, 6, while, each, boy, gets, 5, then, each, girl, gets, 3, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 60 words in 3 sentences (15.87 wds/sec; 0.79 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT The) (JJ square) (NN root))
      (PP (IN of)
        (NP
          (NP (DT the) (JJ square) (NN root))
          (PP (IN of)
            (NP (CD 0.00000001))))))
    (VP (VBZ is) (: :)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNS 0.01))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (CD 0.001))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP
              (NP (CD 0.0001))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 0.00001) (CD 47))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(root-3, The-1)',
                                                       'amod(root-3, square-2)',
                                                       'nsubj(0.01-15, root-3)',
                                                       'det(root-7, the-5)',
                                                       'amod(root-7, square-6)',
                                                       'prep_of(root-3, root-7)',
                                                       'prep_of(root-7, 0.00000001-9)',
                                                       'cop(0.01-15, is-10)',
                                                       'dep(0.01-15, a-13)',
                                                       'dep(0.01-15, b-17)',
                                                       'dep(0.01-15, 0.001-19)',
                                                       'dep(0.001-19, c-21)',
                                                       'dep(0.001-19, 0.0001-23)',
                                                       'dep(0.0001-23, d-25)',
                                                       'number(47-28, 0.00001-27)',
                                                       'num(0.0001-23, 47-28)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (CD 42) (NNS oranges))
    (VP (VBP are)
      (VP (VBN distributed)
        (PP (IN among)
          (NP (DT some) (NNS boys)
            (CC and)
            (NNS girls)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(oranges-2, 42-1)',
                                                       'nsubjpass(distributed-4, oranges-2)',
                                                       'auxpass(distributed-4, are-3)',
                                                       'det(boys-7, some-6)',
                                                       'prep_among(distributed-4, boys-7)',
                                                       'prep_among(distributed-4, girls-9)',
                                                       'conj_and(boys-7, girls-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (SBAR (IN If)
        (S
          (NP (DT each) (NN boy))
          (VP (VBZ gets)
            (NP (CD 3)))))
      (ADVP (RB then))
      (NP (DT each) (NN girl))
      (VP (VBZ gets)
        (NP (CD 6))
        (SBAR (IN while)
          (S
            (NP (DT each) (NN boy))
            (VP (VBZ gets)
              (NP (CD 5))
              (ADVP (RB then)))))))
    (NP (DT each) (NN girl))
    (VP (VBZ gets)
      (NP (CD 3)))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(gets-4, If-1)',
                                                       'det(boy-3, each-2)',
                                                       'nsubj(gets-4, boy-3)',
                                                       'advcl(gets-9, gets-4)',
                                                       'dobj(gets-4, 3-5)',
                                                       'advmod(gets-9, then-6)',
                                                       'det(girl-8, each-7)',
                                                       'nsubj(gets-9, girl-8)',
                                                       'dep(gets-19, gets-9)',
                                                       'dobj(gets-9, 6-10)',
                                                       'mark(gets-14, while-11)',
                                                       'det(boy-13, each-12)',
                                                       'nsubj(gets-14, boy-13)',
                                                       'advcl(gets-9, gets-14)',
                                                       'dobj(gets-14, 5-15)',
                                                       'advmod(gets-14, then-16)',
                                                       'det(girl-18, each-17)',
                                                       'nsubj(gets-19, girl-18)',
                                                       'dobj(gets-19, 3-20)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (JJ square) (NN root))
      (PP (IN of)
        (NP
          (NP (DT the) (JJ square) (NN root))
          (PP (IN of)
            (NP (CD 0\\.00000001))))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNS 0\\.01))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (CD 0\\.001))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP
              (NP (CD 0\\.0001))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 0\\.00001) (CD 47))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (CD 42) (NNS oranges))
    (VP (VBP are)
      (VP (VBN distributed)
        (PP (IN among)
          (NP (DT some) (NNS boys)
            (CC and)
            (NNS girls)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (SBAR (IN If)
        (S
          (NP (DT each) (NN boy))
          (VP (VBZ gets)
            (NP (CD 3)))))
      (ADVP (RB then))
      (NP (DT each) (NN girl))
      (VP (VBZ gets)
        (NP (CD 6))
        (SBAR (IN while)
          (S
            (NP (DT each) (NN boy))
            (VP (VBZ gets)
              (NP (CD 5))
              (ADVP (RB then)))))))
    (NP (DT each) (NN girl))
    (VP (VBZ gets)
      (NP (CD 3)))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (JJ square) (NN root))
      (PP (IN of)
        (NP
          (NP (DT the) (JJ square) (NN root))
          (PP (IN of)
            (NP (CD 0\\.00000001))))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNS 0\\.01))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (CD 0\\.001))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP
              (NP (CD 0\\.0001))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 0\\.00001) (CD 47))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (JJ square) (NN root))
      (PP (IN of)
        (NP
          (NP (DT the) (JJ square) (NN root))
          (PP (IN of)
            (NP (CD 0\\.00000001))))))
    (VP (VBZ is) (\\: \\:)
      (NP
        (NP
          (NP
            (PRN (-LRB- -LRB-)
              (X (SYM a))
              (-RRB- -RRB-))
            (NNS 0\\.01))
          (PRN (-LRB- -LRB-)
            (X (SYM b))
            (-RRB- -RRB-)))
        (NP
          (NP
            (NP (CD 0\\.001))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP
              (NP (CD 0\\.0001))
              (-LRB- -LRB-)
              (NP (SYM d))
              (-RRB- -RRB-))
            (QP (CD 0\\.00001) (CD 47)))))))))
'
        };
Submitting expect

(THE SQUARE ROOT OF THE SQUARE ROOT OF 0.00000001 IS : -LRB- A -RRB- 0.01 -LRB- B -RRB- 0.001 -LRB- C -RRB- 0.0001 -LRB- D -RRB- 0.00001 47)

 A ROOT CAN BE SQUARE.

(NIL (:I (:Q DET ROOT.N) SQUARE.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(THE SQUARE ROOT OF THE SQUARE ROOT OF 0.00000001 IS : -LRB- A -RRB- 0.01 -LRB- B -RRB- 0.001 -LRB- C -RRB- 0.0001 -LRB- D -RRB- 0.00001 47)

 A ROOT CAN BE SQUARE.

(NIL (:I (:Q DET ROOT.N) SQUARE.A))
______________________________________________________________________
[3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (CD 42) (NNS oranges))
    (VP (VBP are)
      (VP (VBN distributed)
        (PP (IN among)
          (NP (DT some) (NNS boys)
            (CC and)
            (NNS girls)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (CD 42) (NNS oranges))
    (VP (VBP are)
      (VP (VBN distributed)
        (PP (IN among)
          (NP (DT some) (NNS boys)
            (CC and)
            (NNS girls))))))))
'
        };
Submitting expect

(42 ORANGES ARE DISTRIBUTED AMONG SOME BOYS AND GIRLS)

 SOME_NUMBER_OF ORANGES MAY BE DISTRIBUTE -ED AMONG SOME_NUMBER_OF BOYS.

((:I (:Q SOME-NUMBER-OF (:F PLUR ORANGE.N)) (:F BE.PASV DISTRIBUTE.V) (:P AMONG.P (:Q SOME-NUMBER-OF (:F PLUR BOY.N)))))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(42 ORANGES ARE DISTRIBUTED AMONG SOME BOYS AND GIRLS)

 SOME_NUMBER_OF ORANGES MAY BE DISTRIBUTE -ED AMONG SOME_NUMBER_OF BOYS.

((:I (:Q SOME-NUMBER-OF (:F PLUR ORANGE.N)) (:F BE.PASV DISTRIBUTE.V) (:P AMONG.P (:Q SOME-NUMBER-OF (:F PLUR BOY.N)))))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (SBAR (IN If)
        (S
          (NP (DT each) (NN boy))
          (VP (VBZ gets)
            (NP (CD 3)))))
      (ADVP (RB then))
      (NP (DT each) (NN girl))
      (VP (VBZ gets)
        (NP (CD 6))
        (SBAR (IN while)
          (S
            (NP (DT each) (NN boy))
            (VP (VBZ gets)
              (NP (CD 5))
              (ADVP (RB then)))))))
    (NP (DT each) (NN girl))
    (VP (VBZ gets)
      (NP (CD 3)))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (SBAR (IN If)
        (S
          (NP (DT each) (NN boy))
          (VP (VBZ gets)
            (NP (CD 3)))))
      (ADVP (RB then))
      (NP (DT each) (NN girl))
      (VP (VBZ gets)
        (NP (CD 6))
        (SBAR (IN while)
          (S
            (NP (DT each) (NN boy))
            (VP (VBZ gets)
              (NP (CD 5))
              (ADVP (RB then)))))))
    (NP (DT each) (NN girl))
    (VP (VBZ gets)
      (NP (CD 3))))))
'
        };
Submitting expect

(IF EACH BOY GETS 3 THEN EACH GIRL GETS 6 WHILE EACH BOY GETS 5 THEN EACH GIRL GETS 3)

 SOME_NUMBER_OF GIRL MAY GET SOME NUMBER_OR_PORTION.
 SOME_NUMBER_OF BOY MAY GET SOME NUMBER_OR_PORTION.

((:I (:Q SOME-NUMBER-OF GIRL.N) GET.V (:Q SOME NUMBER-OR-PORTION.N)) (:I (:Q SOME-NUMBER-OF BOY.N) GET.V (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(IF EACH BOY GETS 3 THEN EACH GIRL GETS 6 WHILE EACH BOY GETS 5 THEN EACH GIRL GETS 3)

 SOME_NUMBER_OF GIRL MAY GET SOME NUMBER_OR_PORTION.
 SOME_NUMBER_OF BOY MAY GET SOME NUMBER_OR_PORTION.

((:I (:Q SOME-NUMBER-OF GIRL.N) GET.V (:Q SOME NUMBER-OR-PORTION.N)) (:I (:Q SOME-NUMBER-OF BOY.N) GET.V (:Q SOME NUMBER-OR-PORTION.N)))
______________________________________________________________________
[5]>'
        };
$VAR1 = {
          'Batch' => [
                       'The number of girls is: (a) 2 (b) 4 (c) 6 (d) 8 48.',
                       'An alloy contains zinc and copper in the ratio 5 : 3.',
                       'The quantity of zinc to be mixed with 16 kg of the alloy so that 50.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 24]: [The, number, of, girls, is, :, -LRB-, a, -RRB-, 2, -LRB-, b, -RRB-, 4, -LRB-, c, -RRB-, 6, -LRB-, d, -RRB-, 8, 48, .]
Parsing [sent. 2 len. 13]: [An, alloy, contains, zinc, and, copper, in, the, ratio, 5, :, 3, .]
Parsing [sent. 3 len. 17]: [The, quantity, of, zinc, to, be, mixed, with, 16, kg, of, the, alloy, so, that, 50, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 54 words in 3 sentences (19.44 wds/sec; 1.08 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP
        (NP (DT The) (NN number))
        (PP (IN of)
          (NP (NNS girls))))
      (VP (VBZ is)))
    (: :)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP (CD 4))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (ADJP (CD 8) (CD 48)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(number-2, The-1)',
                                                       'nsubj(is-5, number-2)',
                                                       'prep_of(number-2, girls-4)',
                                                       'dep(-RRB--9, a-8)',
                                                       'nsubj(b-12, 2-10)',
                                                       'parataxis(is-5, b-12)',
                                                       'dobj(b-12, 4-14)',
                                                       'dep(4-14, c-16)',
                                                       'dep(4-14, 6-18)',
                                                       'appos(4-14, d-20)',
                                                       'number(48-23, 8-22)',
                                                       'amod(4-14, 48-23)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT An) (NN alloy))
    (VP (VBZ contains)
      (NP (NN zinc)
        (CC and)
        (NN copper))
      (PP (IN in)
        (NP
          (NP (DT the) (NN ratio))
          (NP (CD 5) (: :) (CD 3)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(alloy-2, An-1)',
                                                       'nsubj(contains-3, alloy-2)',
                                                       'dobj(contains-3, zinc-4)',
                                                       'dobj(contains-3, copper-6)',
                                                       'conj_and(zinc-4, copper-6)',
                                                       'det(ratio-9, the-8)',
                                                       'prep_in(contains-3, ratio-9)',
                                                       'num(3-12, 5-10)',
                                                       'dep(ratio-9, 3-12)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(NP
    (NP (DT The) (NN quantity))
    (PP (IN of)
      (NP (NN zinc)))
    (S
      (VP (TO to)
        (VP (VB be)
          (ADJP (JJ mixed))
          (PP (IN with)
            (NP
              (NP (CD 16) (NN kg))
              (PP (IN of)
                (NP (DT the) (NN alloy)))))
          (SBAR
            (ADVP (RB so))
            (IN that)
            (FRAG
              (NP (CD 50)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(quantity-2, The-1)',
                                                       'prep_of(quantity-2, zinc-4)',
                                                       'aux(mixed-7, to-5)',
                                                       'cop(mixed-7, be-6)',
                                                       'infmod(quantity-2, mixed-7)',
                                                       'num(kg-10, 16-9)',
                                                       'prep_with(mixed-7, kg-10)',
                                                       'det(alloy-13, the-12)',
                                                       'prep_of(kg-10, alloy-13)',
                                                       'advmod(50-16, so-14)',
                                                       'dep(50-16, that-15)',
                                                       'dep(mixed-7, 50-16)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (S
      (NP
        (NP (DT The) (NN number))
        (PP (IN of)
          (NP (NNS girls))))
      (VP (VBZ is)))
    (\\: \\:)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP (CD 4))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (ADJP (CD 8) (CD 48)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (DT An) (NN alloy))
    (VP (VBZ contains)
      (NP (NN zinc)
        (CC and)
        (NN copper))
      (PP (IN in)
        (NP
          (NP (DT the) (NN ratio))
          (NP (CD 5) (\\: \\:) (CD 3)))))))'
        };
$VAR1 = {
          'Tree' => '((NP
    (NP (DT The) (NN quantity))
    (PP (IN of)
      (NP (NN zinc)))
    (S
      (VP (TO to)
        (VP (VB be)
          (ADJP (JJ mixed))
          (PP (IN with)
            (NP
              (NP (CD 16) (NN kg))
              (PP (IN of)
                (NP (DT the) (NN alloy)))))
          (SBAR
            (ADVP (RB so))
            (IN that)
            (FRAG
              (NP (CD 50)))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP
        (NP (DT The) (NN number))
        (PP (IN of)
          (NP (NNS girls))))
      (VP (VBZ is)))
    (\\: \\:)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP (CD 4))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (ADJP (CD 8) (CD 48)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP
        (NP (DT The) (NN number))
        (PP (IN of)
          (NP (NNS girls))))
      (VP (VBZ is)))
    (\\: \\:)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (CD 2))
      (VP (-LRB- -LRB-) (VBD b) (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP (CD 4))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-))
              (NP (CD 6)))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-)))
          (ADJP (CD 8) (CD 48))))))))
'
        };
Submitting expect

(THE NUMBER OF GIRLS IS : -LRB- A -RRB- 2 -LRB- B -RRB- 4 -LRB- C -RRB- 6 -LRB- D -RRB- 8 48)

 A NUMBER OF GIRLS MAY BE.

((:I (:A (:Q THE NUMBER.N) (:P OF.P (:F K (:F PLUR GIRL.N)))) BE.V) NIL)
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE NUMBER OF GIRLS IS : -LRB- A -RRB- 2 -LRB- B -RRB- 4 -LRB- C -RRB- 6 -LRB- D -RRB- 8 48)

 A NUMBER OF GIRLS MAY BE.

((:I (:A (:Q THE NUMBER.N) (:P OF.P (:F K (:F PLUR GIRL.N)))) BE.V) NIL)
______________________________________________________________________
[6]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT An) (NN alloy))
    (VP (VBZ contains)
      (NP (NN zinc)
        (CC and)
        (NN copper))
      (PP (IN in)
        (NP
          (NP (DT the) (NN ratio))
          (NP (CD 5) (\\: \\:) (CD 3)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT An) (NN alloy))
    (VP (VBZ contains)
      (NP (NN zinc)
        (CC and)
        (NN copper))
      (PP (IN in)
        (NP
          (NP (DT the) (NN ratio))
          (NP (CD 5) (\\: \\:) (CD 3))))))))
'
        };
Submitting expect

(AN ALLOY CONTAINS ZINC AND COPPER IN THE RATIO 5 : 3)

 AN ALLOY MAY CONTAIN ZINC.

((:I (:Q A{N} ALLOY.N) CONTAIN.V (:F K ZINC.N)))
______________________________________________________________________
[7]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(AN ALLOY CONTAINS ZINC AND COPPER IN THE RATIO 5 : 3)

 AN ALLOY MAY CONTAIN ZINC.

((:I (:Q A{N} ALLOY.N) CONTAIN.V (:F K ZINC.N)))
______________________________________________________________________
[7]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((NP
    (NP (DT The) (NN quantity))
    (PP (IN of)
      (NP (NN zinc)))
    (S
      (VP (TO to)
        (VP (VB be)
          (ADJP (JJ mixed))
          (PP (IN with)
            (NP
              (NP (CD 16) (NN kg))
              (PP (IN of)
                (NP (DT the) (NN alloy)))))
          (SBAR
            (ADVP (RB so))
            (IN that)
            (FRAG
              (NP (CD 50)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((NP
    (NP (DT The) (NN quantity))
    (PP (IN of)
      (NP (NN zinc)))
    (S
      (VP (TO to)
        (VP (VB be)
          (ADJP (JJ mixed))
          (PP (IN with)
            (NP
              (NP (CD 16) (NN kg))
              (PP (IN of)
                (NP (DT the) (NN alloy)))))
          (SBAR
            (ADVP (RB so))
            (IN that)
            (FRAG
              (NP (CD 50))))))))))
'
        };
Submitting expect

(THE QUANTITY OF ZINC TO BE MIXED WITH 16 KG OF THE ALLOY SO THAT 50)

 AN ALLOY MAY HAVE A KG.

(NIL (:I (:Q DET ALLOY.N) HAVE.V (:Q DET KG.N)))
______________________________________________________________________
[8]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE QUANTITY OF ZINC TO BE MIXED WITH 16 KG OF THE ALLOY SO THAT 50)

 AN ALLOY MAY HAVE A KG.

(NIL (:I (:Q DET ALLOY.N) HAVE.V (:Q DET KG.N)))
______________________________________________________________________
[8]>'
        };
$VAR1 = {
          'Batch' => [
                       'A railway train travels 66 km in 1 hrs.',
                       'Its speed in 2 metre/min is: (a) 733 1 3 (b) 703 1 3 (c) 710 1 3 (d) 337 1 3 51.',
                       'The missing number marked as ___ in the series 5, 13, 9, 17, 13, 21, ___ is: (a) 29 (b) 25 (c) 13 (d) 17 52.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 10]: [A, railway, train, travels, 66, km, in, 1, hrs, .]
Parsing [sent. 2 len. 33]: [Its, speed, in, 2, metre\/min, is, :, -LRB-, a, -RRB-, 733, 1, 3, -LRB-, b, -RRB-, 703, 1, 3, -LRB-, c, -RRB-, 710, 1, 3, -LRB-, d, -RRB-, 337, 1, 3, 51, .]
Parsing [sent. 3 len. 42]: [The, missing, number, marked, as, ___, in, the, series, 5, ,, 13, ,, 9, ,, 17, ,, 13, ,, 21, ,, ___, is, :, -LRB-, a, -RRB-, 29, -LRB-, b, -RRB-, 25, -LRB-, c, -RRB-, 13, -LRB-, d, -RRB-, 17, 52, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 85 words in 3 sentences (16.21 wds/sec; 0.57 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT A) (NN railway) (NN train))
    (VP (VBZ travels)
      (NP
        (NP (CD 66) (NN km))
        (PP (IN in)
          (NP (CD 1) (NN hrs)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(train-3, A-1)',
                                                       'nn(train-3, railway-2)',
                                                       'nsubj(travels-4, train-3)',
                                                       'num(km-6, 66-5)',
                                                       'dobj(travels-4, km-6)',
                                                       'num(hrs-9, 1-8)',
                                                       'prep_in(km-6, hrs-9)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (NP
        (NP (PRP$ Its) (NN speed))
        (PP (IN in)
          (NP (CD 2) (NN metre\\/min))))
      (VP (VBZ is)))
    (: :)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 733))
          (PP
            (NP
              (NP
                (QP (CD 1) (CD 3)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP
                  (QP (CD 703) (CD 1))
                  (CD 3))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (VP (VBG 710)
                (NP
                  (QP (CD 1) (CD 3)))))))
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (VP (VBZ 337)
        (NP
          (QP (CD 1) (CD 3))
          (CD 51))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'poss(speed-2, Its-1)',
                                                       'nsubj(is-6, speed-2)',
                                                       'num(metre\\/min-5, 2-4)',
                                                       'prep_in(speed-2, metre\\/min-5)',
                                                       'dep(-RRB--10, a-9)',
                                                       'nsubj(337-29, 733-11)',
                                                       'number(3-13, 1-12)',
                                                       'prep(733-11, 3-13)',
                                                       'dep(3-13, b-15)',
                                                       'number(1-18, 703-17)',
                                                       'num(3-19, 1-18)',
                                                       'dep(3-13, 3-19)',
                                                       'dep(3-19, c-21)',
                                                       'partmod(3-19, 710-23)',
                                                       'number(3-25, 1-24)',
                                                       'dobj(710-23, 3-25)',
                                                       'appos(733-11, d-27)',
                                                       'parataxis(is-6, 337-29)',
                                                       'number(3-31, 1-30)',
                                                       'num(51-32, 3-31)',
                                                       'dobj(337-29, 51-32)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (DT The) (VBG missing) (NN number))
    (VP (VBD marked)
      (SBAR (IN as)
        (S
          (NP
            (NP (NNP ___))
            (PP (IN in)
              (NP (DT the) (NN series))))
          (NP
            (NP (CD 5))
            (, ,)
            (NP (CD 13))
            (, ,)
            (NP (CD 9))
            (, ,)
            (NP (CD 17))
            (, ,)
            (NP (CD 13))
            (, ,)
            (NP (CD 21))
            (, ,))
          (ADVP (RB ___))
          (VP (VBZ is))))
      (: :)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD 29))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 25)))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 13)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 17) (CD 52)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(number-3, The-1)',
                                                       'amod(number-3, missing-2)',
                                                       'nsubj(marked-4, number-3)',
                                                       'mark(is-23, as-5)',
                                                       'nsubj(is-23, ___-6)',
                                                       'det(series-9, the-8)',
                                                       'prep_in(___-6, series-9)',
                                                       'nsubj(is-23, 5-10)',
                                                       'appos(5-10, 13-12)',
                                                       'appos(5-10, 9-14)',
                                                       'appos(5-10, 17-16)',
                                                       'appos(5-10, 13-18)',
                                                       'appos(5-10, 21-20)',
                                                       'advmod(is-23, ___-22)',
                                                       'advcl(marked-4, is-23)',
                                                       'dep(29-28, a-26)',
                                                       'parataxis(marked-4, 29-28)',
                                                       'dep(29-28, b-30)',
                                                       'dep(29-28, 25-32)',
                                                       'dep(29-28, c-34)',
                                                       'dep(29-28, 13-36)',
                                                       'dep(29-28, d-38)',
                                                       'num(52-41, 17-40)',
                                                       'dep(29-28, 52-41)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (DT A) (NN railway) (NN train))
    (VP (VBZ travels)
      (NP
        (NP (CD 66) (NN km))
        (PP (IN in)
          (NP (CD 1) (NN hrs)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (NP
        (NP (PRP$ Its) (NN speed))
        (PP (IN in)
          (NP (CD 2) (NN metre\\\\/min))))
      (VP (VBZ is)))
    (\\: \\:)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 733))
          (PP
            (NP
              (NP
                (QP (CD 1) (CD 3)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP
                  (QP (CD 703) (CD 1))
                  (CD 3))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (VP (VBG 710)
                (NP
                  (QP (CD 1) (CD 3)))))))
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (VP (VBZ 337)
        (NP
          (QP (CD 1) (CD 3))
          (CD 51))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP (DT The) (VBG missing) (NN number))
    (VP (VBD marked)
      (SBAR (IN as)
        (S
          (NP
            (NP (NNP ___))
            (PP (IN in)
              (NP (DT the) (NN series))))
          (NP
            (NP (CD 5))
            (\\, \\,)
            (NP (CD 13))
            (\\, \\,)
            (NP (CD 9))
            (\\, \\,)
            (NP (CD 17))
            (\\, \\,)
            (NP (CD 13))
            (\\, \\,)
            (NP (CD 21))
            (\\, \\,))
          (ADVP (RB ___))
          (VP (VBZ is))))
      (\\: \\:)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD 29))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 25)))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 13)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 17) (CD 52)))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT A) (NN railway) (NN train))
    (VP (VBZ travels)
      (NP
        (NP (CD 66) (NN km))
        (PP (IN in)
          (NP (CD 1) (NN hrs)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT A) (NN railway) (NN train))
    (VP (VBZ travels)
      (NP
        (NP (CD 66) (NN km))
        (PP (IN in)
          (NP (CD 1) (NN hrs))))))))
'
        };
Submitting expect

(A RAILWAY TRAIN TRAVELS 66 KM IN 1 HRS)

 A RAILWAY TRAIN MAY TRAVEL SOME_NUMBER_OF KM.
 SOME_NUMBER_OF KM CAN BE IN SOME_NUMBER_OF HRS.

((:I (:Q A{N} (:F NN RAILWAY.N TRAIN.N)) TRAVEL.V (:Q SOME-NUMBER-OF KM.N)) (:I (:Q SOME-NUMBER-OF KM.N) IN.P (:Q SOME-NUMBER-OF HRS.N)))
______________________________________________________________________
[9]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(A RAILWAY TRAIN TRAVELS 66 KM IN 1 HRS)

 A RAILWAY TRAIN MAY TRAVEL SOME_NUMBER_OF KM.
 SOME_NUMBER_OF KM CAN BE IN SOME_NUMBER_OF HRS.

((:I (:Q A{N} (:F NN RAILWAY.N TRAIN.N)) TRAVEL.V (:Q SOME-NUMBER-OF KM.N)) (:I (:Q SOME-NUMBER-OF KM.N) IN.P (:Q SOME-NUMBER-OF HRS.N)))
______________________________________________________________________
[9]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (NP
        (NP (PRP$ Its) (NN speed))
        (PP (IN in)
          (NP (CD 2) (NN metre\\\\/min))))
      (VP (VBZ is)))
    (\\: \\:)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 733))
          (PP
            (NP
              (NP
                (QP (CD 1) (CD 3)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP
                  (QP (CD 703) (CD 1))
                  (CD 3))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (VP (VBG 710)
                (NP
                  (QP (CD 1) (CD 3)))))))
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (VP (VBZ 337)
        (NP
          (QP (CD 1) (CD 3))
          (CD 51))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (NP
        (NP (PRP$ Its) (NN speed))
        (PP (IN in)
          (NP (CD 2) (NN metre\\\\/min))))
      (VP (VBZ is)))
    (\\: \\:)
    (S
      (NP
        (NP
          (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
          (NP (CD 733))
          (PP
            (NP
              (NP
                (QP (CD 1) (CD 3)))
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-)))
            (NP
              (NP
                (NP
                  (QP (CD 703) (CD 1))
                  (CD 3))
                (PRN (-LRB- -LRB-)
                  (X (SYM c))
                  (-RRB- -RRB-)))
              (VP (VBG 710)
                (NP
                  (QP (CD 1) (CD 3)))))))
        (PRN (-LRB- -LRB-)
          (NP (NNP d))
          (-RRB- -RRB-)))
      (VP (VBZ 337)
        (NP
          (QP (CD 1) (CD 3))
          (CD 51)))))))
'
        };
Submitting expect

*** - STRING: argument 710 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [10]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 710 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [10]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (DT The) (VBG missing) (NN number))
    (VP (VBD marked)
      (SBAR (IN as)
        (S
          (NP
            (NP (NNP ___))
            (PP (IN in)
              (NP (DT the) (NN series))))
          (NP
            (NP (CD 5))
            (\\, \\,)
            (NP (CD 13))
            (\\, \\,)
            (NP (CD 9))
            (\\, \\,)
            (NP (CD 17))
            (\\, \\,)
            (NP (CD 13))
            (\\, \\,)
            (NP (CD 21))
            (\\, \\,))
          (ADVP (RB ___))
          (VP (VBZ is))))
      (\\: \\:)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD 29))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 25)))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 13)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 17) (CD 52)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (DT The) (VBG missing) (NN number))
    (VP (VBD marked)
      (SBAR (IN as)
        (S
          (NP
            (NP (NNP ___))
            (PP (IN in)
              (NP (DT the) (NN series))))
          (NP
            (NP (CD 5))
            (\\, \\,)
            (NP (CD 13))
            (\\, \\,)
            (NP (CD 9))
            (\\, \\,)
            (NP (CD 17))
            (\\, \\,)
            (NP (CD 13))
            (\\, \\,)
            (NP (CD 21))
            (\\, \\,))
          (ADVP (RB ___))
          (VP (VBZ is))))
      (\\: \\:)
      (S (-LRB- -LRB-)
        (NP (SYM a))
        (-RRB- -RRB-)
        (NP
          (NP
            (NP
              (NP
                (NP (CD 29))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-))
                (NP (CD 25)))
              (PRN (-LRB- -LRB-)
                (X (SYM c))
                (-RRB- -RRB-)))
            (NP (CD 13)))
          (PRN (-LRB- -LRB-)
            (VP (VBN d))
            (-RRB- -RRB-))
          (NP (CD 17) (CD 52))))))))
'
        };
Submitting expect

(THE MISSING NUMBER MARKED AS ___ IN THE SERIES 5 , 13 , 9 , 17 , 13 , 21 , ___ IS : -LRB- A -RRB- 29 -LRB- B -RRB- 25 -LRB- C -RRB- 13 -LRB- D
 -RRB- 17 52)

 A NUMBER CAN BE MISSING.
 A ___[PERSON??] MAY BE.
 A ___[PERSON??] CAN BE IN A SERIES.

((:I (:Q DET NUMBER.N) MISSING.A) (:I (:Q DET ___.NAME) BE.V) (:I (:Q DET ___.NAME) IN.P (:Q THE SERIES.N)))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(THE MISSING NUMBER MARKED AS ___ IN THE SERIES 5 , 13 , 9 , 17 , 13 , 21 , ___ IS : -LRB- A -RRB- 29 -LRB- B -RRB- 25 -LRB- C -RRB- 13 -LRB- D
 -RRB- 17 52)

 A NUMBER CAN BE MISSING.
 A ___[PERSON??] MAY BE.
 A ___[PERSON??] CAN BE IN A SERIES.

((:I (:Q DET NUMBER.N) MISSING.A) (:I (:Q DET ___.NAME) BE.V) (:I (:Q DET ___.NAME) IN.P (:Q THE SERIES.N)))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       'The compound interest for two years on a capital is Rs two more than the simple interest for the same period.',
                       'If the rate of interest is 5% per year, then the capital would be: (a) Rs 800 (b) Rs 840 (c) Rs 880 (d) Rs 882 53.',
                       'An amount on compound interest becomes double in four years.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.8 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 22]: [The, compound, interest, for, two, years, on, a, capital, is, Rs, two, more, than, the, simple, interest, for, the, same, period, .]
Parsing [sent. 2 len. 39]: [If, the, rate, of, interest, is, 5, %, per, year, ,, then, the, capital, would, be, :, -LRB-, a, -RRB-, Rs, 800, -LRB-, b, -RRB-, Rs, 840, -LRB-, c, -RRB-, Rs, 880, -LRB-, d, -RRB-, Rs, 882, 53, .]
Parsing [sent. 3 len. 11]: [An, amount, on, compound, interest, becomes, double, in, four, years, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 72 words in 3 sentences (16.22 wds/sec; 0.68 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT The) (JJ compound) (NN interest))
      (PP (IN for)
        (NP
          (NP (CD two) (NNS years))
          (PP (IN on)
            (NP (DT a) (NN capital))))))
    (VP (VBZ is)
      (VP (VBN Rs)
        (PP
          (ADVP
            (NP (CD two))
            (RBR more))
          (IN than)
          (NP
            (NP (DT the) (JJ simple) (NN interest))
            (PP (IN for)
              (NP (DT the) (JJ same) (NN period)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(interest-3, The-1)',
                                                       'amod(interest-3, compound-2)',
                                                       'nsubjpass(Rs-11, interest-3)',
                                                       'num(years-6, two-5)',
                                                       'prep_for(interest-3, years-6)',
                                                       'det(capital-9, a-8)',
                                                       'prep_on(years-6, capital-9)',
                                                       'auxpass(Rs-11, is-10)',
                                                       'npadvmod(more-13, two-12)',
                                                       'advmod(Rs-11, more-13)',
                                                       'det(interest-17, the-15)',
                                                       'amod(interest-17, simple-16)',
                                                       'prep_than(Rs-11, interest-17)',
                                                       'det(period-21, the-19)',
                                                       'amod(period-21, same-20)',
                                                       'prep_for(interest-17, period-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP (DT the) (NN rate))
            (PP (IN of)
              (NP (NN interest))))
          (VP (VBZ is)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN year)))))))
      (, ,)
      (ADVP (RB then))
      (NP (DT the) (NN capital))
      (VP (MD would)
        (VP (VB be))))
    (: :)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNP Rs))
      (VP (VBZ 800)
        (NP
          (NP
            (NP
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NNP Rs) (NNP 840))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 880)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (NP (CD 882) (CD 53))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(%-8, If-1)',
                                                       'det(rate-3, the-2)',
                                                       'nsubj(%-8, rate-3)',
                                                       'prep_of(rate-3, interest-5)',
                                                       'cop(%-8, is-6)',
                                                       'num(%-8, 5-7)',
                                                       'advcl(be-16, %-8)',
                                                       'prep_per(%-8, year-10)',
                                                       'advmod(be-16, then-12)',
                                                       'det(capital-14, the-13)',
                                                       'nsubj(be-16, capital-14)',
                                                       'aux(be-16, would-15)',
                                                       'dep(-RRB--20, a-19)',
                                                       'nsubj(800-22, Rs-21)',
                                                       'parataxis(be-16, 800-22)',
                                                       'dep(840-27, b-24)',
                                                       'nn(840-27, Rs-26)',
                                                       'dobj(800-22, 840-27)',
                                                       'iobj(800-22, 840-27)',
                                                       'dep(840-27, c-29)',
                                                       'nn(Rs-36, Rs-31)',
                                                       'nn(Rs-36, 880-32)',
                                                       'appos(Rs-36, d-34)',
                                                       'dobj(800-22, Rs-36)',
                                                       'dep(840-27, Rs-36)',
                                                       'num(53-38, 882-37)',
                                                       'dep(Rs-36, 53-38)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (DT An) (NN amount))
      (PP (IN on)
        (NP (JJ compound) (NN interest))))
    (VP (VBZ becomes)
      (NP (VB double))
      (PP (IN in)
        (NP (CD four) (NNS years))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'det(amount-2, An-1)',
                                                       'nsubj(double-7, amount-2)',
                                                       'amod(interest-5, compound-4)',
                                                       'prep_on(amount-2, interest-5)',
                                                       'cop(double-7, becomes-6)',
                                                       'num(years-10, four-9)',
                                                       'prep_in(double-7, years-10)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT The) (JJ compound) (NN interest))
      (PP (IN for)
        (NP
          (NP (CD two) (NNS years))
          (PP (IN on)
            (NP (DT a) (NN capital))))))
    (VP (VBZ is)
      (VP (VBN Rs)
        (PP
          (ADVP
            (NP (CD two))
            (RBR more))
          (IN than)
          (NP
            (NP (DT the) (JJ simple) (NN interest))
            (PP (IN for)
              (NP (DT the) (JJ same) (NN period)))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP (DT the) (NN rate))
            (PP (IN of)
              (NP (NN interest))))
          (VP (VBZ is)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN year)))))))
      (\\, \\,)
      (ADVP (RB then))
      (NP (DT the) (NN capital))
      (VP (MD would)
        (VP (VB be))))
    (\\: \\:)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNP Rs))
      (VP (VBZ 800)
        (NP
          (NP
            (NP
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NNP Rs) (NNP 840))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 880)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (NP (CD 882) (CD 53))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (DT An) (NN amount))
      (PP (IN on)
        (NP (JJ compound) (NN interest))))
    (VP (VBZ becomes)
      (NP (VB double))
      (PP (IN in)
        (NP (CD four) (NNS years))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT The) (JJ compound) (NN interest))
      (PP (IN for)
        (NP
          (NP (CD two) (NNS years))
          (PP (IN on)
            (NP (DT a) (NN capital))))))
    (VP (VBZ is)
      (VP (VBN Rs)
        (PP
          (ADVP
            (NP (CD two))
            (RBR more))
          (IN than)
          (NP
            (NP (DT the) (JJ simple) (NN interest))
            (PP (IN for)
              (NP (DT the) (JJ same) (NN period)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT The) (JJ compound) (NN interest))
      (PP (IN for)
        (NP
          (NP (CD two) (NNS years))
          (PP (IN on)
            (NP (DT a) (NN capital))))))
    (VP (VBZ is)
      (VP (VBN Rs)
        (PP
          (ADVP
            (NP (CD two))
            (RBR more))
          (IN than)
          (NP
            (NP (DT the) (JJ simple) (NN interest))
            (PP (IN for)
              (NP (DT the) (JJ same) (NN period))))))))))
'
        };
Submitting expect

(THE COMPOUND INTEREST FOR TWO YEARS ON A CAPITAL IS RS TWO MORE THAN THE SIMPLE INTEREST FOR THE SAME PERIOD)

 INTEREST MAY BE RS -ED.
 INTEREST CAN BE FOR SOME_NUMBER_OF YEARS.
 INTEREST CAN BE COMPOUND.
 SOME_NUMBER_OF YEARS CAN BE ON A CAPITAL.
 INTEREST CAN BE FOR A PERIOD.
 INTEREST CAN BE SIMPLE.

((:I (:Q THE INTEREST.N) (:F BE.PASV RS.V)) (:I (:Q THE INTEREST.N) FOR.P (:Q SOME-NUMBER-OF (:F PLUR YEAR.N))) (:I (:Q DET INTEREST.N) COMPOUND.A)
 (:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) ON.P (:Q A{N} CAPITAL.N)) (:I (:Q THE INTEREST.N) FOR.P (:Q THE PERIOD.N))
 (:I (:Q DET INTEREST.N) SIMPLE.A))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(THE COMPOUND INTEREST FOR TWO YEARS ON A CAPITAL IS RS TWO MORE THAN THE SIMPLE INTEREST FOR THE SAME PERIOD)

 INTEREST MAY BE RS -ED.
 INTEREST CAN BE FOR SOME_NUMBER_OF YEARS.
 INTEREST CAN BE COMPOUND.
 SOME_NUMBER_OF YEARS CAN BE ON A CAPITAL.
 INTEREST CAN BE FOR A PERIOD.
 INTEREST CAN BE SIMPLE.

((:I (:Q THE INTEREST.N) (:F BE.PASV RS.V)) (:I (:Q THE INTEREST.N) FOR.P (:Q SOME-NUMBER-OF (:F PLUR YEAR.N))) (:I (:Q DET INTEREST.N) COMPOUND.A)
 (:I (:Q SOME-NUMBER-OF (:F PLUR YEAR.N)) ON.P (:Q A{N} CAPITAL.N)) (:I (:Q THE INTEREST.N) FOR.P (:Q THE PERIOD.N))
 (:I (:Q DET INTEREST.N) SIMPLE.A))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP (DT the) (NN rate))
            (PP (IN of)
              (NP (NN interest))))
          (VP (VBZ is)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN year)))))))
      (\\, \\,)
      (ADVP (RB then))
      (NP (DT the) (NN capital))
      (VP (MD would)
        (VP (VB be))))
    (\\: \\:)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNP Rs))
      (VP (VBZ 800)
        (NP
          (NP
            (NP
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NNP Rs) (NNP 840))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 880)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (NP (CD 882) (CD 53))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (S
      (SBAR (IN If)
        (S
          (NP
            (NP (DT the) (NN rate))
            (PP (IN of)
              (NP (NN interest))))
          (VP (VBZ is)
            (NP
              (NP (CD 5) (NN %))
              (PP (IN per)
                (NP (NN year)))))))
      (\\, \\,)
      (ADVP (RB then))
      (NP (DT the) (NN capital))
      (VP (MD would)
        (VP (VB be))))
    (\\: \\:)
    (S
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (NP (NNP Rs))
      (VP (VBZ 800)
        (NP
          (NP
            (NP
              (PRN (-LRB- -LRB-)
                (X (SYM b))
                (-RRB- -RRB-))
              (NNP Rs) (NNP 840))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-)))
          (NP
            (NP (NNP Rs) (NNP 880)
              (PRN (-LRB- -LRB-)
                (NP (NNP d))
                (-RRB- -RRB-))
              (NNP Rs))
            (NP (CD 882) (CD 53)))))))))
'
        };
Submitting expect

*** - STRING: argument 800 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - STRING: argument 800 should be a string, a symbol or a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (DT An) (NN amount))
      (PP (IN on)
        (NP (JJ compound) (NN interest))))
    (VP (VBZ becomes)
      (NP (VB double))
      (PP (IN in)
        (NP (CD four) (NNS years))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (DT An) (NN amount))
      (PP (IN on)
        (NP (JJ compound) (NN interest))))
    (VP (VBZ becomes)
      (NP (VB double))
      (PP (IN in)
        (NP (CD four) (NNS years)))))))
'
        };
Submitting expect

(AN AMOUNT ON COMPOUND INTEREST BECOMES DOUBLE IN FOUR YEARS)

 AN AMOUNT CAN BE ON INTEREST.
 INTEREST CAN BE COMPOUND.

((:I (:Q A{N} AMOUNT.N) ON.P (:F K INTEREST.N)) (:I (:Q DET INTEREST.N) COMPOUND.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(AN AMOUNT ON COMPOUND INTEREST BECOMES DOUBLE IN FOUR YEARS)

 AN AMOUNT CAN BE ON INTEREST.
 INTEREST CAN BE COMPOUND.

((:I (:Q A{N} AMOUNT.N) ON.P (:F K INTEREST.N)) (:I (:Q DET INTEREST.N) COMPOUND.A))
______________________________________________________________________
[3]>'
        };
$VAR1 = {
          'Batch' => [
                       'It will become eight times in: (a) 8 years (b) 12 years (c) 16 years (d) 20 years 54.',
                       'Twenty litres of a mixture contains milk and water in the ratio of 5 : 3.',
                       'If four litres of this mixture is replaced by four litres of milk, then the ratio of milk to water in the new mixture will be: (a) 5 : 3 (b) 4 : 3 (c) 7 : 3 (d) 2 : 3 ANSWERS AND EXPLANATIONS 1.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [3.0 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 29]: [It, will, become, eight, times, in, :, -LRB-, a, -RRB-, 8, years, -LRB-, b, -RRB-, 12, years, -LRB-, c, -RRB-, 16, years, -LRB-, d, -RRB-, 20, years, 54, .]
Parsing [sent. 2 len. 17]: [Twenty, litres, of, a, mixture, contains, milk, and, water, in, the, ratio, of, 5, :, 3, .]
Parsing [sent. 3 len. 57]: [If, four, litres, of, this, mixture, is, replaced, by, four, litres, of, milk, ,, then, the, ratio, of, milk, to, water, in, the, new, mixture, will, be, :, -LRB-, a, -RRB-, 5, :, 3, -LRB-, b, -RRB-, 4, :, 3, -LRB-, c, -RRB-, 7, :, 3, -LRB-, d, -RRB-, 2, :, 3, ANSWERS, AND, EXPLANATIONS, 1, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 103 words in 3 sentences (7.81 wds/sec; 0.23 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP (PRP It))
    (VP (MD will)
      (VP (VB become)
        (NP
          (NP
            (NP (CD eight) (NNS times))
            (PP (IN in)))
          (: :)
          (NP
            (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
            (NP (CD 8))
            (PP
              (NP
                (NP (NNS years))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (NP
                (NP
                  (NP
                    (NP (CD 12) (NNS years)
                      (PRN (-LRB- -LRB-)
                        (X (SYM c))
                        (-RRB- -RRB-)))
                    (NP (CD 16) (NNS years)))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN d))
                    (-RRB- -RRB-)))
                (ADJP
                  (NP (CD 20) (NNS years))
                  (JJ 54))))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'nsubj(times-5, It-1)',
                                                       'aux(times-5, will-2)',
                                                       'cop(times-5, become-3)',
                                                       'num(times-5, eight-4)',
                                                       'prep(times-5, in-6)',
                                                       'dep(-RRB--10, a-9)',
                                                       'dep(times-5, 8-11)',
                                                       'prep(8-11, years-12)',
                                                       'dep(years-12, b-14)',
                                                       'num(years-17, 12-16)',
                                                       'dep(years-12, years-17)',
                                                       'dep(years-17, c-19)',
                                                       'num(years-22, 16-21)',
                                                       'dep(years-17, years-22)',
                                                       'dep(years-17, d-24)',
                                                       'num(years-27, 20-26)',
                                                       'tmod(54-28, years-27)',
                                                       'amod(years-17, 54-28)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (NP
      (NP (CD Twenty) (NNS litres))
      (PP (IN of)
        (NP (DT a) (NN mixture))))
    (VP (VBZ contains)
      (NP
        (NP
          (NP (NN milk)
            (CC and)
            (NN water))
          (PP (IN in)
            (NP
              (NP (DT the) (NN ratio))
              (PP (IN of)
                (NP (CD 5))))))
        (: :)
        (NP (CD 3))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'num(litres-2, Twenty-1)',
                                                       'nsubj(contains-6, litres-2)',
                                                       'det(mixture-5, a-4)',
                                                       'prep_of(litres-2, mixture-5)',
                                                       'dobj(contains-6, milk-7)',
                                                       'dobj(contains-6, water-9)',
                                                       'conj_and(milk-7, water-9)',
                                                       'det(ratio-12, the-11)',
                                                       'prep_in(milk-7, ratio-12)',
                                                       'prep_of(ratio-12, 5-14)',
                                                       'dep(milk-7, 3-16)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD four) (NNS litres))
          (PP (IN of)
            (NP (DT this) (NN mixture))))
        (VP (VBZ is)
          (VP (VBN replaced)
            (PP (IN by)
              (NP
                (NP (CD four) (NNS litres))
                (PP (IN of)
                  (NP (NN milk)))))))))
    (, ,)
    (NP
      (NP (RB then) (DT the) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NN milk))
          (PP (TO to)
            (NP
              (NP (NN water))
              (PP (IN in)
                (NP (DT the) (JJ new) (NN mixture))))))))
    (VP (MD will)
      (VP (VB be))
      (: :)
      (NP
        (NP
          (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
          (NP (CD 5)))
        (: :)
        (NP
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (: :)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 7)))
          (: :)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 2)))
          (: :)
          (NP
            (NP (CD 3) (NNS ANSWERS))
            (CC AND)
            (NP (NNP EXPLANATIONS) (CD 1))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'mark(replaced-8, If-1)',
                                                       'num(litres-3, four-2)',
                                                       'nsubjpass(replaced-8, litres-3)',
                                                       'det(mixture-6, this-5)',
                                                       'prep_of(litres-3, mixture-6)',
                                                       'auxpass(replaced-8, is-7)',
                                                       'advcl(be-27, replaced-8)',
                                                       'num(litres-11, four-10)',
                                                       'agent(replaced-8, litres-11)',
                                                       'prep_of(litres-11, milk-13)',
                                                       'advmod(ratio-17, then-15)',
                                                       'det(ratio-17, the-16)',
                                                       'nsubj(be-27, ratio-17)',
                                                       'prep_of(ratio-17, milk-19)',
                                                       'prep_to(milk-19, water-21)',
                                                       'det(mixture-25, the-23)',
                                                       'amod(mixture-25, new-24)',
                                                       'prep_in(water-21, mixture-25)',
                                                       'aux(be-27, will-26)',
                                                       'dobj(be-27, a-30)',
                                                       'dep(a-30, 5-32)',
                                                       'dep(a-30, 3-34)',
                                                       'dep(3-34, b-36)',
                                                       'dep(3-34, 4-38)',
                                                       'dep(3-34, 3-40)',
                                                       'dep(3-40, c-42)',
                                                       'dep(3-40, 7-44)',
                                                       'dep(3-34, 3-46)',
                                                       'appos(3-46, d-48)',
                                                       'dep(3-46, 2-50)',
                                                       'num(ANSWERS-53, 3-52)',
                                                       'dep(3-34, ANSWERS-53)',
                                                       'dep(3-34, EXPLANATIONS-55)',
                                                       'conj_and(ANSWERS-53, EXPLANATIONS-55)',
                                                       'num(EXPLANATIONS-55, 1-56)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (NP (PRP It))
    (VP (MD will)
      (VP (VB become)
        (NP
          (NP
            (NP (CD eight) (NNS times))
            (PP (IN in)))
          (\\: \\:)
          (NP
            (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
            (NP (CD 8))
            (PP
              (NP
                (NP (NNS years))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (NP
                (NP
                  (NP
                    (NP (CD 12) (NNS years)
                      (PRN (-LRB- -LRB-)
                        (X (SYM c))
                        (-RRB- -RRB-)))
                    (NP (CD 16) (NNS years)))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN d))
                    (-RRB- -RRB-)))
                (ADJP
                  (NP (CD 20) (NNS years))
                  (JJ 54))))))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (NP
      (NP (CD Twenty) (NNS litres))
      (PP (IN of)
        (NP (DT a) (NN mixture))))
    (VP (VBZ contains)
      (NP
        (NP
          (NP (NN milk)
            (CC and)
            (NN water))
          (PP (IN in)
            (NP
              (NP (DT the) (NN ratio))
              (PP (IN of)
                (NP (CD 5))))))
        (\\: \\:)
        (NP (CD 3))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD four) (NNS litres))
          (PP (IN of)
            (NP (DT this) (NN mixture))))
        (VP (VBZ is)
          (VP (VBN replaced)
            (PP (IN by)
              (NP
                (NP (CD four) (NNS litres))
                (PP (IN of)
                  (NP (NN milk)))))))))
    (\\, \\,)
    (NP
      (NP (RB then) (DT the) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NN milk))
          (PP (TO to)
            (NP
              (NP (NN water))
              (PP (IN in)
                (NP (DT the) (JJ new) (NN mixture))))))))
    (VP (MD will)
      (VP (VB be))
      (\\: \\:)
      (NP
        (NP
          (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
          (NP (CD 5)))
        (\\: \\:)
        (NP
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 7)))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 2)))
          (\\: \\:)
          (NP
            (NP (CD 3) (NNS ANSWERS))
            (CC AND)
            (NP (NNP EXPLANATIONS) (CD 1))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP (PRP It))
    (VP (MD will)
      (VP (VB become)
        (NP
          (NP
            (NP (CD eight) (NNS times))
            (PP (IN in)))
          (\\: \\:)
          (NP
            (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
            (NP (CD 8))
            (PP
              (NP
                (NP (NNS years))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (NP
                (NP
                  (NP
                    (NP (CD 12) (NNS years)
                      (PRN (-LRB- -LRB-)
                        (X (SYM c))
                        (-RRB- -RRB-)))
                    (NP (CD 16) (NNS years)))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN d))
                    (-RRB- -RRB-)))
                (ADJP
                  (NP (CD 20) (NNS years))
                  (JJ 54))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP (PRP It))
    (VP (MD will)
      (VP (VB become)
        (NP
          (NP
            (NP (CD eight) (NNS times))
            (PP (IN in)))
          (\\: \\:)
          (NP
            (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
            (NP (CD 8))
            (PP
              (NP
                (NP (NNS years))
                (PRN (-LRB- -LRB-)
                  (X (SYM b))
                  (-RRB- -RRB-)))
              (NP
                (NP
                  (NP
                    (NP (CD 12) (NNS years)
                      (PRN (-LRB- -LRB-)
                        (X (SYM c))
                        (-RRB- -RRB-)))
                    (NP (CD 16) (NNS years)))
                  (PRN (-LRB- -LRB-)
                    (VP (VBN d))
                    (-RRB- -RRB-)))
                (ADJP
                  (NP (CD 20) (NNS years))
                  (JJ 54)))))))))))
'
        };
Submitting expect

(IT WILL BECOME EIGHT TIMES IN : -LRB- A -RRB- 8 YEARS -LRB- B -RRB- 12 YEARS -LRB- C -RRB- 16 YEARS -LRB- D -RRB- 20 YEARS 54)

 A THING-REFERRED-TO MAY BECOME SOME_NUMBER_OF TIMES.

((:I (:Q DET THING-REFERRED-TO*.N) BECOME.V (:Q SOME-NUMBER-OF (:F PLUR TIME.N))))
______________________________________________________________________
[4]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(IT WILL BECOME EIGHT TIMES IN : -LRB- A -RRB- 8 YEARS -LRB- B -RRB- 12 YEARS -LRB- C -RRB- 16 YEARS -LRB- D -RRB- 20 YEARS 54)

 A THING-REFERRED-TO MAY BECOME SOME_NUMBER_OF TIMES.

((:I (:Q DET THING-REFERRED-TO*.N) BECOME.V (:Q SOME-NUMBER-OF (:F PLUR TIME.N))))
______________________________________________________________________
[4]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (NP
      (NP (CD Twenty) (NNS litres))
      (PP (IN of)
        (NP (DT a) (NN mixture))))
    (VP (VBZ contains)
      (NP
        (NP
          (NP (NN milk)
            (CC and)
            (NN water))
          (PP (IN in)
            (NP
              (NP (DT the) (NN ratio))
              (PP (IN of)
                (NP (CD 5))))))
        (\\: \\:)
        (NP (CD 3))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (NP
      (NP (CD Twenty) (NNS litres))
      (PP (IN of)
        (NP (DT a) (NN mixture))))
    (VP (VBZ contains)
      (NP
        (NP
          (NP (NN milk)
            (CC and)
            (NN water))
          (PP (IN in)
            (NP
              (NP (DT the) (NN ratio))
              (PP (IN of)
                (NP (CD 5))))))
        (\\: \\:)
        (NP (CD 3)))))))
'
        };
Submitting expect

(TWENTY LITRES OF A MIXTURE CONTAINS MILK AND WATER IN THE RATIO OF 5 : 3)

 SOME_NUMBER_OF LITRES OF A MIXTURE MAY CONTAIN MILK.
 MILK CAN BE IN A RATIO OF SOME NUMBER_OR_PORTION.

((:I (:A (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) (:P OF.P (:Q A{N} MIXTURE.N))) CONTAIN.V (:F K MILK.N))
 (:I (:F K MILK.N) IN.P (:A (:Q THE RATIO.N) (:P OF.P (:Q SOME NUMBER-OR-PORTION.N)))) NIL)
______________________________________________________________________
[5]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(TWENTY LITRES OF A MIXTURE CONTAINS MILK AND WATER IN THE RATIO OF 5 : 3)

 SOME_NUMBER_OF LITRES OF A MIXTURE MAY CONTAIN MILK.
 MILK CAN BE IN A RATIO OF SOME NUMBER_OR_PORTION.

((:I (:A (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) (:P OF.P (:Q A{N} MIXTURE.N))) CONTAIN.V (:F K MILK.N))
 (:I (:F K MILK.N) IN.P (:A (:Q THE RATIO.N) (:P OF.P (:Q SOME NUMBER-OR-PORTION.N)))) NIL)
______________________________________________________________________
[5]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD four) (NNS litres))
          (PP (IN of)
            (NP (DT this) (NN mixture))))
        (VP (VBZ is)
          (VP (VBN replaced)
            (PP (IN by)
              (NP
                (NP (CD four) (NNS litres))
                (PP (IN of)
                  (NP (NN milk)))))))))
    (\\, \\,)
    (NP
      (NP (RB then) (DT the) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NN milk))
          (PP (TO to)
            (NP
              (NP (NN water))
              (PP (IN in)
                (NP (DT the) (JJ new) (NN mixture))))))))
    (VP (MD will)
      (VP (VB be))
      (\\: \\:)
      (NP
        (NP
          (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
          (NP (CD 5)))
        (\\: \\:)
        (NP
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 7)))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 2)))
          (\\: \\:)
          (NP
            (NP (CD 3) (NNS ANSWERS))
            (CC AND)
            (NP (NNP EXPLANATIONS) (CD 1))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (SBAR (IN If)
      (S
        (NP
          (NP (CD four) (NNS litres))
          (PP (IN of)
            (NP (DT this) (NN mixture))))
        (VP (VBZ is)
          (VP (VBN replaced)
            (PP (IN by)
              (NP
                (NP (CD four) (NNS litres))
                (PP (IN of)
                  (NP (NN milk)))))))))
    (\\, \\,)
    (NP
      (NP (RB then) (DT the) (NN ratio))
      (PP (IN of)
        (NP
          (NP (NN milk))
          (PP (TO to)
            (NP
              (NP (NN water))
              (PP (IN in)
                (NP (DT the) (JJ new) (NN mixture))))))))
    (VP (MD will)
      (VP (VB be))
      (\\: \\:)
      (NP
        (NP
          (NP (-LRB- -LRB-) (NNP a) (-RRB- -RRB-))
          (NP (CD 5)))
        (\\: \\:)
        (NP
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM b))
              (-RRB- -RRB-))
            (NP (CD 4)))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (X (SYM c))
              (-RRB- -RRB-))
            (NP (CD 7)))
          (\\: \\:)
          (NP
            (NP (CD 3))
            (PRN (-LRB- -LRB-)
              (NP (NNP d))
              (-RRB- -RRB-))
            (NP (CD 2)))
          (\\: \\:)
          (NP
            (NP (CD 3) (NNS ANSWERS))
            (CC AND)
            (NP (NNP EXPLANATIONS) (CD 1)))))))))
'
        };
Submitting expect

(IF FOUR LITRES OF THIS MIXTURE IS REPLACED BY FOUR LITRES OF MILK , THEN THE RATIO OF MILK TO WATER IN THE NEW MIXTURE WILL BE : -LRB- A -RRB- 5 :
 3 -LRB- B -RRB- 4 : 3 -LRB- C -RRB- 7 : 3 -LRB- D -RRB- 2 : 3 ANSWERS AND EXPLANATIONS 1)

 A RATIO OF MILK TO WATER MAY BE.
 SOME_NUMBER_OF LITRES OF A MIXTURE MAY BE REPLACE -ED BY SOME_NUMBER_OF LITRES OF MILK.
 A MIXTURE MAY HAVE LITRES.
 SOME_NUMBER_OF LITRES CAN BE CONSTITUTED_OF_OR_FILLED_WITH MILK.
 MILK CAN BE TO WATER.
 WATER CAN BE IN A MIXTURE.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:A (:F K MILK.N) (:P TO.P (:F K WATER.N))))) BE.V)
 (:I (:A (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) (:P OF.P (:Q THE MIXTURE.N))) (:F BE.PASV REPLACE.V)
  (:P BY.P (:A (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) (:P OF.P (:F K MILK.N)))))
 (:I (:Q DET MIXTURE.N) HAVE.V (:Q DET (:F PLUR LITRE.N))) (:I (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K MILK.N))
 NIL (:I (:F K MILK.N) TO.P (:F K WATER.N)) (:I (:F K WATER.N) IN.P (:Q THE MIXTURE.N)))
______________________________________________________________________
[6]> Got result
$VAR1 = {
          'ProcessResults' => ' 
(IF FOUR LITRES OF THIS MIXTURE IS REPLACED BY FOUR LITRES OF MILK , THEN THE RATIO OF MILK TO WATER IN THE NEW MIXTURE WILL BE : -LRB- A -RRB- 5 :
 3 -LRB- B -RRB- 4 : 3 -LRB- C -RRB- 7 : 3 -LRB- D -RRB- 2 : 3 ANSWERS AND EXPLANATIONS 1)

 A RATIO OF MILK TO WATER MAY BE.
 SOME_NUMBER_OF LITRES OF A MIXTURE MAY BE REPLACE -ED BY SOME_NUMBER_OF LITRES OF MILK.
 A MIXTURE MAY HAVE LITRES.
 SOME_NUMBER_OF LITRES CAN BE CONSTITUTED_OF_OR_FILLED_WITH MILK.
 MILK CAN BE TO WATER.
 WATER CAN BE IN A MIXTURE.

((:I (:A (:Q THE RATIO.N) (:P OF.P (:A (:F K MILK.N) (:P TO.P (:F K WATER.N))))) BE.V)
 (:I (:A (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) (:P OF.P (:Q THE MIXTURE.N))) (:F BE.PASV REPLACE.V)
  (:P BY.P (:A (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) (:P OF.P (:F K MILK.N)))))
 (:I (:Q DET MIXTURE.N) HAVE.V (:Q DET (:F PLUR LITRE.N))) (:I (:Q SOME-NUMBER-OF (:F PLUR LITRE.N)) CONSTITUTED-OF-OR-FILLED-WITH.A (:F K MILK.N))
 NIL (:I (:F K MILK.N) TO.P (:F K WATER.N)) (:I (:F K WATER.N) IN.P (:Q THE MIXTURE.N)))
______________________________________________________________________
[6]>'
        };
$VAR1 = {
          'Batch' => [
                       '(a) 561 = 3 × 11 × 17 Sum = 31 2.',
                       '(b) Men Mats Days 4 4 4 200 x 200 More men more mats : : 4 : x 4 : 200 More days more mats 4 : 200 ∴ x × 4 × 4 = 4 × 200 × 200 x = 10000 x 3.',
                       '(b) y = 7 ∴ x = 7y P = xy = 7y × y = 1575 ⇒ y = 15 ∴ Nos are y, 7y, 15 and 105 4.'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.7 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 15]: [-LRB-, a, -RRB-, 561, =, 3, ×, 11, ×, 17, Sum, =, 31, 2, .]
Parsing [sent. 2 len. 49]: [-LRB-, b, -RRB-, Men, Mats, Days, 4, 4, 4, 200, x, 200, More, men, more, mats, :, :, 4, :, x, 4, :, 200, More, days, more, mats, 4, :, 200, ∴, x, ×, 4, ×, 4, =, 4, ×, 200, ×, 200, x, =, 10000, x, 3, .]
Parsing [sent. 3 len. 35]: [-LRB-, b, -RRB-, y, =, 7, ∴, x, =, 7y, P, =, xy, =, 7y, ×, y, =, 1575, ⇒, y, =, 15, ∴, Nos, are, y, ,, 7y, ,, 15, and, 105, 4, .]
Parsed file: /tmp/stanfordparser.txt [3 sentences].
Parsed 99 words in 3 sentences (11.30 wds/sec; 0.34 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 561))
    (VP (VBZ =)
      (S
        (NP (CD 3) (NNP ×) (CD 11) (NNP ×) (CD 17) (NN Sum))
        (VP (SYM =)
          (NP (CD 31) (CD 2)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'nsubj(=-5, 561-4)',
                                                       'num(Sum-11, 3-6)',
                                                       'nn(Sum-11, ×-7)',
                                                       'num(Sum-11, 11-8)',
                                                       'nn(Sum-11, ×-9)',
                                                       'num(Sum-11, 17-10)',
                                                       'nsubj(2-14, Sum-11)',
                                                       'dep(2-14, =-12)',
                                                       'num(2-14, 31-13)',
                                                       'ccomp(=-5, 2-14)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP
      (NP (NNP Men) (NNP Mats) (NNPS Days))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (NP
                  (QP (CD 4) (CD 4))
                  (ADJP
                    (NP
                      (QP (CD 4) (CD 200))
                      (QP (CD x) (CD 200)))
                    (RBR More))
                  (NNS men))
                (NP (JJR more) (NN mats) (: :)))
              (: :)
              (NP
                (NP (CD 4))
                (: :)
                (NP
                  (QP (CD x) (CD 4))))
              (: :)
              (NP
                (NP
                  (NP
                    (QP (CD 200) (JJR More))
                    (NNS days))
                  (JJR more))
                (ADJP (JJ mats)
                  (NP (CD 4))))
              (: :)
              (NP
                (NP
                  (QP (CD 200) (CD ∴)))
                (NP (SYM x))))
            (VP (VBG ×)
              (NP (CD 4) (JJ ×) (CD 4))))
          (VP (SYM =)
            (NP (CD 4) (JJ ×) (CD 200))))))
    (VP (VBZ ×)
      (S
        (NP
          (QP (CD 200) (CD x)))
        (VP (SYM =)
          (NP (CD 10000) (JJ x) (CD 3)))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, b-2)',
                                                       'nn(Days-6, Men-4)',
                                                       'nn(Days-6, Mats-5)',
                                                       'nsubj(×-42, Days-6)',
                                                       'number(4-8, 4-7)',
                                                       'num(men-14, 4-8)',
                                                       'number(200-10, 4-9)',
                                                       'num(200-12, 200-10)',
                                                       'number(200-12, x-11)',
                                                       'dep(More-13, 200-12)',
                                                       'amod(men-14, More-13)',
                                                       'nsubj(200-41, men-14)',
                                                       'amod(mats-16, more-15)',
                                                       'dep(men-14, mats-16)',
                                                       'dep(men-14, 4-19)',
                                                       'number(4-22, x-21)',
                                                       'dep(4-19, 4-22)',
                                                       'num(days-26, 200-24)',
                                                       'quantmod(200-24, More-25)',
                                                       'dep(more-27, days-26)',
                                                       'dep(men-14, more-27)',
                                                       'amod(more-27, mats-28)',
                                                       'dep(mats-28, 4-29)',
                                                       'number(∴-32, 200-31)',
                                                       'dep(men-14, ∴-32)',
                                                       'dep(∴-32, x-33)',
                                                       'partmod(men-14, ×-34)',
                                                       'num(4-37, 4-35)',
                                                       'amod(4-37, ×-36)',
                                                       'dobj(×-34, 4-37)',
                                                       'dep(200-41, =-38)',
                                                       'num(200-41, 4-39)',
                                                       'amod(200-41, ×-40)',
                                                       'rcmod(Days-6, 200-41)',
                                                       'number(x-44, 200-43)',
                                                       'nsubj(3-48, x-44)',
                                                       'dep(3-48, =-45)',
                                                       'num(3-48, 10000-46)',
                                                       'amod(3-48, x-47)',
                                                       'ccomp(×-42, 3-48)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB y)
      (SBAR
        (S
          (S
            (S
              (VP (SYM =)
                (NP (CD 7))))
            (NP (NNP ∴) (SYM x) (NNP =) (NNPS 7y) (NNP P))
            (ADVP (RB =))
            (VP (VBP xy)
              (SBAR
                (S
                  (NP
                    (NP (NNP =) (NNPS 7y) (NNP ×))
                    (VP (VBN y)
                      (S
                        (VP (SYM =)
                          (NP (CD 1575) (JJ ⇒) (NN y))))))
                  (VP (SYM =)
                    (NP (CD 15) (JJ ∴) (NNS Nos)))))))
          (VP (VBP are)
            (NP
              (NP (NN y))
              (, ,)
              (NP (CD 7y))
              (, ,)
              (NP (CD 15))
              (CC and)
              (NP (CD 105) (CD 4)))))))
    (. .)))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, b-2)',
                                                       'dep(7-6, =-5)',
                                                       'dep(xy-13, 7-6)',
                                                       'nn(P-11, ∴-7)',
                                                       'dep(P-11, x-8)',
                                                       'nn(P-11, =-9)',
                                                       'nn(P-11, 7y-10)',
                                                       'nsubj(xy-13, P-11)',
                                                       'advmod(xy-13, =-12)',
                                                       'csubj(y-27, xy-13)',
                                                       'nn(×-16, =-14)',
                                                       'nn(×-16, 7y-15)',
                                                       'nsubj(Nos-25, ×-16)',
                                                       'partmod(×-16, y-17)',
                                                       'dep(y-21, =-18)',
                                                       'num(y-21, 1575-19)',
                                                       'amod(y-21, ⇒-20)',
                                                       'ccomp(y-17, y-21)',
                                                       'dep(Nos-25, =-22)',
                                                       'num(Nos-25, 15-23)',
                                                       'amod(Nos-25, ∴-24)',
                                                       'ccomp(xy-13, Nos-25)',
                                                       'cop(y-27, are-26)',
                                                       'ccomp(y-4, y-27)',
                                                       'ccomp(y-4, 7y-29)',
                                                       'conj_and(y-27, 7y-29)',
                                                       'ccomp(y-4, 15-31)',
                                                       'conj_and(y-27, 15-31)',
                                                       'num(4-34, 105-33)',
                                                       'ccomp(y-4, 4-34)',
                                                       'conj_and(y-27, 4-34)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 561))
    (VP (VBZ =)
      (S
        (NP (CD 3) (NNP ×) (CD 11) (NNP ×) (CD 17) (NN Sum))
        (VP (SYM =)
          (NP (CD 31) (CD 2)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP
      (NP (NNP Men) (NNP Mats) (NNPS Days))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (NP
                  (QP (CD 4) (CD 4))
                  (ADJP
                    (NP
                      (QP (CD 4) (CD 200))
                      (QP (CD x) (CD 200)))
                    (RBR More))
                  (NNS men))
                (NP (JJR more) (NN mats) (\\: \\:)))
              (\\: \\:)
              (NP
                (NP (CD 4))
                (\\: \\:)
                (NP
                  (QP (CD x) (CD 4))))
              (\\: \\:)
              (NP
                (NP
                  (NP
                    (QP (CD 200) (JJR More))
                    (NNS days))
                  (JJR more))
                (ADJP (JJ mats)
                  (NP (CD 4))))
              (\\: \\:)
              (NP
                (NP
                  (QP (CD 200) (CD ∴)))
                (NP (SYM x))))
            (VP (VBG ×)
              (NP (CD 4) (JJ ×) (CD 4))))
          (VP (SYM =)
            (NP (CD 4) (JJ ×) (CD 200))))))
    (VP (VBZ ×)
      (S
        (NP
          (QP (CD 200) (CD x)))
        (VP (SYM =)
          (NP (CD 10000) (JJ x) (CD 3)))))))'
        };
$VAR1 = {
          'Tree' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB y)
      (SBAR
        (S
          (S
            (S
              (VP (SYM =)
                (NP (CD 7))))
            (NP (NNP ∴) (SYM x) (NNP =) (NNPS 7y) (NNP P))
            (ADVP (RB =))
            (VP (VBP xy)
              (SBAR
                (S
                  (NP
                    (NP (NNP =) (NNPS 7y) (NNP ×))
                    (VP (VBN y)
                      (S
                        (VP (SYM =)
                          (NP (CD 1575) (JJ ⇒) (NN y))))))
                  (VP (SYM =)
                    (NP (CD 15) (JJ ∴) (NNS Nos)))))))
          (VP (VBP are)
            (NP
              (NP (NN y))
              (\\, \\,)
              (NP (CD 7y))
              (\\, \\,)
              (NP (CD 15))
              (CC and)
              (NP (CD 105) (CD 4)))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 561))
    (VP (VBZ =)
      (S
        (NP (CD 3) (NNP ×) (CD 11) (NNP ×) (CD 17) (NN Sum))
        (VP (SYM =)
          (NP (CD 31) (CD 2)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
    (NP (CD 561))
    (VP (VBZ =)
      (S
        (NP (CD 3) (NNP ×) (CD 11) (NNP ×) (CD 17) (NN Sum))
        (VP (SYM =)
          (NP (CD 31) (CD 2))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [7]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => ' 
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [7]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP
      (NP (NNP Men) (NNP Mats) (NNPS Days))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (NP
                  (QP (CD 4) (CD 4))
                  (ADJP
                    (NP
                      (QP (CD 4) (CD 200))
                      (QP (CD x) (CD 200)))
                    (RBR More))
                  (NNS men))
                (NP (JJR more) (NN mats) (\\: \\:)))
              (\\: \\:)
              (NP
                (NP (CD 4))
                (\\: \\:)
                (NP
                  (QP (CD x) (CD 4))))
              (\\: \\:)
              (NP
                (NP
                  (NP
                    (QP (CD 200) (JJR More))
                    (NNS days))
                  (JJR more))
                (ADJP (JJ mats)
                  (NP (CD 4))))
              (\\: \\:)
              (NP
                (NP
                  (QP (CD 200) (CD ∴)))
                (NP (SYM x))))
            (VP (VBG ×)
              (NP (CD 4) (JJ ×) (CD 4))))
          (VP (SYM =)
            (NP (CD 4) (JJ ×) (CD 200))))))
    (VP (VBZ ×)
      (S
        (NP
          (QP (CD 200) (CD x)))
        (VP (SYM =)
          (NP (CD 10000) (JJ x) (CD 3)))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (NP
      (NP (NNP Men) (NNP Mats) (NNPS Days))
      (SBAR
        (S
          (NP
            (NP
              (NP
                (NP
                  (QP (CD 4) (CD 4))
                  (ADJP
                    (NP
                      (QP (CD 4) (CD 200))
                      (QP (CD x) (CD 200)))
                    (RBR More))
                  (NNS men))
                (NP (JJR more) (NN mats) (\\: \\:)))
              (\\: \\:)
              (NP
                (NP (CD 4))
                (\\: \\:)
                (NP
                  (QP (CD x) (CD 4))))
              (\\: \\:)
              (NP
                (NP
                  (NP
                    (QP (CD 200) (JJR More))
                    (NNS days))
                  (JJR more))
                (ADJP (JJ mats)
                  (NP (CD 4))))
              (\\: \\:)
              (NP
                (NP
                  (QP (CD 200) (CD ∴)))
                (NP (SYM x))))
            (VP (VBG ×)
              (NP (CD 4) (JJ ×) (CD 4))))
          (VP (SYM =)
            (NP (CD 4) (JJ ×) (CD 200))))))
    (VP (VBZ ×)
      (S
        (NP
          (QP (CD 200) (CD x)))
        (VP (SYM =)
          (NP (CD 10000) (JJ x) (CD 3))))))))
'
        };
Submitting expect

*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]> Got result
lisp.run: no process found
Waiting for server to become initialized...
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> Initialized.
;; Loading file extract-patterns.lisp ...
;;  Loading file male-names.lisp ...
;;  Loaded file male-names.lisp
;;  Loading file female-names.lisp ...
;;  Loaded file female-names.lisp
;;  Loading file non-personal-names.lisp ...
;;  Loaded file non-personal-names.lisp
;; Loaded file extract-patterns.lisp
T
[2]> Loaded KNext.
$VAR1 = {
          'ProcessResults' => '
*** - CHAR-EQUAL: argument NIL is not a character
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead.
ABORT          :R2      Abort main loop
Break 1 [3]>'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB y)
      (SBAR
        (S
          (S
            (S
              (VP (SYM =)
                (NP (CD 7))))
            (NP (NNP ∴) (SYM x) (NNP =) (NNPS 7y) (NNP P))
            (ADVP (RB =))
            (VP (VBP xy)
              (SBAR
                (S
                  (NP
                    (NP (NNP =) (NNPS 7y) (NNP ×))
                    (VP (VBN y)
                      (S
                        (VP (SYM =)
                          (NP (CD 1575) (JJ ⇒) (NN y))))))
                  (VP (SYM =)
                    (NP (CD 15) (JJ ∴) (NNS Nos)))))))
          (VP (VBP are)
            (NP
              (NP (NN y))
              (\\, \\,)
              (NP (CD 7y))
              (\\, \\,)
              (NP (CD 15))
              (CC and)
              (NP (CD 105) (CD 4)))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((S
    (LST (-LRB- -LRB-) (NN b) (-RRB- -RRB-))
    (VP (VB y)
      (SBAR
        (S
          (S
            (S
              (VP (SYM =)
                (NP (CD 7))))
            (NP (NNP ∴) (SYM x) (NNP =) (NNPS 7y) (NNP P))
            (ADVP (RB =))
            (VP (VBP xy)
              (SBAR
                (S
                  (NP
                    (NP (NNP =) (NNPS 7y) (NNP ×))
                    (VP (VBN y)
                      (S
                        (VP (SYM =)
                          (NP (CD 1575) (JJ ⇒) (NN y))))))
                  (VP (SYM =)
                    (NP (CD 15) (JJ ∴) (NNS Nos)))))))
          (VP (VBP are)
            (NP
              (NP (NN y))
              (\\, \\,)
              (NP (CD 7y))
              (\\, \\,)
              (NP (CD 15))
              (CC and)
              (NP (CD 105) (CD 4))))))))))
'
        };
Submitting expect

(-LRB- B -RRB- Y = 7 ∴ X = 7Y P = XY = 7Y × Y = 1575 ⇒ Y = 15 ∴ NOS ARE Y , 7Y , 15 AND 105 4)

 A |\|∴_X_=_\\\|7Y\\\|_P\||[PERSON??] MAY XY.
 A |\|=_\\\|7Y\\\|_×\||[PERSON??] MAY BE Y -ED.
 A Y CAN BE ⇒.
 NOS CAN BE ∴.

((:I (:Q DET |\|∴_X_=_\\\|7Y\\\|_P\|.NAME|) XY.V) (:I (:Q DET |\|=_\\\|7Y\\\|_×\|.NAME|) (:F BE.PASV Y.V)) (:I (:Q DET Y.N) ⇒.A)
 (:I (:Q DET (:F PLUR NO.N)) ∴.A))
______________________________________________________________________
[3]> Got result
$VAR1 = {
          'ProcessResults' => '
(-LRB- B -RRB- Y = 7 ∴ X = 7Y P = XY = 7Y × Y = 1575 ⇒ Y = 15 ∴ NOS ARE Y , 7Y , 15 AND 105 4)

 A |\\|∴_X_=_\\\\\\|7Y\\\\\\|_P\\||[PERSON??] MAY XY.
 A |\\|=_\\\\\\|7Y\\\\\\|_×\\||[PERSON??] MAY BE Y -ED.
 A Y CAN BE ⇒.
 NOS CAN BE ∴.

((:I (:Q DET |\\|∴_X_=_\\\\\\|7Y\\\\\\|_P\\|.NAME|) XY.V) (:I (:Q DET |\\|=_\\\\\\|7Y\\\\\\|_×\\|.NAME|) (:F BE.PASV Y.V)) (:I (:Q DET Y.N) ⇒.A)
 (:I (:Q DET (:F PLUR NO.N)) ∴.A))
______________________________________________________________________
[3]>'
        };
Malformed UTF-8 character (unexpected non-continuation byte 0x5c, immediately after start byte 0xd7) in subroutine entry at /usr/lib/perl/5.14/Data/Dumper.pm line 190.
$VAR1 = {
          'Batch' => [
                       '(a) Let M.P. = Rs 100 ∴ C.P. = Rs 80 436 s DECEMBER 2001 s THE COMPETITION MASTER'
                     ],
          'ResultHash' => {}
        };
Loading parser from serialized file ./grammar/englishPCFG.ser.gz ... done [2.6 sec].
Parsing file: /tmp/stanfordparser.txt
Parsing [sent. 1 len. 21]: [-LRB-, a, -RRB-, Let, M.P., =, Rs, 100, ∴, C.P., =, Rs, 80, 436, s, DECEMBER, 2001, s, THE, COMPETITION, MASTER]
Parsed file: /tmp/stanfordparser.txt [1 sentences].
Parsed 21 words in 1 sentences (8.84 wds/sec; 0.42 sents/sec).
$VAR1 = {
          'Item' => [
                      {
                        'RESULTRESULT' => {
                                            'Tree' => '(ROOT
(SINV
    (VP
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (VB Let)
      (NP (NNP M.P.))
      (S
        (VP (VBG =)
          (NP (NNP Rs) (CD 100)))))
    (NP
      (NP (NNP ∴) (NNP C.P.) (NNP =) (NNP Rs))
      (SBAR
        (S
          (NP
            (QP (CD 80) (CD 436)))
          (VP (VBZ s)
            (NP
              (NP (NNP DECEMBER) (CD 2001))
              (SBAR
                (S
                  (VP (VBZ s)
                    (NP (DT THE) (NNP COMPETITION) (NNP MASTER))))))))))))',
                                            'Sent' => '',
                                            'Rel' => [
                                                       'dep(-RRB--3, a-2)',
                                                       'dobj(Let-4, M.P.-5)',
                                                       'xcomp(Let-4, =-6)',
                                                       'dobj(=-6, Rs-7)',
                                                       'num(Rs-7, 100-8)',
                                                       'nn(Rs-12, ∴-9)',
                                                       'nn(Rs-12, C.P.-10)',
                                                       'nn(Rs-12, =-11)',
                                                       'nsubj(Let-4, Rs-12)',
                                                       'number(436-14, 80-13)',
                                                       'nsubj(DECEMBER-16, 436-14)',
                                                       'cop(DECEMBER-16, s-15)',
                                                       'rcmod(Rs-12, DECEMBER-16)',
                                                       'num(DECEMBER-16, 2001-17)',
                                                       'cop(MASTER-21, s-18)',
                                                       'det(MASTER-21, THE-19)',
                                                       'nn(MASTER-21, COMPETITION-20)',
                                                       'rcmod(DECEMBER-16, MASTER-21)'
                                                     ]
                                          }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::StanfordParser::BatchParse'
        };
Using provided result and adding to cache
$VAR1 = {
          'Tree' => '((SINV
    (VP
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (VB Let)
      (NP (NNP M\\.P\\.))
      (S
        (VP (VBG =)
          (NP (NNP Rs) (CD 100)))))
    (NP
      (NP (NNP ∴) (NNP C\\.P\\.) (NNP =) (NNP Rs))
      (SBAR
        (S
          (NP
            (QP (CD 80) (CD 436)))
          (VP (VBZ s)
            (NP
              (NP (NNP DECEMBER) (CD 2001))
              (SBAR
                (S
                  (VP (VBZ s)
                    (NP (DT THE) (NNP COMPETITION) (NNP MASTER))))))))))))))'
        };
Computing result and adding to cache
$VAR1 = {
          'Item' => [
                      {
                        'TheseArgs' => {
                                         'Treebank' => '((SINV
    (VP
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (VB Let)
      (NP (NNP M\\.P\\.))
      (S
        (VP (VBG =)
          (NP (NNP Rs) (CD 100)))))
    (NP
      (NP (NNP ∴) (NNP C\\.P\\.) (NNP =) (NNP Rs))
      (SBAR
        (S
          (NP
            (QP (CD 80) (CD 436)))
          (VP (VBZ s)
            (NP
              (NP (NNP DECEMBER) (CD 2001))
              (SBAR
                (S
                  (VP (VBZ s)
                    (NP (DT THE) (NNP COMPETITION) (NNP MASTER))))))))))))))'
                                       }
                      }
                    ],
          'File' => '/usr/share/perl5/System/KNext.pm',
          'Caller' => 'System::KNext::ProcessTreebank'
        };
$VAR1 = {
          'Command' => '(e \'((SINV
    (VP
      (LST (-LRB- -LRB-) (DT a) (-RRB- -RRB-))
      (VB Let)
      (NP (NNP M\\.P\\.))
      (S
        (VP (VBG =)
          (NP (NNP Rs) (CD 100)))))
    (NP
      (NP (NNP ∴) (NNP C\\.P\\.) (NNP =) (NNP Rs))
      (SBAR
        (S
          (NP
            (QP (CD 80) (CD 436)))
          (VP (VBZ s)
            (NP
              (NP (NNP DECEMBER) (CD 2001))
              (SBAR
                (S
                  (VP (VBZ s)
                    (NP (DT THE) (NNP COMPETITION) (NNP MASTER)))))))))))))))
'
        };
Submitting expect

(-LRB- A -RRB- LET M.P. = RS 100 ∴ C.P. = RS 80 436 S DECEMBER 2001 S THE COMPETITION MASTER)


NIL
______________________________________________________________________
[4]> Got result
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
Wide character in print at /var/lib/myfrdcsa/codebases/internal/freekbs2/KBS2/ImportExport/Mod/KIF.pm line 369.
Malformed UTF-8 character (unexpected non-continuation byte 0x5c, immediately after start byte 0xd7) in subroutine entry at /usr/lib/perl/5.14/Data/Dumper.pm line 190.
/quantitative_aptitude8.pdf.preprocess
Moving /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess/x1.workhorse to /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/complete/x1.workhorse
<BLAH: /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess>
Remove Dir If Empty: /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess
rmdir /var/lib/myfrdcsa/codebases/minor/workhorse/data/1/to-analyze/quantitative_aptitude8.pdf.preprocess
vagrant@nlp:/var/lib/myfrdcsa/codebases/minor/workhorse/scripts$ clisp -h
