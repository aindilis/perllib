package System::Cyc::Java::CycAccess;

# see System::Cyc;

use PerlLib::SwissArmyKnife;
# use System::Cyc::EnterpriseCyc::Java::CycAccess;
use System::Cyc::Exception;
use System::Cyc::ResearchCyc1_0::Java::CycAccess;
use System::Cyc::ResearchCyc::Java::CycAccess;
use System::Cyc::OpenCyc::Java::CycAccess;

use Moose;
use Try::Tiny;

sub BUILD {
  my ($self,$args) = @_;
  # FIXME: have this take an optional parameter that specifies which API it is

  my %args = %$args;

  my $continue = 1;
  my @exceptions;
  # $args{UseOpenCyc} = 1;
  $args{UseResearchCyc} = 1;
  # $args{UseResearchCyc1_0} = 1;
  if ($continue and ($args{All} or $args{UseOpenCyc})) {
    my $exception;
    try {
      print "Trying OpenCyc...\n" if $UNIVERSAL::debug;
      print Dumper
	({
	  Host => $args{Host},
	  Port => $args{Port},
	 }) if $UNIVERSAL::debug;
      $self->cyc(System::Cyc::OpenCyc::Java::CycAccess->new($args{Host}, $args{Port}));
      if (! $self->cyc->isOpenCyc) {
	$self->cyc(undef);
	System::Cyc::Exception->throw({msg => 'Not OpenCyc'});
      }
      $self->SetUserAndCycKE(User => $args{User}, CycKE => $args{CycKE});
    }
      catch {
	$exception = $_;
	# print Dumper($exception);
	# if ($exception->can('toString')) {
	# print Dumper($exception->toString);
	push @exceptions, $exception;
      };
    if ($args{ReturnAfterOneTry}) {
      $continue = 0 unless defined $exception;

    }
  }

  if ($continue and ($args{All} or $args{UseResearchCyc})) {
    my $exception;
    try {
      print "Trying ResearchCyc...\n" if $UNIVERSAL::debug;
      $self->cyc(System::Cyc::ResearchCyc::Java::CycAccess->new($args{Host}, $args{Port}));
      if (! $self->cyc->isResearchCyc) {
	$self->cyc(undef);
	System::Cyc::Exception->throw({msg => 'Not ResearchCyc'});
      }
      $self->SetUserAndCycKE(User => $args{User}, CycKE => $args{CycKE});
    }
      catch {
	$exception = $_;
	# print Dumper($exception);
	# if ($exception->can('toString')) {
	#   print Dumper($exception->toString);
	# }
	push @exceptions, $exception;
      };
    if ($args{ReturnAfterOneTry}) {
      $continue = 0 unless defined $exception;
    }
  }

  if ($continue and ($args{All} or $args{UseResearchCyc1_0})) {
    my $exception;
    try {
      print "Trying ResearchCyc-1.0...\n" if $UNIVERSAL::debug;
      $self->cyc(System::Cyc::ResearchCyc1_0::Java::CycAccess->new($args{Host}, $args{Port}));
      if (! $self->cyc->isResearchCyc1_0) {
	$self->cyc(undef);
	System::Cyc::Exception->throw({msg => 'Not ResearchCyc-1.0'});
      }
      $self->SetUserAndCycKE(User => $args{User}, CycKE => $args{CycKE});
    }
      catch {
	$exception = $_;
	# print Dumper($exception);
	# if ($exception->can('toString')) {
	#   print Dumper($exception->toString);
	# }
	push @exceptions, $exception;
      };
    if ($args{ReturnAfterOneTry}) {
      $continue = 0 unless defined $exception;
    }
  }

  if ($args{UseEnterpriseCycA}) {
    my $exception;
    try {
      print "Trying EnterpriseCyc...\n";
      $self->cyc(System::Cyc::EnterpriseCyc::Java::CycAccess->new);
      if (! $self->cyc->isEnterpriseCyc) {
        $self->cyc(undef);
        System::Cyc::Exception->throw({msg => 'Not EnterpriseCyc'});
      }
    }
      catch {
	$exception = $_;
	push @exceptions, $exception;
      };
    if ($args{ReturnAfterOneTry}) {
      $continue = 0 unless defined $exception;
      $exception = undef;
    }
  }

  if ($args{UseEnterpriseCycB}) {
    my $exception;
    try {
      print "Trying EnterpriseCyc...\n";
      $self->cyc(System::Cyc::EnterpriseCyc::Java::CycAccess->new);
      if (! $self->cyc->isEnterpriseCyc) {
	$self->cyc(undef);
	System::Cyc::Exception->throw({msg => 'Not EnterpriseCyc'});
      }
    }
      catch {
	$exception = $_;
	push @exceptions, $exception;
      };
    if ($args{ReturnAfterOneTry}) {
      $continue = 0 unless defined $exception;
      $exception = undef;
    }
  }

  print Dumper({Exceptions => \@exceptions}) if $UNIVERSAL::debug;

  if (scalar @exceptions) {
    $self->cyc(undef);

    foreach my $exception (@exceptions) {
      if (defined $exception) {
	my %hash;
	if ( blessed $exception ) {
	  if ( $exception->can('toString') ) {
	    $hash{msg} = $exception->toString;
	  } elsif ( $exception->can('msg') ) {
	    $hash{msg} = $exception->msg;
	  }
	  if ( $exception->can('rethrow') ) {
	    $hash{rethrowable} = $exception,
	  }
	} else {
	  $hash{msg} = Dumper($exception);
	}
	System::Cyc::Exception->throw(%hash);
      }
    }
  }
}

# FIXME: transform this to be ResearchCyc and OpenCyc instead of
# 'cyc'., and have them handle their respective functions.

has 'cyc' =>
  (
   is => 'rw',
   isa => 'System::Cyc::ResearchCyc1_0::Java::CycAccess|System::Cyc::ResearchCyc::Java::CycAccess|System::Cyc::OpenCyc::Java::CycAccess',
   handles => {
	       # OpenCyc functions
	       areAssertedCoextensional => 'areAssertedCoextensional',
	       areDisjoint => 'areDisjoint',
	       areHierarchical => 'areHierarchical',
	       areIntersecting => 'areIntersecting',
	       areTacitCoextensional => 'areTacitCoextensional',
	       askCycQuery => 'askCycQuery',
	       askNewCycQuery => 'askNewCycQuery',
	       askWithVariable => 'askWithVariable',
	       askWithVariables => 'askWithVariables',
	       assertArg1FormatSingleEntry => 'assertArg1FormatSingleEntry',
	       assertArg1Genl => 'assertArg1Genl',
	       assertArg2Genl => 'assertArg2Genl',
	       assertArg3Genl => 'assertArg3Genl',
	       assertArgFormat => 'assertArgFormat',
	       assertArgIsa => 'assertArgIsa',
	       assertComment => 'assertComment',
	       assertConceptuallyRelated => 'assertConceptuallyRelated',
	       assertDefiningMt => 'assertDefiningMt',
	       assertGaf => 'assertGaf',
	       assertGenFormat => 'assertGenFormat',
	       assertGenlMt => 'assertGenlMt',
	       assertGenlPreds => 'assertGenlPreds',
	       assertGenls => 'assertGenls',
	       assertGenPhraseCountNounPlural => 'assertGenPhraseCountNounPlural',
	       assertGenPhraseCountNounSingular => 'assertGenPhraseCountNounSingular',
	       assertHLGaf => 'assertHLGaf',
	       assertIsa => 'assertIsa',
	       assertIsaBinaryPredicate => 'assertIsaBinaryPredicate',
	       assertIsaCollection => 'assertIsaCollection',
	       assertIsas => 'assertIsas',
	       assertNameString => 'assertNameString',
	       assertQuotedIsa => 'assertQuotedIsa',
	       assertResultGenl => 'assertResultGenl',
	       assertResultIsa => 'assertResultIsa',
	       assertSentence => 'assertSentence',
	       assertSynonymousExternalConcept => 'assertSynonymousExternalConcept',
	       assertTermDependsOn => 'assertTermDependsOn',
	       assertWithBookkeepingAndWithoutTranscript => 'assertWithBookkeepingAndWithoutTranscript',
	       assertWithTranscript => 'assertWithTranscript',
	       assertWithTranscriptAndBookkeeping => 'assertWithTranscriptAndBookkeeping',
	       canonicalizeHLMT => 'canonicalizeHLMT',
	       canonicalizeList => 'canonicalizeList',
	       close => 'close',
	       constantNameCaseCollision => 'constantNameCaseCollision',
	       converseBoolean => 'converseBoolean',
	       converseCycObject => 'converseCycObject',
	       converseInt => 'converseInt',
	       converseList => 'converseList',
	       converseObject => 'converseObject',
	       converseRaw => 'converseRaw',
	       converseSentence => 'converseSentence',
	       converseString => 'converseString',
	       converseVoid => 'converseVoid',
	       countAllInstances => 'countAllInstances',
	       countAllInstances_Cached => 'countAllInstances_Cached',
	       countUsingBestIndex => 'countUsingBestIndex',
	       createBinaryPredicate => 'createBinaryPredicate',
	       createCollection => 'createCollection',
	       createCollectionDenotingBinaryFunction => 'createCollectionDenotingBinaryFunction',
	       createCollectionDenotingUnaryFunction => 'createCollectionDenotingUnaryFunction',
	       createCollectorMt => 'createCollectorMt',
	       createIndivDenotingUnaryFunction => 'createIndivDenotingUnaryFunction',
	       createIndividual => 'createIndividual',
	       createKbSubsetCollection => 'createKbSubsetCollection',
	       createMicrotheory => 'createMicrotheory',
	       createMicrotheorySystem => 'createMicrotheorySystem',
	       createNewPermanent => 'createNewPermanent',
	       createSpindleMt => 'createSpindleMt',
	       current => 'current',
	       CycAccess => 'CycAccess',
	       cyclifyString => 'cyclifyString',
	       destroyInferenceProblemStoreByName => 'destroyInferenceProblemStoreByName',
	       ensureWffConstraints => 'ensureWffConstraints',
	       equalsEL => 'equalsEL',
	       executeQuery => 'executeQuery',
	       find => 'find',
	       findConstantsForGuids => 'findConstantsForGuids',
	       findConstantsForNames => 'findConstantsForNames',
	       findOrCreate => 'findOrCreate',
	       generateDisambiguationPhraseAndTypes => 'generateDisambiguationPhraseAndTypes',
	       getAllAssertionsInMt => 'getAllAssertionsInMt',
	       getAllDependentSpecs => 'getAllDependentSpecs',
	       getAllGenlPreds => 'getAllGenlPreds',
	       getAllGenls => 'getAllGenls',
	       getAllGenlsWrt => 'getAllGenlsWrt',
	       getAllInstances => 'getAllInstances',
	       getAllIsa => 'getAllIsa',
	       getAllQuotedInstances => 'getAllQuotedInstances',
	       getAllSpecInverses => 'getAllSpecInverses',
	       getAllSpecMts => 'getAllSpecMts',
	       getAllSpecPreds => 'getAllSpecPreds',
	       getAllSpecs => 'getAllSpecs',
	       getApplicableBinaryPredicates => 'getApplicableBinaryPredicates',
	       getArg1 => 'getArg1',
	       getArg1Formats => 'getArg1Formats',
	       getArg1Isas => 'getArg1Isas',
	       getArg1s => 'getArg1s',
	       getArg2 => 'getArg2',
	       getArg2Formats => 'getArg2Formats',
	       getArg2Isas => 'getArg2Isas',
	       getArg2s => 'getArg2s',
	       getArg3Isas => 'getArg3Isas',
	       getArg4Isas => 'getArg4Isas',
	       getArgNGenls => 'getArgNGenls',
	       getArgNIsas => 'getArgNIsas',
	       getArity => 'getArity',
	       getAssertionArg2 => 'getAssertionArg2',
	       getAssertionById => 'getAssertionById',
	       getAssertionDate => 'getAssertionDate',
	       getBackchainImplicationRules => 'getBackchainImplicationRules',
	       getBackchainRules => 'getBackchainRules',
	       getBasePort => 'getBasePort',
	       getBrowserUrl => 'getBrowserUrl',
	       getCoExtensionals => 'getCoExtensionals',
	       getCollectionLeaves => 'getCollectionLeaves',
	       getComment => 'getComment',
	       getConstantByGuid => 'getConstantByGuid',
	       getConstantByName => 'getConstantByName',
	       getConstantGuid => 'getConstantGuid',
	       getConstantName => 'getConstantName',
	       getCurrent => 'getCurrent',
	       getCycConnection => 'getCycConnection',
	       getCycImageID => 'getCycImageID',
	       getCycLeaseManager => 'getCycLeaseManager',
	       getCyclist => 'getCyclist',
	       getCycNartFromCons => 'getCycNartFromCons',
	       getDenotsOfString => 'getDenotsOfString',
	       getDisjointWiths => 'getDisjointWiths',
	       getELCycTerm => 'getELCycTerm',
	       getExternalIDString => 'getExternalIDString',
	       getForwardChainRules => 'getForwardChainRules',
	       getGafs => 'getGafs',
	       getGafsForNaut => 'getGafsForNaut',
	       getGafsForPredicates => 'getGafsForPredicates',
	       getGeneratedPhrase => 'getGeneratedPhrase',
	       getGenlPreds => 'getGenlPreds',
	       getGenls => 'getGenls',
	       getGenlSiblings => 'getGenlSiblings',
	       getHLCycTerm => 'getHLCycTerm',
	       getHLQueryProperties => 'getHLQueryProperties',
	       getHostName => 'getHostName',
	       getHttpPort => 'getHttpPort',
	       getImpreciseGeneratedPhrase => 'getImpreciseGeneratedPhrase',
	       getImpreciseParaphrase => 'getImpreciseParaphrase',
	       getInstances => 'getInstances',
	       getInstanceSiblings => 'getInstanceSiblings',
	       getInterArgIsa1_2_forArg2 => 'getInterArgIsa1_2_forArg2',
	       getInterArgIsa1_2s => 'getInterArgIsa1_2s',
	       getIsas => 'getIsas',
	       getKbSubset => 'getKbSubset',
	       getKePurpose => 'getKePurpose',
	       getKnownConstantByGuid => 'getKnownConstantByGuid',
	       getKnownConstantByName => 'getKnownConstantByName',
	       getKnownFortByName => 'getKnownFortByName',
	       getLocalDisjointWith => 'getLocalDisjointWith',
	       getMaxCols => 'getMaxCols',
	       getMaxSpecs => 'getMaxSpecs',
	       getMinCol => 'getMinCol',
	       getMinCols => 'getMinCols',
	       getMinGenls => 'getMinGenls',
	       getMinIsas => 'getMinIsas',
	       getMWSDenotsOfString => 'getMWSDenotsOfString',
	       getNameStrings => 'getNameStrings',
	       getNewCycAccessInteractively => 'getNewCycAccessInteractively',
	       getParaphrase => 'getParaphrase',
	       getPredicateValueTuplesInMt => 'getPredicateValueTuplesInMt',
	       getPublicConstants => 'getPublicConstants',
	       getRandomAssertion => 'getRandomAssertion',
	       getRandomConstant => 'getRandomConstant',
	       getRandomNart => 'getRandomNart',
	       getResultIsas => 'getResultIsas',
	       getSampleLeafSpecs => 'getSampleLeafSpecs',
	       getSiblings => 'getSiblings',
	       getSimplifiedSentence => 'getSimplifiedSentence',
	       getSpecs => 'getSpecs',
	       getSpecSiblings => 'getSpecSiblings',
	       getSymbolValue => 'getSymbolValue',
	       getSynonymousExternalConcepts => 'getSynonymousExternalConcepts',
	       getWhyCollectionsIntersect => 'getWhyCollectionsIntersect',
	       getWhyCollectionsIntersectParaphrase => 'getWhyCollectionsIntersectParaphrase',
	       getWhyGenl => 'getWhyGenl',
	       getWhyGenlParaphrase => 'getWhyGenlParaphrase',
	       getWhyIsa => 'getWhyIsa',
	       getWhyIsaParaphrase => 'getWhyIsaParaphrase',
	       hasCurrent => 'hasCurrent',
	       hasSomePredicateUsingTerm => 'hasSomePredicateUsingTerm',
	       hasValidLease => 'hasValidLease',
	       importMucExpression => 'importMucExpression',
	       importOwlOntology => 'importOwlOntology',
	       initializeNamedInferenceProblemStore => 'initializeNamedInferenceProblemStore',
	       isa => 'isa',
	       isAssertionValid => 'isAssertionValid',
	       isBackchainDiscouraged => 'isBackchainDiscouraged',
	       isBackchainEncouraged => 'isBackchainEncouraged',
	       isBackchainForbidden => 'isBackchainForbidden',
	       isBackchainRequired => 'isBackchainRequired',
	       isBinaryPredicate => 'isBinaryPredicate',
	       isClosed => 'isClosed',
	       isCollection => 'isCollection',
	       isCollection_Cached => 'isCollection_Cached',
	       isConstantNameAvailable => 'isConstantNameAvailable',
	       isCycLNonAtomicReifableTerm => 'isCycLNonAtomicReifableTerm',
	       isCycLNonAtomicUnreifableTerm => 'isCycLNonAtomicUnreifableTerm',
	       isEvaluatablePredicate => 'isEvaluatablePredicate',
	       isFormulaWellFormed => 'isFormulaWellFormed',
	       isFunction => 'isFunction',
	       isFunctionBound => 'isFunctionBound',
	       isGafValidAssertion => 'isGafValidAssertion',
	       isGenlInverseOf => 'isGenlInverseOf',
	       isGenlMtOf => 'isGenlMtOf',
	       isGenlOf => 'isGenlOf',
	       isGenlOf_Cached => 'isGenlOf_Cached',
	       isGenlPredOf => 'isGenlPredOf',
	       isGround => 'isGround',
	       isIndividual => 'isIndividual',
	       isIrreflexivePredicate => 'isIrreflexivePredicate',
	       isMicrotheory => 'isMicrotheory',
	       isOpenCyc => 'isOpenCyc',
	       isPossibleExternalIDString => 'isPossibleExternalIDString',
	       isPredicate => 'isPredicate',
	       isPublicConstant => 'isPublicConstant',
	       isQueryTrue => 'isQueryTrue',
	       isQueryTrue_Cached => 'isQueryTrue_Cached',
	       isQuotedCollection => 'isQuotedCollection',
	       isQuotedIsa => 'isQuotedIsa',
	       isSpecOf => 'isSpecOf',
	       isUnaryPredicate => 'isUnaryPredicate',
	       isValidConstantName => 'isValidConstantName',
	       isWellFormedFormula => 'isWellFormedFormula',
	       kill => 'kill',
	       killWithoutTranscript => 'killWithoutTranscript',
	       makeConstantWithGuidName => 'makeConstantWithGuidName',
	       makeCycConstant => 'makeCycConstant',
	       makeCyclifiedSentence => 'makeCyclifiedSentence',
	       makeCycList => 'makeCycList',
	       makeCycNaut => 'makeCycNaut',
	       makeCycSentence => 'makeCycSentence',
	       makeELMt => 'makeELMt',
	       makeUniqueCycConstant => 'makeUniqueCycConstant',
	       maybeAddLoginRedirect => 'maybeAddLoginRedirect',
	       noteTermHasPrecachedFactSheet => 'noteTermHasPrecachedFactSheet',
	       phraseStructureParse => 'phraseStructureParse',
	       predicateRelates => 'predicateRelates',
	       queriesEqualAtEL => 'queriesEqualAtEL',
	       queryPropertiesToString => 'queryPropertiesToString',
	       queryResultsToXMLString => 'queryResultsToXMLString',
	       queryVariable => 'queryVariable',
	       queryVariableLow => 'queryVariableLow',
	       queryVariables => 'queryVariables',
	       rename => 'rename',
	       rkfPhraseReader => 'rkfPhraseReader',
	       setCurrent => 'setCurrent',
	       setCyclist => 'setCyclist',
	       setKePurpose => 'setKePurpose',
	       setReadableNarts => 'setReadableNarts',
	       setSharedCycAccessInstance => 'setSharedCycAccessInstance',
	       setSymbolValue => 'setSymbolValue',
	       termKnownToHavePrecachedFactSheet => 'termKnownToHavePrecachedFactSheet',
	       toString => 'toString',
	       traceOff => 'traceOff',
	       traceOn => 'traceOn',
	       traceOnDetailed => 'traceOnDetailed',
	       unassertGaf => 'unassertGaf',
	       unassertMatchingAssertionsWithoutTranscript => 'unassertMatchingAssertionsWithoutTranscript',
	       unassertMtContentsWithoutTranscript => 'unassertMtContentsWithoutTranscript',
	       unassertMtContentsWithTranscript => 'unassertMtContentsWithTranscript',
	       unassertWithBookkeepingAndWithoutTranscript => 'unassertWithBookkeepingAndWithoutTranscript',
	       wrapBookkeeping => 'wrapBookkeeping',
	       wrapCyclistAndPurpose => 'wrapCyclistAndPurpose',
	       wrapDynamicBinding => 'wrapDynamicBinding',
	       xmlDatetimeString => 'xmlDatetimeString',

	       # ResearchCyc functions
	       areAssertedCoextensional => 'areAssertedCoextensional',
	       areDisjoint => 'areDisjoint',
	       areHierarchical => 'areHierarchical',
	       areIntersecting => 'areIntersecting',
	       areTacitCoextensional => 'areTacitCoextensional',
	       askCycQuery => 'askCycQuery',
	       askNewCycQuery => 'askNewCycQuery',
	       askWithVariable => 'askWithVariable',
	       askWithVariables => 'askWithVariables',
	       assertArg1FormatSingleEntry => 'assertArg1FormatSingleEntry',
	       assertArg1Genl => 'assertArg1Genl',
	       assertArg2Genl => 'assertArg2Genl',
	       assertArg3Genl => 'assertArg3Genl',
	       assertArgFormat => 'assertArgFormat',
	       assertArgIsa => 'assertArgIsa',
	       assertComment => 'assertComment',
	       assertConceptuallyRelated => 'assertConceptuallyRelated',
	       assertDefiningMt => 'assertDefiningMt',
	       assertGaf => 'assertGaf',
	       assertGenFormat => 'assertGenFormat',
	       assertGenlMt => 'assertGenlMt',
	       assertGenlPreds => 'assertGenlPreds',
	       assertGenls => 'assertGenls',
	       assertGenPhraseCountNounPlural => 'assertGenPhraseCountNounPlural',
	       assertGenPhraseCountNounSingular => 'assertGenPhraseCountNounSingular',
	       assertHLGaf => 'assertHLGaf',
	       assertIsa => 'assertIsa',
	       assertIsaBinaryPredicate => 'assertIsaBinaryPredicate',
	       assertIsaCollection => 'assertIsaCollection',
	       assertIsas => 'assertIsas',
	       assertNameString => 'assertNameString',
	       assertQuotedIsa => 'assertQuotedIsa',
	       assertResultGenl => 'assertResultGenl',
	       assertResultIsa => 'assertResultIsa',
	       assertSentence => 'assertSentence',
	       assertSynonymousExternalConcept => 'assertSynonymousExternalConcept',
	       assertTermDependsOn => 'assertTermDependsOn',
	       assertWithBookkeepingAndWithoutTranscript => 'assertWithBookkeepingAndWithoutTranscript',
	       assertWithTranscript => 'assertWithTranscript',
	       assertWithTranscriptAndBookkeeping => 'assertWithTranscriptAndBookkeeping',
	       assertWithTranscriptAndBookkeepingInternal => 'assertWithTranscriptAndBookkeepingInternal',
	       canonicalizeHLMT => 'canonicalizeHLMT',
	       canonicalizeList => 'canonicalizeList',
	       clearCurrentCyclist => 'clearCurrentCyclist',
	       close => 'close',
	       commonInitialization => 'commonInitialization',
	       constantNameCaseCollision => 'constantNameCaseCollision',
	       converse => 'converse',
	       converseBoolean => 'converseBoolean',
	       converseCycObject => 'converseCycObject',
	       ConverseException => 'ConverseException',
	       converseInt => 'converseInt',
	       converseList => 'converseList',
	       converseObject => 'converseObject',
	       converseRaw => 'converseRaw',
	       converseSentence => 'converseSentence',
	       converseString => 'converseString',
	       converseVoid => 'converseVoid',
	       countAllInstances => 'countAllInstances',
	       countAllInstances_Cached => 'countAllInstances_Cached',
	       countUsingBestIndex => 'countUsingBestIndex',
	       createBinaryPredicate => 'createBinaryPredicate',
	       createCollection => 'createCollection',
	       createCollectionDenotingBinaryFunction => 'createCollectionDenotingBinaryFunction',
	       createCollectionDenotingUnaryFunction => 'createCollectionDenotingUnaryFunction',
	       createCollectorMt => 'createCollectorMt',
	       createIndivDenotingUnaryFunction => 'createIndivDenotingUnaryFunction',
	       createIndividual => 'createIndividual',
	       createKbSubsetCollection => 'createKbSubsetCollection',
	       createMicrotheory => 'createMicrotheory',
	       createMicrotheorySystem => 'createMicrotheorySystem',
	       createNewPermanent => 'createNewPermanent',
	       createSpindleMt => 'createSpindleMt',
	       current => 'current',
	       CycAccess => 'CycAccess',
	       cyclifyString => 'cyclifyString',
	       destroyInferenceProblemStoreByName => 'destroyInferenceProblemStoreByName',
	       doConverse => 'doConverse',
	       doubleURLEncode => 'doubleURLEncode',
	       edit => 'edit',
	       ensureWffConstraints => 'ensureWffConstraints',
	       equalsEL => 'equalsEL',
	       executeQuery => 'executeQuery',
	       find => 'find',
	       findConstantsForGuids => 'findConstantsForGuids',
	       findConstantsForNames => 'findConstantsForNames',
	       findOrCreate => 'findOrCreate',
	       generateDisambiguationPhraseAndTypes => 'generateDisambiguationPhraseAndTypes',
	       getAllAssertionsInMt => 'getAllAssertionsInMt',
	       getAllDependentSpecs => 'getAllDependentSpecs',
	       getAllGenlPreds => 'getAllGenlPreds',
	       getAllGenls => 'getAllGenls',
	       getAllGenlsWrt => 'getAllGenlsWrt',
	       getAllInstances => 'getAllInstances',
	       getAllIsa => 'getAllIsa',
	       getAllQuotedInstances => 'getAllQuotedInstances',
	       getAllSpecInverses => 'getAllSpecInverses',
	       getAllSpecMts => 'getAllSpecMts',
	       getAllSpecPreds => 'getAllSpecPreds',
	       getAllSpecs => 'getAllSpecs',
	       getAllTermAssertions => 'getAllTermAssertions',
	       getApplicableBinaryPredicates => 'getApplicableBinaryPredicates',
	       getArg1 => 'getArg1',
	       getArg1Formats => 'getArg1Formats',
	       getArg1Isas => 'getArg1Isas',
	       getArg1s => 'getArg1s',
	       getArg2 => 'getArg2',
	       getArg2Formats => 'getArg2Formats',
	       getArg2Isas => 'getArg2Isas',
	       getArg2s => 'getArg2s',
	       getArg3Isas => 'getArg3Isas',
	       getArg4Isas => 'getArg4Isas',
	       getArgNGenls => 'getArgNGenls',
	       getArgNIsas => 'getArgNIsas',
	       getArity => 'getArity',
	       getAssertionArg2 => 'getAssertionArg2',
	       getAssertionById => 'getAssertionById',
	       getAssertionDate => 'getAssertionDate',
	       getBackchainImplicationRules => 'getBackchainImplicationRules',
	       getBackchainRules => 'getBackchainRules',
	       getBasePort => 'getBasePort',
	       getBrowserUrl => 'getBrowserUrl',
	       getCoExtensionals => 'getCoExtensionals',
	       getCollectionLeaves => 'getCollectionLeaves',
	       getComment => 'getComment',
	       getConstantByGuid => 'getConstantByGuid',
	       getConstantByName => 'getConstantByName',
	       getConstantGuid => 'getConstantGuid',
	       getConstantName => 'getConstantName',
	       getCurrent => 'getCurrent',
	       getCycConnection => 'getCycConnection',
	       getCycImageID => 'getCycImageID',
	       getCycInitializationRequest => 'getCycInitializationRequest',
	       getCycKBVersionString => 'getCycKBVersionString',
	       getCycLeaseManager => 'getCycLeaseManager',
	       getCyclist => 'getCyclist',
	       getCycNartFromCons => 'getCycNartFromCons',
	       getCycRevisionString => 'getCycRevisionString',
	       getDenotsOfString => 'getDenotsOfString',
	       getDisjointWiths => 'getDisjointWiths',
	       getELCycTerm => 'getELCycTerm',
	       getExternalIDString => 'getExternalIDString',
	       getForwardChainRules => 'getForwardChainRules',
	       getGafs => 'getGafs',
	       getGafsForNaut => 'getGafsForNaut',
	       getGafsForPredicates => 'getGafsForPredicates',
	       getGenlPreds => 'getGenlPreds',
	       getGenls => 'getGenls',
	       getGenlSiblings => 'getGenlSiblings',
	       getHLCycTerm => 'getHLCycTerm',
	       getHLQueryProperties => 'getHLQueryProperties',
	       getHostName => 'getHostName',
	       getHttpPort => 'getHttpPort',
	       getInstances => 'getInstances',
	       getInstanceSiblings => 'getInstanceSiblings',
	       getInterArgIsa1_2_forArg2 => 'getInterArgIsa1_2_forArg2',
	       getInterArgIsa1_2s => 'getInterArgIsa1_2s',
	       getIsas => 'getIsas',
	       getKbSubset => 'getKbSubset',
	       getKePurpose => 'getKePurpose',
	       getKnownConstantByGuid => 'getKnownConstantByGuid',
	       getKnownConstantByName => 'getKnownConstantByName',
	       getKnownFortByName => 'getKnownFortByName',
	       getLocalDisjointWith => 'getLocalDisjointWith',
	       getMaxCols => 'getMaxCols',
	       getMaxSpecs => 'getMaxSpecs',
	       getMinCol => 'getMinCol',
	       getMinCols => 'getMinCols',
	       getMinGenls => 'getMinGenls',
	       getMinIsas => 'getMinIsas',
	       getMWSDenotsOfString => 'getMWSDenotsOfString',
	       getNameStrings => 'getNameStrings',
	       getNewCycAccessInteractively => 'getNewCycAccessInteractively',
	       getPredicateValueTuplesInMt => 'getPredicateValueTuplesInMt',
	       getPublicConstants => 'getPublicConstants',
	       getRandomAssertion => 'getRandomAssertion',
	       getRandomConstant => 'getRandomConstant',
	       getRandomNart => 'getRandomNart',
	       getReestablishClosedConnections => 'getReestablishClosedConnections',
	       getResultIsas => 'getResultIsas',
	       getSampleLeafSpecs => 'getSampleLeafSpecs',
	       getSiblings => 'getSiblings',
	       getSimplifiedSentence => 'getSimplifiedSentence',
	       getSpecs => 'getSpecs',
	       getSpecSiblings => 'getSpecSiblings',
	       getSymbolValue => 'getSymbolValue',
	       getSynonymousExternalConcepts => 'getSynonymousExternalConcepts',
	       getTermByName => 'getTermByName',
	       getWhyCollectionsIntersect => 'getWhyCollectionsIntersect',
	       getWhyCollectionsIntersectParaphrase => 'getWhyCollectionsIntersectParaphrase',
	       getWhyGenl => 'getWhyGenl',
	       getWhyGenlParaphrase => 'getWhyGenlParaphrase',
	       getWhyIsa => 'getWhyIsa',
	       getWhyIsaParaphrase => 'getWhyIsaParaphrase',
	       handleCycInitializationRequestResponse => 'handleCycInitializationRequestResponse',
	       hasCurrent => 'hasCurrent',
	       hasSomePredicateUsingTerm => 'hasSomePredicateUsingTerm',
	       hasStaticCycServer => 'hasStaticCycServer',
	       hasValidLease => 'hasValidLease',
	       importMucExpression => 'importMucExpression',
	       importOwlOntology => 'importOwlOntology',
	       initializeNamedInferenceProblemStore => 'initializeNamedInferenceProblemStore',
	       initializeQueryProperties => 'initializeQueryProperties',
	       initializeQueryPropertiesNew => 'initializeQueryPropertiesNew',
	       initialValue => 'initialValue',
	       is64Bit => 'is64Bit',
	       is64BitString => 'is64BitString',
	       isa => 'isa',
	       isAssertionValid => 'isAssertionValid',
	       isBackchainDiscouraged => 'isBackchainDiscouraged',
	       isBackchainEncouraged => 'isBackchainEncouraged',
	       isBackchainForbidden => 'isBackchainForbidden',
	       isBackchainRequired => 'isBackchainRequired',
	       isBinaryPredicate => 'isBinaryPredicate',
	       isClosed => 'isClosed',
	       isCollection => 'isCollection',
	       isCollection_Cached => 'isCollection_Cached',
	       isConstantNameAvailable => 'isConstantNameAvailable',
	       isCycLNonAtomicReifableTerm => 'isCycLNonAtomicReifableTerm',
	       isCycLNonAtomicUnreifableTerm => 'isCycLNonAtomicUnreifableTerm',
	       isEvaluatablePredicate => 'isEvaluatablePredicate',
	       isFormulaWellFormed => 'isFormulaWellFormed',
	       isFormulaWellFormedInternal => 'isFormulaWellFormedInternal',
	       isFunction => 'isFunction',
	       isFunctionBound => 'isFunctionBound',
	       isGafValidAssertion => 'isGafValidAssertion',
	       isGenlInverseOf => 'isGenlInverseOf',
	       isGenlMtOf => 'isGenlMtOf',
	       isGenlOf => 'isGenlOf',
	       isGenlOf_Cached => 'isGenlOf_Cached',
	       isGenlPredOf => 'isGenlPredOf',
	       isGround => 'isGround',
	       isIndividual => 'isIndividual',
	       isIrreflexivePredicate => 'isIrreflexivePredicate',
	       isMicrotheory => 'isMicrotheory',
	       isOkForNewCycQuery => 'isOkForNewCycQuery',
	       isOpenCyc => 'isOpenCyc',
	       isPossibleExternalIDString => 'isPossibleExternalIDString',
	       isPredicate => 'isPredicate',
	       isPublicConstant => 'isPublicConstant',
	       isQueryTrue => 'isQueryTrue',
	       isQueryTrue_Cached => 'isQueryTrue_Cached',
	       isQuotedCollection => 'isQuotedCollection',
	       isQuotedIsa => 'isQuotedIsa',
	       isReifiableFunction => 'isReifiableFunction',
	       isSpecOf => 'isSpecOf',
	       isUnaryPredicate => 'isUnaryPredicate',
	       isValidConstantName => 'isValidConstantName',
	       isWellFormedFormula => 'isWellFormedFormula',
	       isWellFormedFormulaInternal => 'isWellFormedFormulaInternal',
	       kill => 'kill',
	       killWithoutTranscript => 'killWithoutTranscript',
	       makeConstantWithGuidName => 'makeConstantWithGuidName',
	       makeCycConstant => 'makeCycConstant',
	       makeCyclifiedSentence => 'makeCyclifiedSentence',
	       makeCycList => 'makeCycList',
	       makeCycNaut => 'makeCycNaut',
	       makeCycSentence => 'makeCycSentence',
	       makeELMt => 'makeELMt',
	       makePrefetchedConstant => 'makePrefetchedConstant',
	       makeRequestString => 'makeRequestString',
	       makeUniqueCycConstant => 'makeUniqueCycConstant',
	       maybeAddLoginRedirect => 'maybeAddLoginRedirect',
	       maybeAddPassword => 'maybeAddPassword',
	       maybeLogCommand => 'maybeLogCommand',
	       maybeLogResponse => 'maybeLogResponse',
	       maybeReEstablishCycConnection => 'maybeReEstablishCycConnection',
	       merge => 'merge',
	       noteTermHasPrecachedFactSheet => 'noteTermHasPrecachedFactSheet',
	       phraseStructureParse => 'phraseStructureParse',
	       predicateRelates => 'predicateRelates',
	       provablyNotIsa => 'provablyNotIsa',
	       queriesEqualAtEL => 'queriesEqualAtEL',
	       queryPropertiesToString => 'queryPropertiesToString',
	       queryResultsToXMLString => 'queryResultsToXMLString',
	       queryResultsToXMLStringInternal => 'queryResultsToXMLStringInternal',
	       queryVariable => 'queryVariable',
	       queryVariableLow => 'queryVariableLow',
	       queryVariables => 'queryVariables',
	       queryVariablesInternal => 'queryVariablesInternal',
	       queryVariablesLow => 'queryVariablesLow',
	       reEstablishCycConnection => 'reEstablishCycConnection',
	       rename => 'rename',
	       requireNonOpenCyc => 'requireNonOpenCyc',
	       rkfPhraseReader => 'rkfPhraseReader',
	       setCurrent => 'setCurrent',
	       setCurrentCyclist => 'setCurrentCyclist',
	       setCyclist => 'setCyclist',
	       setKePurpose => 'setKePurpose',
	       setReadableNarts => 'setReadableNarts',
	       setReestablishClosedConnections => 'setReestablishClosedConnections',
	       setSharedCycAccessInstance => 'setSharedCycAccessInstance',
	       setSymbolValue => 'setSymbolValue',
	       setupComm => 'setupComm',
	       setupNewCommConnection => 'setupNewCommConnection',
	       termKnownToHavePrecachedFactSheet => 'termKnownToHavePrecachedFactSheet',
	       toString => 'toString',
	       traceOff => 'traceOff',
	       traceOn => 'traceOn',
	       traceOnDetailed => 'traceOnDetailed',
	       unassertAssertion => 'unassertAssertion',
	       unassertGaf => 'unassertGaf',
	       unassertMatchingAssertionsWithoutTranscript => 'unassertMatchingAssertionsWithoutTranscript',
	       unassertMtContentsWithoutTranscript => 'unassertMtContentsWithoutTranscript',
	       unassertMtContentsWithTranscript => 'unassertMtContentsWithTranscript',
	       unassertWithBookkeepingAndWithoutTranscript => 'unassertWithBookkeepingAndWithoutTranscript',
	       urlEncode => 'urlEncode',
	       verifyPossibleDenotationalTerm => 'verifyPossibleDenotationalTerm',
	       withBookkeepingInfo => 'withBookkeepingInfo',
	       wrapBookkeeping => 'wrapBookkeeping',
	       wrapCyclistAndPurpose => 'wrapCyclistAndPurpose',
	       wrapDisableWffChecking => 'wrapDisableWffChecking',
	       wrapDynamicBinding => 'wrapDynamicBinding',
	       wrapForwardInferenceRulesTemplates => 'wrapForwardInferenceRulesTemplates',
	       xmlDatetimeString => 'xmlDatetimeString',

	       # ResearchCyc1_0 functions
	       areAssertedCoextensional => 'areAssertedCoextensional',
	       areDisjoint => 'areDisjoint',
	       areHierarchical => 'areHierarchical',
	       areIntersecting => 'areIntersecting',
	       areTacitCoextensional => 'areTacitCoextensional',
	       askCycQuery => 'askCycQuery',
	       askNewCycQuery => 'askNewCycQuery',
	       askWithVariable => 'askWithVariable',
	       askWithVariables => 'askWithVariables',
	       assertArg1FormatSingleEntry => 'assertArg1FormatSingleEntry',
	       assertArg1Genl => 'assertArg1Genl',
	       assertArg2Genl => 'assertArg2Genl',
	       assertArg3Genl => 'assertArg3Genl',
	       assertArgFormat => 'assertArgFormat',
	       assertArgIsa => 'assertArgIsa',
	       assertComment => 'assertComment',
	       assertConceptuallyRelated => 'assertConceptuallyRelated',
	       assertDefiningMt => 'assertDefiningMt',
	       assertGaf => 'assertGaf',
	       assertGenFormat => 'assertGenFormat',
	       assertGenlMt => 'assertGenlMt',
	       assertGenlPreds => 'assertGenlPreds',
	       assertGenls => 'assertGenls',
	       assertGenPhraseCountNounPlural => 'assertGenPhraseCountNounPlural',
	       assertGenPhraseCountNounSingular => 'assertGenPhraseCountNounSingular',
	       assertHLGaf => 'assertHLGaf',
	       assertIsa => 'assertIsa',
	       assertIsaBinaryPredicate => 'assertIsaBinaryPredicate',
	       assertIsaCollection => 'assertIsaCollection',
	       assertIsas => 'assertIsas',
	       assertNameString => 'assertNameString',
	       assertQuotedIsa => 'assertQuotedIsa',
	       assertResultGenl => 'assertResultGenl',
	       assertResultIsa => 'assertResultIsa',
	       assertSynonymousExternalConcept => 'assertSynonymousExternalConcept',
	       assertTermDependsOn => 'assertTermDependsOn',
	       assertWithBookkeepingAndWithoutTranscript => 'assertWithBookkeepingAndWithoutTranscript',
	       assertWithTranscript => 'assertWithTranscript',
	       assertWithTranscriptAndBookkeeping => 'assertWithTranscriptAndBookkeeping',
	       canonicalizeHLMT => 'canonicalizeHLMT',
	       canonicalizeList => 'canonicalizeList',
	       close => 'close',
	       constantNameCaseCollision => 'constantNameCaseCollision',
	       constants => 'constants',
	       converseBoolean => 'converseBoolean',
	       converseCycObject => 'converseCycObject',
	       converseInt => 'converseInt',
	       converseList => 'converseList',
	       converseObject => 'converseObject',
	       converseString => 'converseString',
	       converseVoid => 'converseVoid',
	       countAllInstances => 'countAllInstances',
	       countAllInstances_Cached => 'countAllInstances_Cached',
	       countUsingBestIndex => 'countUsingBestIndex',
	       createBinaryPredicate => 'createBinaryPredicate',
	       createCollection => 'createCollection',
	       createCollectionDenotingBinaryFunction => 'createCollectionDenotingBinaryFunction',
	       createCollectionDenotingUnaryFunction => 'createCollectionDenotingUnaryFunction',
	       createCollectorMt => 'createCollectorMt',
	       createIndivDenotingUnaryFunction => 'createIndivDenotingUnaryFunction',
	       createIndividual => 'createIndividual',
	       createKbSubsetCollection => 'createKbSubsetCollection',
	       createMicrotheory => 'createMicrotheory',
	       createMicrotheorySystem => 'createMicrotheorySystem',
	       createNewPermanent => 'createNewPermanent',
	       createSpindleMt => 'createSpindleMt',
	       current => 'current',
	       CycAccess => 'CycAccess',
	       destroyInferenceProblemStoreByName => 'destroyInferenceProblemStoreByName',
	       ensureWffConstraints => 'ensureWffConstraints',
	       find => 'find',
	       findConstantsForGuids => 'findConstantsForGuids',
	       findConstantsForNames => 'findConstantsForNames',
	       findOrCreate => 'findOrCreate',
	       generateDisambiguationPhraseAndTypes => 'generateDisambiguationPhraseAndTypes',
	       getAllAssertionsInMt => 'getAllAssertionsInMt',
	       getAllDependentSpecs => 'getAllDependentSpecs',
	       getAllGenlPreds => 'getAllGenlPreds',
	       getAllGenls => 'getAllGenls',
	       getAllGenlsWrt => 'getAllGenlsWrt',
	       getAllInstances => 'getAllInstances',
	       getAllInstancesHashSet => 'getAllInstancesHashSet',
	       getAllIsa => 'getAllIsa',
	       getAllQuotedInstances => 'getAllQuotedInstances',
	       getAllSpecInverses => 'getAllSpecInverses',
	       getAllSpecInversesHashSet => 'getAllSpecInversesHashSet',
	       getAllSpecMts => 'getAllSpecMts',
	       getAllSpecMtsHashSet => 'getAllSpecMtsHashSet',
	       getAllSpecPreds => 'getAllSpecPreds',
	       getAllSpecPredsHashSet => 'getAllSpecPredsHashSet',
	       getAllSpecs => 'getAllSpecs',
	       getAllSpecsHashSet => 'getAllSpecsHashSet',
	       getApplicableBinaryPredicates => 'getApplicableBinaryPredicates',
	       getArg1 => 'getArg1',
	       getArg1Formats => 'getArg1Formats',
	       getArg1Isas => 'getArg1Isas',
	       getArg1s => 'getArg1s',
	       getArg2 => 'getArg2',
	       getArg2Formats => 'getArg2Formats',
	       getArg2Isas => 'getArg2Isas',
	       getArg2s => 'getArg2s',
	       getArg3Isas => 'getArg3Isas',
	       getArg4Isas => 'getArg4Isas',
	       getArgNGenls => 'getArgNGenls',
	       getArgNIsas => 'getArgNIsas',
	       getArity => 'getArity',
	       getAssertionArg2 => 'getAssertionArg2',
	       getAssertionById => 'getAssertionById',
	       getAssertionDate => 'getAssertionDate',
	       getBackchainImplicationRules => 'getBackchainImplicationRules',
	       getBackchainRules => 'getBackchainRules',
	       getBasePort => 'getBasePort',
	       getCoExtensionals => 'getCoExtensionals',
	       getCollectionLeaves => 'getCollectionLeaves',
	       getComment => 'getComment',
	       getConstantByGuid => 'getConstantByGuid',
	       getConstantByName => 'getConstantByName',
	       getConstantGuid => 'getConstantGuid',
	       getConstantName => 'getConstantName',
	       getCycConnection => 'getCycConnection',
	       getCycImageID => 'getCycImageID',
	       getCycLeaseManager => 'getCycLeaseManager',
	       getCyclist => 'getCyclist',
	       getCycNartFromCons => 'getCycNartFromCons',
	       getDenotsOfString => 'getDenotsOfString',
	       getDisjointWiths => 'getDisjointWiths',
	       getELCycTerm => 'getELCycTerm',
	       getExternalIDString => 'getExternalIDString',
	       getForwardChainRules => 'getForwardChainRules',
	       getGafs => 'getGafs',
	       getGafsForNaut => 'getGafsForNaut',
	       getGafsForPredicates => 'getGafsForPredicates',
	       getGeneratedPhrase => 'getGeneratedPhrase',
	       getGenlPreds => 'getGenlPreds',
	       getGenls => 'getGenls',
	       getGenlSiblings => 'getGenlSiblings',
	       getHLCycTerm => 'getHLCycTerm',
	       getHLQueryProperties => 'getHLQueryProperties',
	       getHostName => 'getHostName',
	       getImpreciseParaphrase => 'getImpreciseParaphrase',
	       getImprecisePluralGeneratedPhrase => 'getImprecisePluralGeneratedPhrase',
	       getImpreciseSingularGeneratedPhrase => 'getImpreciseSingularGeneratedPhrase',
	       getInstances => 'getInstances',
	       getInstanceSiblings => 'getInstanceSiblings',
	       getInterArgIsa1_2_forArg2 => 'getInterArgIsa1_2_forArg2',
	       getInterArgIsa1_2s => 'getInterArgIsa1_2s',
	       getIsas => 'getIsas',
	       getKbSubset => 'getKbSubset',
	       getKePurpose => 'getKePurpose',
	       getKnownConstantByGuid => 'getKnownConstantByGuid',
	       getKnownConstantByName => 'getKnownConstantByName',
	       getLocalDisjointWith => 'getLocalDisjointWith',
	       getMaxCols => 'getMaxCols',
	       getMaxSpecs => 'getMaxSpecs',
	       getMinCol => 'getMinCol',
	       getMinCols => 'getMinCols',
	       getMinGenls => 'getMinGenls',
	       getMinIsas => 'getMinIsas',
	       getMWSDenotsOfString => 'getMWSDenotsOfString',
	       getNameStrings => 'getNameStrings',
	       getParaphrase => 'getParaphrase',
	       getPluralGeneratedPhrase => 'getPluralGeneratedPhrase',
	       getPredicateValueTuplesInMt => 'getPredicateValueTuplesInMt',
	       getPublicConstants => 'getPublicConstants',
	       getRandomAssertion => 'getRandomAssertion',
	       getRandomConstant => 'getRandomConstant',
	       getRandomNart => 'getRandomNart',
	       getResultIsas => 'getResultIsas',
	       getSampleLeafSpecs => 'getSampleLeafSpecs',
	       getSiblings => 'getSiblings',
	       getSingularGeneratedPhrase => 'getSingularGeneratedPhrase',
	       getSpecs => 'getSpecs',
	       getSpecSiblings => 'getSpecSiblings',
	       getSymbolValue => 'getSymbolValue',
	       getSynonymousExternalConcepts => 'getSynonymousExternalConcepts',
	       getWhyCollectionsIntersect => 'getWhyCollectionsIntersect',
	       getWhyCollectionsIntersectParaphrase => 'getWhyCollectionsIntersectParaphrase',
	       getWhyGenl => 'getWhyGenl',
	       getWhyGenlParaphrase => 'getWhyGenlParaphrase',
	       getWhyIsa => 'getWhyIsa',
	       getWhyIsaParaphrase => 'getWhyIsaParaphrase',
	       hasCurrent => 'hasCurrent',
	       HashMap => 'HashMap',
	       hasSomePredicateUsingTerm => 'hasSomePredicateUsingTerm',
	       hasValidLease => 'hasValidLease',
	       importMucExpression => 'importMucExpression',
	       initializeConstants => 'initializeConstants',
	       initializeNamedInferenceProblemStore => 'initializeNamedInferenceProblemStore',
	       initializeQueryProperties => 'initializeQueryProperties',
	       isa => 'isa',
	       isAssertionValid => 'isAssertionValid',
	       isBackchainDiscouraged => 'isBackchainDiscouraged',
	       isBackchainEncouraged => 'isBackchainEncouraged',
	       isBackchainForbidden => 'isBackchainForbidden',
	       isBackchainRequired => 'isBackchainRequired',
	       isBinaryPredicate => 'isBinaryPredicate',
	       isClosed => 'isClosed',
	       isCollection => 'isCollection',
	       isCollection_Cached => 'isCollection_Cached',
	       isConstantNameAvailable => 'isConstantNameAvailable',
	       isCycLNonAtomicReifableTerm => 'isCycLNonAtomicReifableTerm',
	       isCycLNonAtomicUnreifableTerm => 'isCycLNonAtomicUnreifableTerm',
	       isEvaluatablePredicate => 'isEvaluatablePredicate',
	       isFormulaWellFormed => 'isFormulaWellFormed',
	       isFunction => 'isFunction',
	       isFunctionBound => 'isFunctionBound',
	       isGenlInverseOf => 'isGenlInverseOf',
	       isGenlMtOf => 'isGenlMtOf',
	       isGenlOf => 'isGenlOf',
	       isGenlOf_Cached => 'isGenlOf_Cached',
	       isGenlPredOf => 'isGenlPredOf',
	       isIndividual => 'isIndividual',
	       isIrreflexivePredicate => 'isIrreflexivePredicate',
	       isMicrotheory => 'isMicrotheory',
	       isOpenCyc => 'isOpenCyc',
	       isPredicate => 'isPredicate',
	       isPublicConstant => 'isPublicConstant',
	       isQueryTrue => 'isQueryTrue',
	       isQueryTrue_Cached => 'isQueryTrue_Cached',
	       isQuotedCollection => 'isQuotedCollection',
	       isQuotedIsa => 'isQuotedIsa',
	       isSpecOf => 'isSpecOf',
	       isUnaryPredicate => 'isUnaryPredicate',
	       isValidConstantName => 'isValidConstantName',
	       isWellFormedFormula => 'isWellFormedFormula',
	       kill => 'kill',
	       killWithoutTranscript => 'killWithoutTranscript',
	       makeConstantWithGuidName => 'makeConstantWithGuidName',
	       makeCycConstant => 'makeCycConstant',
	       makeCycList => 'makeCycList',
	       makeELMt => 'makeELMt',
	       makePrefetchedConstant => 'makePrefetchedConstant',
	       makeUniqueCycConstant => 'makeUniqueCycConstant',
	       predicateRelates => 'predicateRelates',
	       queryPropertiesToString => 'queryPropertiesToString',
	       queryResultsToXMLString => 'queryResultsToXMLString',
	       queryVariable => 'queryVariable',
	       queryVariables => 'queryVariables',
	       rename => 'rename',
	       rkfPhraseReader => 'rkfPhraseReader',
	       setCyclist => 'setCyclist',
	       setKePurpose => 'setKePurpose',
	       setReadableNarts => 'setReadableNarts',
	       setSharedCycAccessInstance => 'setSharedCycAccessInstance',
	       setSymbolValue => 'setSymbolValue',
	       toString => 'toString',
	       traceOff => 'traceOff',
	       traceOn => 'traceOn',
	       traceOnDetailed => 'traceOnDetailed',
	       unassertGaf => 'unassertGaf',
	       unassertMatchingAssertionsWithoutTranscript => 'unassertMatchingAssertionsWithoutTranscript',
	       unassertMtContentsWithoutTranscript => 'unassertMtContentsWithoutTranscript',
	       unassertMtContentsWithTranscript => 'unassertMtContentsWithTranscript',
	       unassertWithBookkeepingAndWithoutTranscript => 'unassertWithBookkeepingAndWithoutTranscript',
	       wrapBookkeeping => 'wrapBookkeeping',
	       xmlDatetimeString => 'xmlDatetimeString',

	       # functions we added
	       createInferenceParams => 'createInferenceParams',
	       frdcsaSetHostAndPort => 'frdcsaSetHostAndPort',
	      },
  );

sub SetUserAndCycKE {
  my ($self, %args) = @_;
  my $cycAdministrator = $self->getKnownConstantByName($args{User} || "CycAdministrator");
  my $generalCycKE = $self->getKnownConstantByName($args{CycKE} || "GeneralCycKE");
  $self->setCyclist($cycAdministrator); # needed to maintain bookeeping information
  $self->setKePurpose($generalCycKE); # needed to maintain bookeeping information
}

__PACKAGE__->meta->make_immutable;
no Moose;
1;
